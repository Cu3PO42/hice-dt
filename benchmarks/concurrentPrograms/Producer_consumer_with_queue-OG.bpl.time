[TRACE] Using prover: /home/alexander/sharedData/uni/hice-dt/Boogie/Binaries/z3.exe
Parsing /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Coalescing blocks...
#parameters: 4
#parameters: 4
#parameters: 4
#parameters: 4
#parameters: 4
#parameters: 4
#parameters: 4
#parameters: 4
Generating VC of push_back
Generating VC of pop_front
Generating VC of pre_condition
Generating VC of post_condition
Generating VC of t1_transition_s1
Generating VC of t1_transition_s2
Generating VC of t1_transition_s3
Generating VC of t2_transition_s1
Generating VC of t2_transition_s2
Generating VC of t2_transition_s3
Generating VC of Q0_stable_t1_s3
Generating VC of Q1_stable_t1_s3
Generating VC of Q2_stable_t1_s3
Generating VC of Q3_stable_t1_s3
Generating VC of Q0_stable_t1_s2
Generating VC of Q1_stable_t1_s2
Generating VC of Q2_stable_t1_s2
Generating VC of Q3_stable_t1_s2
Generating VC of P0_stable_t2_s3
Generating VC of P1_stable_t2_s3
Generating VC of P2_stable_t2_s3
Generating VC of P3_stable_t2_s3
Verifying post_condition: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  true
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  true
}
Added Horn clause: 0 && 1 => 
Prover Time taken = 0.117076
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0068760
Verifying post_condition: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.007077
Prover Time taken = 0.003232
Prover Time taken = 0.003098
Prover Time taken = 0.003256
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.005037
Prover Time taken = 0.006019
Prover Time taken = 0.005612
Prover Time taken = 0.004517
Verifying Q3_stable_t1_s3: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.003663
Prover Time taken = 0.004896
Prover Time taken = 0.004871
Prover Time taken = 0.006914
Verifying Q3_stable_t1_s2: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.00478
Prover Time taken = 0.00372
Prover Time taken = 0.003855
Prover Time taken = 0.005029
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.005054
Prover Time taken = 0.004618
Prover Time taken = 0.005276
Prover Time taken = 0.005063
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.003554
Prover Time taken = 0.003035
Prover Time taken = 0.003242
Prover Time taken = 0.003049
Verifying t1_transition_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.00429
Prover Time taken = 0.003866
Prover Time taken = 0.00444
Prover Time taken = 0.004535
Verifying P0_stable_t2_s3: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.005264
Prover Time taken = 0.006172
Prover Time taken = 0.00644
Prover Time taken = 0.004671
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004635
Prover Time taken = 0.004133
Prover Time taken = 0.005469
Prover Time taken = 0.004698
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004217
Prover Time taken = 0.004479
Prover Time taken = 0.004062
Prover Time taken = 0.004078
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004373
Prover Time taken = 0.004035
Prover Time taken = 0.004298
Prover Time taken = 0.004218
Verifying Q0_stable_t1_s2: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004498
Prover Time taken = 0.004308
Prover Time taken = 0.004341
Prover Time taken = 0.006332
Verifying t2_transition_s3: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.003291
Prover Time taken = 0.00291
Prover Time taken = 0.003309
Prover Time taken = 0.003096
Verifying Q2_stable_t1_s3: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.005331
Prover Time taken = 0.004961
Prover Time taken = 0.004754
Prover Time taken = 0.004876
Verifying Q2_stable_t1_s2: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.003959
Prover Time taken = 0.005097
Prover Time taken = 0.005021
Prover Time taken = 0.004666
Verifying P1_stable_t2_s3: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.008706
Prover Time taken = 0.00448
Prover Time taken = 0.00499
Prover Time taken = 0.004316
Verifying Q1_stable_t1_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.005533
Prover Time taken = 0.00617
Prover Time taken = 0.005149
Prover Time taken = 0.005044
Verifying Q1_stable_t1_s3: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004238
Prover Time taken = 0.005202
Prover Time taken = 0.004569
Prover Time taken = 0.004593
Verifying P2_stable_t2_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.006644
Prover Time taken = 0.004376
Prover Time taken = 0.005715
Prover Time taken = 0.004601
Verifying pre_condition: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Added: P0:0,0: positive
Prover Time taken = 0.006063
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0091300
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.008205
Added Horn clause: 2 => 3
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0086870
Verifying Q3_stable_t1_s2: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004974
Prover Time taken = 0.005417
Prover Time taken = 0.00709
Prover Time taken = 0.005107
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004777
Prover Time taken = 0.0057
Prover Time taken = 0.006314
Prover Time taken = 0.006596
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.008352
Added Horn clause: 3 => 4
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0095050
Verifying Q3_stable_t1_s3: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.005095
Prover Time taken = 0.007511
Prover Time taken = 0.00429
Prover Time taken = 0.006275
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003022
Prover Time taken = 0.002977
Prover Time taken = 0.002737
Prover Time taken = 0.003019
Verifying t1_transition_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.00516
Added Horn clause: 4 => 5
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0094840
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.007378
Added Horn clause: 5 => 6
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0067640
Verifying Q3_stable_t1_s2: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004749
Prover Time taken = 0.004261
Prover Time taken = 0.004659
Prover Time taken = 0.004078
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003452
Prover Time taken = 0.00323
Prover Time taken = 0.00344
Prover Time taken = 0.003184
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003982
Added Horn clause: 6 => 7
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0070630
Verifying Q3_stable_t1_s3: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004203
Prover Time taken = 0.003726
Prover Time taken = 0.005217
Prover Time taken = 0.004614
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.005247
Prover Time taken = 0.00257
Prover Time taken = 0.001847
Prover Time taken = 0.002314
Verifying t1_transition_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003755
Added Horn clause: 7 => 8
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0067030
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.007256
Added Horn clause: 8 => 9
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0070230
Verifying Q3_stable_t1_s2: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.005002
Prover Time taken = 0.004232
Prover Time taken = 0.005282
Prover Time taken = 0.005293
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.005898
Prover Time taken = 0.003784
Prover Time taken = 0.003893
Prover Time taken = 0.004484
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002138
Prover Time taken = 0.00173
Prover Time taken = 0.00167
Prover Time taken = 0.002527
Verifying t1_transition_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003435
Added Horn clause: 7 => 10
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0063920
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004549
Added Horn clause: 10 => 11
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0076950
Verifying post_condition: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.008031
Prover Time taken = 0.006702
Prover Time taken = 0.004322
Prover Time taken = 0.002405
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004558
Prover Time taken = 0.003972
Prover Time taken = 0.003709
Prover Time taken = 0.003886
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004673
Added Horn clause: 12 => 13
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0059330
Verifying post_condition: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.003047
Prover Time taken = 0.003432
Prover Time taken = 0.002613
Prover Time taken = 0.003361
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004475
Prover Time taken = 0.004344
Prover Time taken = 0.00338
Prover Time taken = 0.002693
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002242
Prover Time taken = 0.006516
Added Horn clause: 14 => 15
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0062200
Verifying post_condition: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.00284
Prover Time taken = 0.002158
Prover Time taken = 0.003469
Prover Time taken = 0.002424
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.0033
Prover Time taken = 0.004355
Prover Time taken = 0.003715
Prover Time taken = 0.003175
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001988
Prover Time taken = 0.001881
Prover Time taken = 0.001812
Prover Time taken = 0.002233
Verifying t1_transition_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.00217
Prover Time taken = 0.002007
Prover Time taken = 0.001996
Prover Time taken = 0.002057
Verifying P0_stable_t2_s3: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.002568
Prover Time taken = 0.00237
Prover Time taken = 0.002188
Prover Time taken = 0.004419
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003511
Prover Time taken = 0.00315
Prover Time taken = 0.003119
Prover Time taken = 0.003409
Verifying Q0_stable_t1_s2: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003772
Prover Time taken = 0.003638
Prover Time taken = 0.003233
Prover Time taken = 0.003209
Verifying Q2_stable_t1_s3: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003482
Prover Time taken = 0.003341
Prover Time taken = 0.003153
Prover Time taken = 0.003404
Verifying Q2_stable_t1_s2: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003171
Prover Time taken = 0.00397
Prover Time taken = 0.005585
Prover Time taken = 0.003983
Verifying P1_stable_t2_s3: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.002869
Prover Time taken = 0.002219
Prover Time taken = 0.003246
Prover Time taken = 0.002446
Verifying Q1_stable_t1_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003368
Prover Time taken = 0.003779
Prover Time taken = 0.003397
Prover Time taken = 0.004393
Verifying Q1_stable_t1_s3: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004029
Prover Time taken = 0.00337
Prover Time taken = 0.003957
Prover Time taken = 0.00441
Verifying P2_stable_t2_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.002826
Prover Time taken = 0.002387
Prover Time taken = 0.002629
Prover Time taken = 0.002502
Verifying pre_condition: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Added: Q0:0,0: positive
Prover Time taken = 0.003382
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0073770
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003739
Prover Time taken = 0.00346
Prover Time taken = 0.003462
Prover Time taken = 0.002585
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.007856
Added Horn clause: 16 => 17
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0071450
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004917
Prover Time taken = 0.004561
Prover Time taken = 0.005324
Prover Time taken = 0.004603
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.003296
Prover Time taken = 0.003359
Prover Time taken = 0.003307
Prover Time taken = 0.003316
Verifying Q0_stable_t1_s2: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004759
Added Horn clause: 16 && 3 => 18
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0093140
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004364
Added Horn clause: 18 && 4 => 19
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0072700
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.00237
Prover Time taken = 0.002286
Prover Time taken = 0.002097
Prover Time taken = 0.002201
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.006542
Added Horn clause: 19 => 20
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0070020
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.005496
Added Horn clause: 18 => 21
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0089450
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004977
Prover Time taken = 0.003687
Prover Time taken = 0.003985
Prover Time taken = 0.003742
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.005977
Added Horn clause: 20 => 22
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0075510
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.007615
Added Horn clause: 13 && 22 => 23
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0086820
Verifying post_condition: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.002741
Prover Time taken = 0.002741
Prover Time taken = 0.002317
Prover Time taken = 0.002291
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004743
Prover Time taken = 0.002637
Prover Time taken = 0.004135
Prover Time taken = 0.003994
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003211
Prover Time taken = 0.003437
Prover Time taken = 0.002881
Prover Time taken = 0.003275
Verifying P0_stable_t2_s3: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.005236
Added Horn clause: 12 && 22 => 24
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0082370
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002944
Prover Time taken = 0.00301
Prover Time taken = 0.003069
Prover Time taken = 0.003572
Verifying t1_transition_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002398
Prover Time taken = 0.003285
Prover Time taken = 0.001898
Prover Time taken = 0.001994
Verifying P0_stable_t2_s3: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003402
Prover Time taken = 0.00314
Prover Time taken = 0.002451
Prover Time taken = 0.00512
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.005182
Added Horn clause: 21 => 25
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0088300
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003011
Prover Time taken = 0.002879
Prover Time taken = 0.002319
Prover Time taken = 0.002439
Verifying P0_stable_t2_s3: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002186
Prover Time taken = 0.002899
Prover Time taken = 0.002459
Prover Time taken = 0.002219
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002687
Prover Time taken = 0.002916
Prover Time taken = 0.002926
Prover Time taken = 0.002703
Verifying Q0_stable_t1_s2: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004106
Added Horn clause: 18 && 6 => 26
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0083140
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003612
Prover Time taken = 0.003321
Prover Time taken = 0.002723
Prover Time taken = 0.003335
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004806
Added Horn clause: 27 => 28
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0081880
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.005159
Added Horn clause: 26 => 29
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0060930
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004173
Prover Time taken = 0.002899
Prover Time taken = 0.002962
Prover Time taken = 0.002935
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004074
Added Horn clause: 28 => 30
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0063270
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002592
Prover Time taken = 0.002335
Prover Time taken = 0.002195
Prover Time taken = 0.002276
Verifying P0_stable_t2_s3: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003779
Prover Time taken = 0.002667
Prover Time taken = 0.003495
Prover Time taken = 0.002745
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003768
Added Horn clause: 29 => 31
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0090650
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003273
Prover Time taken = 0.00298
Prover Time taken = 0.002593
Prover Time taken = 0.003396
Verifying P0_stable_t2_s3: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002008
Prover Time taken = 0.001885
Prover Time taken = 0.001821
Prover Time taken = 0.002102
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.00246
Prover Time taken = 0.002037
Prover Time taken = 0.001759
Prover Time taken = 0.00187
Verifying Q0_stable_t1_s2: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002517
Prover Time taken = 0.002211
Prover Time taken = 0.00191
Prover Time taken = 0.001964
Verifying t2_transition_s3: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003696
Added Horn clause: 22 => 32
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0073960
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.00253
Prover Time taken = 0.002141
Prover Time taken = 0.001976
Prover Time taken = 0.002252
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004472
Added Horn clause: 32 => 33
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0076260
Verifying post_condition: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.003337
Prover Time taken = 0.002405
Prover Time taken = 0.002517
Prover Time taken = 0.002561
Verifying Q3_stable_t1_s3: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003831
Prover Time taken = 0.004551
Prover Time taken = 0.003762
Prover Time taken = 0.004191
Verifying Q3_stable_t1_s2: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003716
Prover Time taken = 0.003621
Prover Time taken = 0.003583
Prover Time taken = 0.003948
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003147
Prover Time taken = 0.002772
Prover Time taken = 0.002789
Prover Time taken = 0.002669
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001783
Prover Time taken = 0.001756
Prover Time taken = 0.001904
Prover Time taken = 0.001758
Verifying Q0_stable_t1_s2: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002489
Prover Time taken = 0.002531
Prover Time taken = 0.00633
Prover Time taken = 0.002256
Verifying t2_transition_s3: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002064
Prover Time taken = 0.00217
Prover Time taken = 0.001824
Prover Time taken = 0.001796
Verifying Q2_stable_t1_s3: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003819
Prover Time taken = 0.002784
Prover Time taken = 0.002819
Prover Time taken = 0.002743
Verifying Q2_stable_t1_s2: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002157
Prover Time taken = 0.002698
Prover Time taken = 0.002448
Prover Time taken = 0.002707
Verifying P1_stable_t2_s3: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002535
Prover Time taken = 0.002095
Prover Time taken = 0.002102
Prover Time taken = 0.002576
Verifying Q1_stable_t1_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002124
Prover Time taken = 0.001912
Prover Time taken = 0.002186
Prover Time taken = 0.001883
Verifying Q1_stable_t1_s3: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002846
Prover Time taken = 0.003184
Prover Time taken = 0.002585
Prover Time taken = 0.002876
Verifying P2_stable_t2_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004465
Added Horn clause: 4 && 25 => 34
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0083250
Verifying Q3_stable_t1_s3: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003549
Prover Time taken = 0.004233
Prover Time taken = 0.003445
Prover Time taken = 0.003569
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001747
Prover Time taken = 0.001586
Prover Time taken = 0.001482
Prover Time taken = 0.001475
Verifying t1_transition_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001702
Prover Time taken = 0.002554
Prover Time taken = 0.002548
Prover Time taken = 0.001782
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002162
Prover Time taken = 0.002088
Prover Time taken = 0.001978
Prover Time taken = 0.002009
Verifying Q2_stable_t1_s3: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002387
Prover Time taken = 0.003415
Prover Time taken = 0.003056
Prover Time taken = 0.002985
Verifying Q1_stable_t1_s3: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.00493
Added Horn clause: 17 && 34 => 35
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_with_queue-OG.bpl
Total learner time was 00:00:00.0063230
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003312
Prover Time taken = 0.00253
Prover Time taken = 0.002167
Prover Time taken = 0.002424
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001774
Prover Time taken = 0.001784
Prover Time taken = 0.001787
Prover Time taken = 0.003801
Verifying Q1_stable_t1_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002316
Prover Time taken = 0.00192
Prover Time taken = 0.001929
Prover Time taken = 0.002171
Verifying Q1_stable_t1_s3: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002877
Prover Time taken = 0.002549
Prover Time taken = 0.002756
Prover Time taken = 0.002612
Verifying P2_stable_t2_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002503
Prover Time taken = 0.002103
Prover Time taken = 0.002201
Prover Time taken = 0.002765
Verifying pre_condition: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001174
Prover Time taken = 0.001511
Prover Time taken = 0.001406
Prover Time taken = 0.001126
Verifying pop_front: 
Prover Time taken = 0.000464
Verifying push_back: 
Prover Time taken = 0.000351
Prover time = 1.56
Number of prover queries = 407
Learner time = 0.25
Number of learner queries = 32
Total time: 6.05
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:30
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
verified

Boogie program verifier finished with 1 verified, 0 errors
