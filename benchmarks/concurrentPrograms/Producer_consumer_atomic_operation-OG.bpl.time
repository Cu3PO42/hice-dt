[TRACE] Using prover: /home/alexander/sharedData/uni/hice-dt/Boogie/Binaries/z3.exe
Parsing /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Coalescing blocks...
#parameters: 4
#parameters: 4
#parameters: 4
#parameters: 4
#parameters: 4
#parameters: 4
#parameters: 4
#parameters: 4
Generating VC of pre_condition
Generating VC of post_condition
Generating VC of t1_transition_s1
Generating VC of t1_transition_s2
Generating VC of t1_transition_s3
Generating VC of t2_transition_s1
Generating VC of t2_transition_s2
Generating VC of t2_transition_s3
Generating VC of Q0_stable_t1_s3
Generating VC of Q1_stable_t1_s3
Generating VC of Q2_stable_t1_s3
Generating VC of Q3_stable_t1_s3
Generating VC of Q0_stable_t1_s2
Generating VC of Q1_stable_t1_s2
Generating VC of Q2_stable_t1_s2
Generating VC of Q3_stable_t1_s2
Generating VC of P0_stable_t2_s3
Generating VC of P1_stable_t2_s3
Generating VC of P2_stable_t2_s3
Generating VC of P3_stable_t2_s3
Verifying post_condition: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  true
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  true
}
Added Horn clause: 0 && 1 => 
Prover Time taken = 0.107803
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0081940
Verifying post_condition: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.00496
Prover Time taken = 0.002679
Prover Time taken = 0.002592
Prover Time taken = 0.00277
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.003811
Prover Time taken = 0.003601
Prover Time taken = 0.003506
Prover Time taken = 0.00364
Verifying Q3_stable_t1_s3: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004215
Prover Time taken = 0.004407
Prover Time taken = 0.003805
Prover Time taken = 0.003521
Verifying Q3_stable_t1_s2: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.005043
Prover Time taken = 0.004518
Prover Time taken = 0.004576
Prover Time taken = 0.005519
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004692
Prover Time taken = 0.0039
Prover Time taken = 0.003766
Prover Time taken = 0.005016
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.003081
Prover Time taken = 0.00352
Prover Time taken = 0.003476
Prover Time taken = 0.004263
Verifying t1_transition_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.006235
Prover Time taken = 0.003546
Prover Time taken = 0.003248
Prover Time taken = 0.004788
Verifying P0_stable_t2_s3: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004167
Prover Time taken = 0.005362
Prover Time taken = 0.005401
Prover Time taken = 0.005299
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004842
Prover Time taken = 0.005917
Prover Time taken = 0.004935
Prover Time taken = 0.004393
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004129
Prover Time taken = 0.006822
Prover Time taken = 0.005076
Prover Time taken = 0.005626
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.005365
Prover Time taken = 0.004786
Prover Time taken = 0.004172
Prover Time taken = 0.006152
Verifying Q0_stable_t1_s2: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.007114
Prover Time taken = 0.005056
Prover Time taken = 0.004911
Prover Time taken = 0.0051
Verifying t2_transition_s3: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.003851
Prover Time taken = 0.004884
Prover Time taken = 0.002904
Prover Time taken = 0.003259
Verifying Q2_stable_t1_s3: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004894
Prover Time taken = 0.004895
Prover Time taken = 0.004721
Prover Time taken = 0.004248
Verifying Q2_stable_t1_s2: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.00549
Prover Time taken = 0.006288
Prover Time taken = 0.004582
Prover Time taken = 0.006042
Verifying P1_stable_t2_s3: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004803
Prover Time taken = 0.005295
Prover Time taken = 0.008087
Prover Time taken = 0.005611
Verifying Q1_stable_t1_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.005834
Prover Time taken = 0.004629
Prover Time taken = 0.004468
Prover Time taken = 0.00533
Verifying Q1_stable_t1_s3: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.006607
Prover Time taken = 0.006002
Prover Time taken = 0.006791
Prover Time taken = 0.00628
Verifying P2_stable_t2_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004936
Prover Time taken = 0.004477
Prover Time taken = 0.009233
Prover Time taken = 0.0057
Verifying pre_condition: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Added: P0:0,0: positive
Prover Time taken = 0.006795
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0080850
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.009154
Added Horn clause: 2 => 3
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0093830
Verifying Q3_stable_t1_s2: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004687
Prover Time taken = 0.005162
Prover Time taken = 0.005556
Prover Time taken = 0.00641
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.005014
Prover Time taken = 0.004416
Prover Time taken = 0.004948
Prover Time taken = 0.006608
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.008268
Added Horn clause: 3 => 4
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0104450
Verifying Q3_stable_t1_s3: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.007155
Prover Time taken = 0.006153
Prover Time taken = 0.007944
Prover Time taken = 0.004604
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003224
Prover Time taken = 0.002686
Prover Time taken = 0.003817
Prover Time taken = 0.002767
Verifying t1_transition_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.005495
Added Horn clause: 4 => 5
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0106520
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.006682
Added Horn clause: 5 => 6
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0102900
Verifying Q3_stable_t1_s2: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.007616
Prover Time taken = 0.004052
Prover Time taken = 0.004185
Prover Time taken = 0.004076
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003709
Prover Time taken = 0.003522
Prover Time taken = 0.003756
Prover Time taken = 0.003943
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004028
Added Horn clause: 6 => 7
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0081250
Verifying Q3_stable_t1_s3: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.00462
Prover Time taken = 0.003813
Prover Time taken = 0.004093
Prover Time taken = 0.003799
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003404
Prover Time taken = 0.003086
Prover Time taken = 0.004572
Prover Time taken = 0.001942
Verifying t1_transition_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003704
Added Horn clause: 7 => 8
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0080230
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.009035
Added Horn clause: 8 => 9
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0088140
Verifying Q3_stable_t1_s2: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.005489
Prover Time taken = 0.004923
Prover Time taken = 0.004127
Prover Time taken = 0.005325
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.00488
Prover Time taken = 0.004238
Prover Time taken = 0.007652
Prover Time taken = 0.005018
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002567
Prover Time taken = 0.002698
Prover Time taken = 0.002359
Prover Time taken = 0.002264
Verifying t1_transition_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004894
Added Horn clause: 4 => 10
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0090180
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.006453
Added Horn clause: 10 => 11
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0130420
Verifying post_condition: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.003087
Prover Time taken = 0.003136
Prover Time taken = 0.010048
Prover Time taken = 0.012769
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.006346
Prover Time taken = 0.004838
Prover Time taken = 0.004219
Prover Time taken = 0.004276
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.005402
Added Horn clause: 12 => 13
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0083730
Verifying post_condition: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.003857
Prover Time taken = 0.002787
Prover Time taken = 0.003734
Prover Time taken = 0.003435
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.005112
Prover Time taken = 0.004737
Prover Time taken = 0.004579
Prover Time taken = 0.003206
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003281
Prover Time taken = 0.005031
Added Horn clause: 14 => 15
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0115130
Verifying post_condition: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.002862
Prover Time taken = 0.003139
Prover Time taken = 0.004032
Prover Time taken = 0.00333
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004537
Prover Time taken = 0.004613
Prover Time taken = 0.004988
Prover Time taken = 0.003402
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002391
Prover Time taken = 0.002189
Prover Time taken = 0.002334
Prover Time taken = 0.002286
Verifying t1_transition_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002204
Prover Time taken = 0.001921
Prover Time taken = 0.002255
Prover Time taken = 0.002491
Verifying P0_stable_t2_s3: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.002984
Prover Time taken = 0.002734
Prover Time taken = 0.002773
Prover Time taken = 0.002976
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004012
Prover Time taken = 0.004045
Prover Time taken = 0.003925
Prover Time taken = 0.004469
Verifying Q0_stable_t1_s2: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004004
Prover Time taken = 0.004017
Prover Time taken = 0.003995
Prover Time taken = 0.003843
Verifying Q2_stable_t1_s3: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.00445
Prover Time taken = 0.004909
Prover Time taken = 0.004806
Prover Time taken = 0.004323
Verifying Q2_stable_t1_s2: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003637
Prover Time taken = 0.004693
Prover Time taken = 0.003784
Prover Time taken = 0.004978
Verifying P1_stable_t2_s3: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.002744
Prover Time taken = 0.003406
Prover Time taken = 0.002866
Prover Time taken = 0.003115
Verifying Q1_stable_t1_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003807
Prover Time taken = 0.003585
Prover Time taken = 0.003536
Prover Time taken = 0.003692
Verifying Q1_stable_t1_s3: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003682
Prover Time taken = 0.005003
Prover Time taken = 0.004239
Prover Time taken = 0.003696
Verifying P2_stable_t2_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.003039
Prover Time taken = 0.003898
Prover Time taken = 0.002775
Prover Time taken = 0.003489
Verifying pre_condition: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Added: Q0:0,0: positive
Prover Time taken = 0.004172
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0070190
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003115
Prover Time taken = 0.002903
Prover Time taken = 0.003766
Prover Time taken = 0.003006
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.007868
Added Horn clause: 16 => 17
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0066500
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.005043
Prover Time taken = 0.003896
Prover Time taken = 0.003704
Prover Time taken = 0.003471
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004808
Prover Time taken = 0.00508
Prover Time taken = 0.0047
Prover Time taken = 0.005769
Verifying Q0_stable_t1_s2: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.005438
Added Horn clause: 16 && 3 => 18
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0111640
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004512
Added Horn clause: 18 && 4 => 19
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0066550
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002729
Prover Time taken = 0.002358
Prover Time taken = 0.003459
Prover Time taken = 0.00279
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && producer_finished + queue_size <= 1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.00516
Added Horn clause: 19 => 20
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0070910
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.005124
Added Horn clause: 18 => 21
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0060550
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004014
Prover Time taken = 0.003065
Prover Time taken = 0.002935
Prover Time taken = 0.002671
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.004261
Added Horn clause: 21 => 22
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0076380
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002727
Prover Time taken = 0.0025
Prover Time taken = 0.002456
Prover Time taken = 0.002381
Verifying P0_stable_t2_s3: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.00298
Prover Time taken = 0.00405
Prover Time taken = 0.002303
Prover Time taken = 0.002213
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004887
Added Horn clause: 20 => 23
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0065630
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004727
Added Horn clause: 11 && 23 => 24
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0060580
Verifying post_condition: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.00299
Prover Time taken = 0.002802
Prover Time taken = 0.002952
Prover Time taken = 0.003067
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002249
Prover Time taken = 0.001921
Prover Time taken = 0.002063
Prover Time taken = 0.001949
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002096
Prover Time taken = 0.001765
Prover Time taken = 0.001737
Prover Time taken = 0.001774
Verifying P0_stable_t2_s3: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003856
Added Horn clause: 10 && 23 => 25
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0060890
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002159
Prover Time taken = 0.001799
Prover Time taken = 0.001715
Prover Time taken = 0.002369
Verifying t1_transition_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002238
Prover Time taken = 0.001899
Prover Time taken = 0.002222
Prover Time taken = 0.002229
Verifying P0_stable_t2_s3: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002501
Prover Time taken = 0.001805
Prover Time taken = 0.001745
Prover Time taken = 0.00177
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001985
Prover Time taken = 0.002538
Prover Time taken = 0.002497
Prover Time taken = 0.002311
Verifying Q0_stable_t1_s2: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.00476
Added Horn clause: 18 && 6 => 26
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0049650
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002664
Prover Time taken = 0.00251
Prover Time taken = 0.002563
Prover Time taken = 0.002679
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004423
Added Horn clause: 27 => 28
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0076200
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004402
Added Horn clause: 26 => 29
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0073690
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.00302
Prover Time taken = 0.002716
Prover Time taken = 0.002633
Prover Time taken = 0.002495
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003865
Added Horn clause: 28 => 30
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0057830
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002214
Prover Time taken = 0.001935
Prover Time taken = 0.002003
Prover Time taken = 0.002
Verifying P0_stable_t2_s3: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002651
Prover Time taken = 0.002153
Prover Time taken = 0.00225
Prover Time taken = 0.002813
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.006788
Added Horn clause: 29 => 31
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0079720
Verifying P3_stable_t2_s3: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002458
Prover Time taken = 0.003244
Prover Time taken = 0.002909
Prover Time taken = 0.001982
Verifying P0_stable_t2_s3: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001743
Prover Time taken = 0.002341
Prover Time taken = 0.001703
Prover Time taken = 0.001781
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001764
Prover Time taken = 0.00178
Prover Time taken = 0.001586
Prover Time taken = 0.001588
Verifying Q0_stable_t1_s2: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001988
Prover Time taken = 0.001998
Prover Time taken = 0.001852
Prover Time taken = 0.001712
Verifying t2_transition_s3: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003298
Added Horn clause: 23 => 32
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0086840
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.00286
Prover Time taken = 0.002572
Prover Time taken = 0.002565
Prover Time taken = 0.002584
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && producer_finished <= -1 && producer_finished <= -1 && -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && queue_size <= -1 && queue_size <= -1 && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && 0 < queue_size && queue_size <= 1 && queue_size <= 1 && 0 < queue_size && -2 < producer_finished + queue_size && producer_finished + queue_size <= -1 && producer_finished + queue_size <= -1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished + queue_size <= 0 && producer_finished + queue_size <= 0 && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= -1 && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 0 && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.008076
Added Horn clause: 32 => 33
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0068520
Verifying post_condition: 
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
Prover Time taken = 0.001948
Prover Time taken = 0.002813
Prover Time taken = 0.002037
Prover Time taken = 0.001808
Verifying Q3_stable_t1_s3: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002852
Prover Time taken = 0.003526
Prover Time taken = 0.002804
Prover Time taken = 0.002879
Verifying Q3_stable_t1_s2: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003664
Prover Time taken = 0.003326
Prover Time taken = 0.003399
Prover Time taken = 0.003219
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003166
Prover Time taken = 0.002082
Prover Time taken = 0.002967
Prover Time taken = 0.002035
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001757
Prover Time taken = 0.001779
Prover Time taken = 0.002083
Prover Time taken = 0.001679
Verifying Q0_stable_t1_s2: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002529
Prover Time taken = 0.001585
Prover Time taken = 0.00204
Prover Time taken = 0.003397
Verifying t2_transition_s3: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001806
Prover Time taken = 0.001486
Prover Time taken = 0.001286
Prover Time taken = 0.001714
Verifying Q2_stable_t1_s3: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002319
Prover Time taken = 0.002288
Prover Time taken = 0.002121
Prover Time taken = 0.002155
Verifying Q2_stable_t1_s2: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002176
Prover Time taken = 0.001883
Prover Time taken = 0.002053
Prover Time taken = 0.002082
Verifying P1_stable_t2_s3: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001876
Prover Time taken = 0.002214
Prover Time taken = 0.001865
Prover Time taken = 0.002698
Verifying Q1_stable_t1_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001833
Prover Time taken = 0.00242
Prover Time taken = 0.001589
Prover Time taken = 0.002247
Verifying Q1_stable_t1_s3: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002205
Prover Time taken = 0.003433
Prover Time taken = 0.002277
Prover Time taken = 0.002345
Verifying P2_stable_t2_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= -1 && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003761
Added Horn clause: 4 && 22 => 34
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0055560
Verifying Q3_stable_t1_s3: 
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.004863
Prover Time taken = 0.002489
Prover Time taken = 0.002801
Prover Time taken = 0.002536
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001601
Prover Time taken = 0.001628
Prover Time taken = 0.001451
Prover Time taken = 0.001807
Verifying t1_transition_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002425
Prover Time taken = 0.001748
Prover Time taken = 0.001652
Prover Time taken = 0.001785
Verifying Q0_stable_t1_s3: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002885
Prover Time taken = 0.002591
Prover Time taken = 0.003092
Prover Time taken = 0.00203
Verifying Q2_stable_t1_s3: 
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002203
Prover Time taken = 0.002084
Prover Time taken = 0.002209
Prover Time taken = 0.00205
Verifying Q1_stable_t1_s3: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003589
Added Horn clause: 17 && 34 => 35
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/Producer_consumer_atomic_operation-OG.bpl
Total learner time was 00:00:00.0053320
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002399
Prover Time taken = 0.00267
Prover Time taken = 0.003129
Prover Time taken = 0.002293
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001605
Prover Time taken = 0.001668
Prover Time taken = 0.001524
Prover Time taken = 0.001528
Verifying Q1_stable_t1_s2: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.003669
Prover Time taken = 0.001917
Prover Time taken = 0.001719
Prover Time taken = 0.001758
Verifying Q1_stable_t1_s3: 
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001894
Prover Time taken = 0.002462
Prover Time taken = 0.002074
Prover Time taken = 0.001851
Verifying P2_stable_t2_s3: 
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
Prover Time taken = 0.002489
Prover Time taken = 0.002222
Prover Time taken = 0.001881
Prover Time taken = 0.002654
Verifying pre_condition: 
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
Prover Time taken = 0.001334
Prover Time taken = 0.001009
Prover Time taken = 0.002001
Prover Time taken = 0.001252
Prover time = 1.55
Number of prover queries = 405
Learner time = 0.26
Number of learner queries = 32
Total time: 6.10
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:30
function {:existential true} {:inline} P0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 0 && producer_finished <= 0 && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} P3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q0(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q1(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q2(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && producer_finished <= 1 && -2 < queue_size && -1 < queue_size && 0 < queue_size && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished - queue_size <= 0 && producer_finished - queue_size <= 1
}
function {:existential true} {:inline} Q3(producer_finished: int, queue_size: int) : bool
{
  -2 < producer_finished && -1 < producer_finished && 0 < producer_finished && producer_finished <= 1 && producer_finished <= 1 && 0 < producer_finished && -2 < queue_size && -1 < queue_size && queue_size <= 0 && queue_size <= 0 && -1 < queue_size && queue_size <= 1 && -2 < producer_finished + queue_size && -1 < producer_finished + queue_size && 0 < producer_finished + queue_size && producer_finished + queue_size <= 1 && producer_finished + queue_size <= 1 && 0 < producer_finished + queue_size && -2 < producer_finished - queue_size && -1 < producer_finished - queue_size && 0 < producer_finished - queue_size && producer_finished - queue_size <= 1 && producer_finished - queue_size <= 1 && 0 < producer_finished - queue_size
}
verified

Boogie program verifier finished with 1 verified, 0 errors
