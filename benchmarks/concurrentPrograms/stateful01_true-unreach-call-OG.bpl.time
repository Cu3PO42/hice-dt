[TRACE] Using prover: /home/alexander/sharedData/uni/hice-dt/Boogie/Binaries/z3.exe
Parsing /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Coalescing blocks...
#parameters: 4
#parameters: 4
#parameters: 4
#parameters: 4
#parameters: 4
#parameters: 4
Generating VC of pre_condition
Generating VC of post_condition
Generating VC of t1_transition_s1
Generating VC of t1_transition_s2
Generating VC of t2_transition_s1
Generating VC of t2_transition_s2
Generating VC of P0_Stable_t2_s1
Generating VC of P1_Stable_t2_s1
Generating VC of P2_Stable_t2_s1
Generating VC of P0_Stable_t2_s2
Generating VC of P1_Stable_t2_s2
Generating VC of P2_Stable_t2_s2
Generating VC of Q0_Stable_t1_s1
Generating VC of Q1_Stable_t1_s1
Generating VC of Q2_Stable_t1_s1
Generating VC of Q0_Stable_t1_s2
Generating VC of Q1_Stable_t1_s2
Generating VC of Q2_Stable_t1_s2
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  true
}
Added Horn clause: 0 && 1 => 
Prover Time taken = 0.120378
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0070840
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.005427
Prover Time taken = 0.002118
Prover Time taken = 0.006251
Prover Time taken = 0.002575
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.003406
Prover Time taken = 0.00315
Prover Time taken = 0.004128
Prover Time taken = 0.003308
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.004931
Prover Time taken = 0.004648
Prover Time taken = 0.004353
Prover Time taken = 0.004486
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.003531
Prover Time taken = 0.004546
Prover Time taken = 0.005646
Prover Time taken = 0.005947
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.003634
Prover Time taken = 0.004155
Prover Time taken = 0.003906
Prover Time taken = 0.004385
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.00265
Prover Time taken = 0.002715
Prover Time taken = 0.002315
Prover Time taken = 0.003991
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.003042
Prover Time taken = 0.002371
Prover Time taken = 0.002662
Prover Time taken = 0.003102
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.003861
Prover Time taken = 0.006506
Prover Time taken = 0.003218
Prover Time taken = 0.00295
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.005574
Prover Time taken = 0.004458
Prover Time taken = 0.005285
Prover Time taken = 0.004013
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.004465
Prover Time taken = 0.003925
Prover Time taken = 0.00452
Prover Time taken = 0.006013
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.00399
Prover Time taken = 0.003749
Prover Time taken = 0.005813
Prover Time taken = 0.003638
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.002874
Prover Time taken = 0.002821
Prover Time taken = 0.002718
Prover Time taken = 0.002834
Verifying P0_Stable_t2_s2: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.004085
Prover Time taken = 0.00378
Prover Time taken = 0.004682
Prover Time taken = 0.004789
Verifying P0_Stable_t2_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.004084
Prover Time taken = 0.003856
Prover Time taken = 0.00482
Prover Time taken = 0.005431
Verifying Q0_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.00435
Prover Time taken = 0.004587
Prover Time taken = 0.004973
Prover Time taken = 0.006179
Verifying Q1_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.005123
Prover Time taken = 0.004689
Prover Time taken = 0.004807
Prover Time taken = 0.004792
Verifying Q1_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.003837
Prover Time taken = 0.004466
Prover Time taken = 0.003833
Prover Time taken = 0.005647
Verifying pre_condition: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Added: P0:0,2: positive
Prover Time taken = 0.007602
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0097810
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.004344
Prover Time taken = 0.005051
Prover Time taken = 0.003341
Prover Time taken = 0.005521
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.005556
Added Horn clause: 3 => 4
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0080270
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.004415
Prover Time taken = 0.007086
Prover Time taken = 0.004171
Prover Time taken = 0.004026
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && data1 - data2 <= 1
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.006129
Added Horn clause: 4 => 5
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0083480
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.003163
Prover Time taken = 0.002785
Prover Time taken = 0.002653
Prover Time taken = 0.003052
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.003298
Prover Time taken = 0.003036
Prover Time taken = 0.003727
Prover Time taken = 0.004818
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.003985
Prover Time taken = 0.003493
Prover Time taken = 0.003462
Prover Time taken = 0.006608
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && data1 - data2 <= 1
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
Prover Time taken = 0.002943
Prover Time taken = 0.004322
Prover Time taken = 0.002552
Prover Time taken = 0.002699
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && data1 - data2 <= 1
}
Prover Time taken = 0.004567
Added Horn clause: 2 => 6
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0071820
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.005195
Prover Time taken = 0.003779
Prover Time taken = 0.005606
Prover Time taken = 0.004185
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
Prover Time taken = 0.002436
Prover Time taken = 0.003779
Added Horn clause: 6 => 7
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0075790
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.002553
Prover Time taken = 0.002226
Prover Time taken = 0.002391
Prover Time taken = 0.005249
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.002973
Prover Time taken = 0.002918
Prover Time taken = 0.003127
Prover Time taken = 0.002821
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.003862
Prover Time taken = 0.003854
Prover Time taken = 0.0031
Prover Time taken = 0.002802
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
Prover Time taken = 0.002252
Prover Time taken = 0.002309
Prover Time taken = 0.002147
Prover Time taken = 0.00193
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
Prover Time taken = 0.001933
Prover Time taken = 0.003689
Added Horn clause: 8 => 9
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0074510
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.004714
Prover Time taken = 0.003841
Prover Time taken = 0.00738
Prover Time taken = 0.004384
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
Prover Time taken = 0.002737
Prover Time taken = 0.003911
Prover Time taken = 0.002518
Prover Time taken = 0.002448
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
Prover Time taken = 0.001939
Prover Time taken = 0.002109
Prover Time taken = 0.002599
Prover Time taken = 0.0019
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.002667
Prover Time taken = 0.003626
Prover Time taken = 0.003718
Prover Time taken = 0.002554
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.002639
Prover Time taken = 0.00284
Prover Time taken = 0.002814
Prover Time taken = 0.002551
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.003463
Prover Time taken = 0.003285
Prover Time taken = 0.003985
Prover Time taken = 0.003267
Verifying P0_Stable_t2_s2: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.002763
Prover Time taken = 0.002582
Prover Time taken = 0.002931
Prover Time taken = 0.002542
Verifying P0_Stable_t2_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.002886
Prover Time taken = 0.00251
Prover Time taken = 0.002414
Prover Time taken = 0.00268
Verifying Q0_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.003137
Prover Time taken = 0.003446
Prover Time taken = 0.003443
Prover Time taken = 0.003131
Verifying Q1_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.00389
Prover Time taken = 0.003294
Prover Time taken = 0.003834
Prover Time taken = 0.003092
Verifying Q1_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.003271
Prover Time taken = 0.004225
Prover Time taken = 0.003118
Prover Time taken = 0.003982
Verifying pre_condition: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Added: Q0:0,2: positive
Prover Time taken = 0.004135
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0059170
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
Prover Time taken = 0.002334
Prover Time taken = 0.002533
Prover Time taken = 0.002167
Prover Time taken = 0.00218
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
Prover Time taken = 0.002086
Prover Time taken = 0.002205
Prover Time taken = 0.00217
Prover Time taken = 0.001991
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
Prover Time taken = 0.002204
Prover Time taken = 0.003999
Prover Time taken = 0.003208
Prover Time taken = 0.002305
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.004012
Added Horn clause: 11 => 12
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0070100
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.002468
Prover Time taken = 0.003012
Prover Time taken = 0.002174
Prover Time taken = 0.002702
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && data1 <= -1 && data1 <= -1 && -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && -1 < data2 && data2 <= 0 && data2 <= 0 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && data1 + data2 <= -1 && data1 + data2 <= -1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 + data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && data1 - data2 <= -1 && data1 - data2 <= -1 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 0 && data1 - data2 <= 0 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.004659
Added Horn clause: 12 => 13
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0073420
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && data2 <= 0 && data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.002264
Prover Time taken = 0.001944
Prover Time taken = 0.00201
Prover Time taken = 0.001998
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && data2 <= 0 && data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.003363
Prover Time taken = 0.002846
Prover Time taken = 0.00348
Prover Time taken = 0.00305
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && data2 <= 0 && data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.002947
Prover Time taken = 0.002902
Prover Time taken = 0.002701
Prover Time taken = 0.002757
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && data2 <= 0 && data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.002724
Prover Time taken = 0.002381
Prover Time taken = 0.002268
Prover Time taken = 0.004561
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.002591
Prover Time taken = 0.00252
Prover Time taken = 0.002956
Prover Time taken = 0.002902
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && data2 <= 1 && data2 <= 1 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data1 - data2 <= 1 && 0 < data1 - data2
}
Prover Time taken = 0.00478
Added Horn clause: 10 => 14
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0066550
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 1
}
Prover Time taken = 0.002145
Prover Time taken = 0.001894
Prover Time taken = 0.002525
Prover Time taken = 0.002508
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && data2 <= -1 && data2 <= -1 && -2 < data2 && data2 <= 0 && data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 + data2 <= 1 && data1 + data2 <= 1 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.003769
Added Horn clause: 14 => 15
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0053050
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && data2 <= 0 && data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.001958
Prover Time taken = 0.001903
Prover Time taken = 0.00225
Prover Time taken = 0.002203
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && data2 <= 0 && data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.002129
Prover Time taken = 0.002043
Prover Time taken = 0.002041
Prover Time taken = 0.001899
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && data2 <= 0 && data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.001981
Prover Time taken = 0.001854
Prover Time taken = 0.001785
Prover Time taken = 0.001901
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && data2 <= 0 && data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.002905
Added Horn clause: 16 => 17
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0063420
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && data2 <= 0 && data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.001619
Prover Time taken = 0.001469
Prover Time taken = 0.001497
Prover Time taken = 0.001426
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && data2 <= 0 && data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.001899
Prover Time taken = 0.00181
Prover Time taken = 0.002908
Prover Time taken = 0.003449
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && data2 <= 0 && data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.002227
Prover Time taken = 0.002541
Prover Time taken = 0.002908
Prover Time taken = 0.002213
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && data2 <= 0 && data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.002032
Prover Time taken = 0.00354
Added Horn clause: 18 => 19
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0049240
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.001509
Prover Time taken = 0.001328
Prover Time taken = 0.001876
Prover Time taken = 0.001256
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.001901
Prover Time taken = 0.001792
Prover Time taken = 0.001774
Prover Time taken = 0.001888
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.001944
Prover Time taken = 0.002247
Prover Time taken = 0.002239
Prover Time taken = 0.002254
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.002097
Prover Time taken = 0.002122
Prover Time taken = 0.001869
Prover Time taken = 0.001831
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && data1 - data2 <= 1
}
Prover Time taken = 0.004355
Added Horn clause: 4 && 16 => 20
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0058420
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -2 < data1 + data2 && -1 < data1 + data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2 && 0 < data1 - data2
}
Prover Time taken = 0.003272
Added Horn clause: 21 && 22 => 23
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0071410
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2
}
Prover Time taken = 0.001515
Prover Time taken = 0.001487
Prover Time taken = 0.001357
Prover Time taken = 0.001286
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && data1 <= 0 && data1 <= 0 && -1 < data1 && data1 <= 1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2
}
Prover Time taken = 0.001956
Prover Time taken = 0.001637
Prover Time taken = 0.001632
Prover Time taken = 0.002026
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -2 < data1 + data2 && -1 < data1 + data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && -2 < data1 - data2 && -1 < data1 - data2
}
Prover Time taken = 0.004357
Added Horn clause: 4 && 23 => 24
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0050660
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && data1 <= 1 && data1 <= 1 && 0 < data1 && -2 < data2 && -1 < data2 && 0 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && data1 - data2 <= -1 && data1 - data2 <= 0 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  -2 < data1 && -1 < data1 && 0 < data1 && -2 < data2 && -2 < data1 + data2 && -1 < data1 + data2 && -2 < data1 - data2
}
Added Horn clause: 5 && 24 => 
Prover Time taken = 0.003533
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0063750
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 - data2
}
Added Horn clause: 25 && 15 => 
Prover Time taken = 0.003991
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0080130
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  0 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 - data2
}
Prover Time taken = 0.000895
Added Horn clause: 26 && 27 => 
Prover Time taken = 0.00271
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0075160
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 - data2 <= -1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 - data2
}
Prover Time taken = 0.000959
Prover Time taken = 0.000709
Prover Time taken = 0.000616
Prover Time taken = 0.000612
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 - data2
}
Prover Time taken = 0.001274
Prover Time taken = 0.00086
Prover Time taken = 0.000804
Prover Time taken = 0.001116
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 - data2
}
Prover Time taken = 0.002788
Added Horn clause: 28 && 29 => 30
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0075760
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 - data2 <= -1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 - data2 && 0 < data1
}
Prover Time taken = 0.000952
Prover Time taken = 0.001158
Prover Time taken = 0.000997
Prover Time taken = 0.000739
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 - data2 && 0 < data1
}
Prover Time taken = 0.00111
Prover Time taken = 0.000946
Prover Time taken = 0.000964
Prover Time taken = 0.000966
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 - data2 && 0 < data1
}
Prover Time taken = 0.003153
Added Horn clause: 20 && 17 => 22
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0078530
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 - data2 <= -1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.000808
Added Horn clause: 31 && 32 => 
Prover Time taken = 0.002024
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0081480
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  0 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && 2 < data1 && 2 < data2)
}
Prover Time taken = 0.00102
Added Horn clause: 33 && 34 => 
Prover Time taken = 0.003198
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0065560
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  0 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && 2 < data1 && 0 < data1 - data2 && 2 < data2)
}
Prover Time taken = 0.001098
Added Horn clause: 35 && 36 => 
Prover Time taken = 0.003018
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0077830
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  0 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && 2 < data1 && 1 < data1 - data2 && 2 < data2)
}
Prover Time taken = 0.001016
Added Horn clause: 37 && 19 => 
Prover Time taken = 0.002965
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0078630
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  0 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.00106
Prover Time taken = 0.000837
Prover Time taken = 0.000699
Prover Time taken = 0.000707
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.00096
Prover Time taken = 0.002494
Added Horn clause: 38 && 15 => 39
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0078510
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  0 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.000931
Prover Time taken = 0.001076
Prover Time taken = 0.000785
Prover Time taken = 0.000921
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001029
Prover Time taken = 0.000856
Prover Time taken = 0.000858
Prover Time taken = 0.000856
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.002825
Added Horn clause: 40 && 15 => 41
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0065640
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  0 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 1
}
Added Horn clause: 42 && 41 => 
Prover Time taken = 0.002656
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0080380
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.001116
Prover Time taken = 0.000794
Prover Time taken = 0.001243
Prover Time taken = 0.000918
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.001124
Prover Time taken = 0.000817
Prover Time taken = 0.000836
Prover Time taken = 0.000863
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.000734
Prover Time taken = 0.000678
Prover Time taken = 0.000635
Prover Time taken = 0.000923
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 <= 1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.002101
Added Horn clause: 43 && 44 => 45
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0067840
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 1
}
Prover Time taken = 0.00099
Prover Time taken = 0.000989
Prover Time taken = 0.000729
Prover Time taken = 0.000895
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 1
}
Prover Time taken = 0.001233
Prover Time taken = 0.000928
Prover Time taken = 0.0008
Prover Time taken = 0.000833
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 1
}
Prover Time taken = 0.002158
Added Horn clause: 46 && 41 => 47
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0068130
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 1) || (1 < data1 && 1 < data2 && data1 <= 2 && data2 <= 2)
}
Added Horn clause: 48 && 47 => 
Prover Time taken = 0.002482
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0083780
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 - data2 <= -1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 - data2 <= 0 && data2 <= 2) || (1 < data1 && 0 < data1 - data2)
}
Prover Time taken = 0.001511
Prover Time taken = 0.001221
Prover Time taken = 0.001104
Prover Time taken = 0.000936
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 - data2 <= 0 && data2 <= 2) || (1 < data1 && 0 < data1 - data2)
}
Prover Time taken = 0.001259
Prover Time taken = 0.001342
Prover Time taken = 0.001691
Prover Time taken = 0.001156
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 - data2 <= 0 && data2 <= 2) || (1 < data1 && 0 < data1 - data2)
}
Prover Time taken = 0.001486
Prover Time taken = 0.002557
Added Horn clause: 49 && 47 => 50
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0104530
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 - data2 <= -1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 3
}
Prover Time taken = 0.000964
Added Horn clause: 51 && 50 => 
Prover Time taken = 0.002367
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0088680
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 <= 1 || (1 < data1 && data2 <= -2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Added Horn clause: 45 && 52 => 
Prover Time taken = 0.002264
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0091580
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 <= 1 || (1 < data1 && data2 <= -2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -2 < data2
}
Prover Time taken = 0.001078
Prover Time taken = 0.00103
Prover Time taken = 0.000831
Prover Time taken = 0.000724
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -2 < data2
}
Prover Time taken = 0.002053
Prover Time taken = 0.00126
Prover Time taken = 0.001047
Prover Time taken = 0.001009
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -2 < data2
}
Prover Time taken = 0.001388
Prover Time taken = 0.001369
Prover Time taken = 0.000927
Prover Time taken = 0.001015
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 <= 1 || (1 < data1 && data2 <= -2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.002868
Added Horn clause: 53 && 10 => 48
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0085060
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 <= 1 && 0 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.000894
Prover Time taken = 0.000648
Prover Time taken = 0.000632
Prover Time taken = 0.000843
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.000848
Prover Time taken = 0.000693
Prover Time taken = 0.0008
Prover Time taken = 0.001013
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.00072
Prover Time taken = 0.000684
Prover Time taken = 0.000878
Prover Time taken = 0.000964
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 <= 1 && 0 < data1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.000902
Prover Time taken = 0.002786
Added Horn clause: 54 && 55 => 56
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0064070
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.001046
Prover Time taken = 0.000812
Prover Time taken = 0.000865
Prover Time taken = 0.001145
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.001091
Prover Time taken = 0.003494
Added Horn clause: 7 && 57 => 58
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0104570
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4) || (-1 < data1 - data2 && 2 < data1 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.00111
Added Horn clause: 58 && 59 => 
Prover Time taken = 0.002411
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0083000
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1 && data1 <= 1) || (data1 - data2 <= -1 && 0 < data1 && 1 < data1 && 2 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2) || (1 < data1 && 2 < data1 && 0 < data1 - data2)
}
Prover Time taken = 0.001192
Prover Time taken = 0.00165
Prover Time taken = 0.001194
Prover Time taken = 0.00114
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2) || (1 < data1 && 2 < data1 && 0 < data1 - data2)
}
Prover Time taken = 0.001073
Prover Time taken = 0.003028
Added Horn clause: 60 && 50 => 59
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0071370
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.000938
Prover Time taken = 0.000939
Prover Time taken = 0.00086
Prover Time taken = 0.000853
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.000833
Prover Time taken = 0.000775
Prover Time taken = 0.000767
Prover Time taken = 0.000817
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.000821
Prover Time taken = 0.001482
Prover Time taken = 0.000847
Prover Time taken = 0.000847
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= 0
}
Prover Time taken = 0.001048
Prover Time taken = 0.001119
Prover Time taken = 0.001064
Prover Time taken = 0.001977
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.001129
Prover Time taken = 0.000965
Prover Time taken = 0.000948
Prover Time taken = 0.001498
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.00102
Prover Time taken = 0.00071
Prover Time taken = 0.000768
Prover Time taken = 0.000773
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4
}
Prover Time taken = 0.002588
Added Horn clause: 61 => 62
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0069940
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -2 < data2
}
Added Horn clause: 62 && 13 => 
Prover Time taken = 0.003164
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0068800
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -1 < data2
}
Prover Time taken = 0.001155
Prover Time taken = 0.000909
Prover Time taken = 0.001342
Prover Time taken = 0.001308
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -1 < data2
}
Prover Time taken = 0.001146
Prover Time taken = 0.001303
Prover Time taken = 0.000931
Prover Time taken = 0.000898
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -1 < data2
}
Prover Time taken = 0.001305
Prover Time taken = 0.001037
Prover Time taken = 0.001248
Prover Time taken = 0.001474
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= 0 && 1 < data2
}
Prover Time taken = 0.001444
Prover Time taken = 0.001725
Prover Time taken = 0.001418
Prover Time taken = 0.00127
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data2
}
Prover Time taken = 0.002819
Added Horn clause: 5 && 63 => 64
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0098730
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4) || (-1 < data2 && -1 < data1 - data2 && data1 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -1 < data2
}
Prover Time taken = 0.00119
Prover Time taken = 0.001192
Prover Time taken = 0.001066
Prover Time taken = 0.000983
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4) || (-1 < data2 && -1 < data1 - data2 && data1 <= 1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= 0 && 1 < data2
}
Prover Time taken = 0.001606
Prover Time taken = 0.001455
Prover Time taken = 0.001305
Prover Time taken = 0.001417
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4) || (-1 < data2 && -1 < data1 - data2 && data1 <= 1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data2
}
Prover Time taken = 0.001424
Prover Time taken = 0.001578
Prover Time taken = 0.001504
Prover Time taken = 0.002909
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -1 < data2
}
Prover Time taken = 0.002151
Added Horn clause: 65 => 66
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0096440
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4) || (-1 < data2 && -1 < data1 - data2 && data1 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= -2) || (1 < data1 && -1 < data2)
}
Added Horn clause: 67 && 68 => 
Prover Time taken = 0.003218
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0090130
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4) || (-1 < data2 && -1 < data1 - data2 && data1 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 - data2 <= -2) || (1 < data1 && -1 < data2)
}
Prover Time taken = 0.001343
Added Horn clause: 69 && 70 => 
Prover Time taken = 0.00288
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0099360
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4) || (-1 < data2 && -1 < data1 - data2 && data1 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= -2 && -1 < data2) || (1 < data1 && -1 < data2)
}
Prover Time taken = 0.001389
Prover Time taken = 0.00114
Prover Time taken = 0.001044
Prover Time taken = 0.001076
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= -2 && -1 < data2) || (1 < data1 && -1 < data2)
}
Prover Time taken = 0.002954
Added Horn clause: 71 && 66 => 72
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0095620
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4) || (-1 < data2 && -1 < data1 - data2 && data1 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= -1 && -1 < data2) || (1 < data1 && -1 < data2)
}
Prover Time taken = 0.001763
Prover Time taken = 0.001602
Prover Time taken = 0.001498
Prover Time taken = 0.001511
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= -1 && -1 < data2) || (1 < data1 && -1 < data2)
}
Prover Time taken = 0.003447
Added Horn clause: 73 && 72 => 74
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0087420
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4) || (-1 < data2 && -1 < data1 - data2 && data1 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && -1 < data2) || (1 < data1 && -1 < data2)
}
Added Horn clause: 75 && 74 => 
Prover Time taken = 0.002709
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0092520
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4) || (-1 < data2 && -1 < data1 - data2 && 0 < data1 - data2 && data1 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && -1 < data2) || (1 < data1 && -1 < data2)
}
Prover Time taken = 0.001335
Prover Time taken = 0.00112
Prover Time taken = 0.001163
Prover Time taken = 0.001354
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && -1 < data2) || (1 < data1 && -1 < data2)
}
Prover Time taken = 0.002589
Added Horn clause: 76 && 74 => 22
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0094820
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -1 < data2
}
Prover Time taken = 0.00136
Prover Time taken = 0.000988
Prover Time taken = 0.001172
Prover Time taken = 0.000845
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -1 < data2
}
Prover Time taken = 0.000886
Prover Time taken = 0.001291
Prover Time taken = 0.001391
Prover Time taken = 0.001189
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -1 < data2
}
Prover Time taken = 0.000921
Prover Time taken = 0.000876
Prover Time taken = 0.000927
Prover Time taken = 0.001039
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= 0 && 1 < data2
}
Prover Time taken = 0.001651
Prover Time taken = 0.00112
Prover Time taken = 0.001581
Prover Time taken = 0.001119
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  3 < data1 + data2
}
Prover Time taken = 0.003063
Prover Time taken = 0.002605
Added Horn clause: 7 && 77 => 78
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0088160
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4) || (-1 < data2 && -1 < data1 - data2 && data1 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -1 < data2
}
Prover Time taken = 0.001196
Prover Time taken = 0.001177
Prover Time taken = 0.001375
Prover Time taken = 0.001009
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4) || (-1 < data2 && -1 < data1 - data2 && data1 <= 1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= 0 && 1 < data2
}
Prover Time taken = 0.00207
Prover Time taken = 0.001956
Prover Time taken = 0.002008
Prover Time taken = 0.00144
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4) || (-1 < data2 && -1 < data1 - data2 && data1 <= 1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  3 < data1 + data2
}
Prover Time taken = 0.001856
Prover Time taken = 0.001738
Prover Time taken = 0.001662
Prover Time taken = 0.001469
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  3 < data1 + data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -1 < data2
}
Prover Time taken = 0.000776
Prover Time taken = 0.002791
Added Horn clause: 77 => 23
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0097440
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -1 < data2
}
Prover Time taken = 0.001089
Prover Time taken = 0.000893
Prover Time taken = 0.000924
Prover Time taken = 0.000864
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= 0 && 1 < data2
}
Prover Time taken = 0.001358
Prover Time taken = 0.001896
Prover Time taken = 0.001695
Prover Time taken = 0.001655
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 - data2 <= 0
}
Prover Time taken = 0.001238
Prover Time taken = 0.00141
Prover Time taken = 0.001238
Prover Time taken = 0.001624
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 - data2 <= 0
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && -1 < data2
}
Prover Time taken = 0.000837
Prover Time taken = 0.00089
Prover Time taken = 0.000892
Prover Time taken = 0.000865
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  data2 <= -1 || (-1 < data2 && data1 - data2 <= -1 && 0 < data1 && data1 + data2 <= 4)
}
Prover Time taken = 0.002778
Added Horn clause: 46 => 48
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0104840
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  0 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0
}
Prover Time taken = 0.000842
Prover Time taken = 0.000658
Prover Time taken = 0.00068
Prover Time taken = 0.000696
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0
}
Prover Time taken = 0.001286
Prover Time taken = 0.000873
Prover Time taken = 0.00075
Prover Time taken = 0.000738
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -2 || (-2 < data1 - data2 && data1 <= 1 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0
}
Prover Time taken = 0.002995
Added Horn clause: 79 && 66 => 80
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0099470
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  0 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  0 < data1 - data2 && data2 <= 0 && 1 < data1
}
Prover Time taken = 0.001095
Prover Time taken = 0.001048
Prover Time taken = 0.000874
Prover Time taken = 0.000896
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  0 < data1 - data2 && data2 <= 0 && 1 < data1
}
Prover Time taken = 0.001989
Prover Time taken = 0.001784
Prover Time taken = 0.001724
Prover Time taken = 0.001385
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -2 || (-2 < data1 - data2 && data1 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  0 < data1 - data2 && data2 <= 0 && 1 < data1
}
Prover Time taken = 0.001767
Prover Time taken = 0.001867
Prover Time taken = 0.004137
Prover Time taken = 0.001587
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  0 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.00153
Prover Time taken = 0.001482
Prover Time taken = 0.001375
Prover Time taken = 0.001428
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  0 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 <= 2
}
Prover Time taken = 0.003271
Added Horn clause: 48 && 14 => 25
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0137390
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  0 < data1 - data2 && 1 < data1
}
Prover Time taken = 0.001909
Prover Time taken = 0.002601
Prover Time taken = 0.002076
Prover Time taken = 0.001814
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  0 < data1 - data2 && 1 < data1
}
Prover Time taken = 0.001827
Prover Time taken = 0.001492
Prover Time taken = 0.002025
Prover Time taken = 0.001932
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  0 < data1 - data2 && 1 < data1
}
Prover Time taken = 0.00133
Prover Time taken = 0.001209
Prover Time taken = 0.001231
Prover Time taken = 0.001808
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.00167
Prover Time taken = 0.003993
Added Horn clause: 5 && 81 => 82
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0193540
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 - data2 <= 1 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  0 < data1 - data2 && 1 < data1
}
Prover Time taken = 0.001719
Added Horn clause: 82 && 83 => 
Prover Time taken = 0.004185
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0156330
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 0 && 1 < data1) || (0 < data2 && 1 < data1 - data2)
}
Prover Time taken = 0.001799
Prover Time taken = 0.002175
Prover Time taken = 0.00134
Prover Time taken = 0.001974
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 0 && 1 < data1) || (0 < data2 && 1 < data1 - data2)
}
Prover Time taken = 0.002028
Prover Time taken = 0.002175
Prover Time taken = 0.001657
Prover Time taken = 0.001676
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 0 && 1 < data1) || (0 < data2 && 1 < data1 - data2)
}
Prover Time taken = 0.001819
Prover Time taken = 0.001928
Prover Time taken = 0.001348
Prover Time taken = 0.001283
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.001982
Prover Time taken = 0.005117
Added Horn clause: 58 && 84 => 37
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0107150
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1
}
Prover Time taken = 0.001817
Added Horn clause: 85 && 86 => 
Prover Time taken = 0.004543
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0155960
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1 && data1 <= 3
}
Prover Time taken = 0.001597
Added Horn clause: 87 && 39 => 
Prover Time taken = 0.003375
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0109250
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 4 < data1 + data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1
}
Prover Time taken = 0.001828
Added Horn clause: 88 && 89 => 
Prover Time taken = 0.003991
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0233860
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 4 < data1 + data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1 && data1 <= 3
}
Prover Time taken = 0.005042
Prover Time taken = 0.001928
Prover Time taken = 0.001925
Prover Time taken = 0.001936
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1 && data1 <= 3
}
Prover Time taken = 0.001972
Prover Time taken = 0.003112
Added Horn clause: 90 && 39 => 91
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0214940
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 4 < data1 + data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1 && data1 <= 4
}
Prover Time taken = 0.001373
Prover Time taken = 0.001509
Prover Time taken = 0.001597
Prover Time taken = 0.001358
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1 && data1 <= 4
}
Prover Time taken = 0.001816
Prover Time taken = 0.005087
Added Horn clause: 92 && 91 => 89
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0144750
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 0 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1
}
Prover Time taken = 0.001685
Prover Time taken = 0.001787
Prover Time taken = 0.001152
Prover Time taken = 0.001316
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1
}
Prover Time taken = 0.001435
Prover Time taken = 0.00346
Prover Time taken = 0.001995
Prover Time taken = 0.00149
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1
}
Prover Time taken = 0.001525
Prover Time taken = 0.001792
Prover Time taken = 0.001629
Prover Time taken = 0.001522
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 0 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.00229
Prover Time taken = 0.002031
Prover Time taken = 0.00214
Prover Time taken = 0.001788
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 0 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && 1 < data1
}
Prover Time taken = 0.001748
Prover Time taken = 0.003892
Added Horn clause: 93 && 94 => 95
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0174700
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1
}
Prover Time taken = 0.001409
Prover Time taken = 0.001244
Prover Time taken = 0.001268
Prover Time taken = 0.001444
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.002167
Prover Time taken = 0.001811
Prover Time taken = 0.002052
Prover Time taken = 0.002175
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && 1 < data1
}
Prover Time taken = 0.002188
Prover Time taken = 0.005023
Added Horn clause: 82 && 96 => 87
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0130620
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= 1 && 0 < data1 - data2) || (data2 <= 2 && 1 < data2 && 1 < data1 && data1 - data2 <= 0)
}
Prover Time taken = 0.00202
Prover Time taken = 0.00231
Prover Time taken = 0.001797
Prover Time taken = 0.001928
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= 1 && 0 < data1 - data2) || (data2 <= 2 && 1 < data2 && 1 < data1 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1
}
Prover Time taken = 0.002973
Added Horn clause: 97 => 98
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0129990
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data1 <= 2 && 1 < data1
}
Prover Time taken = 0.004177
Prover Time taken = 0.004593
Added Horn clause: 51 && 99 => 42
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0150270
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data1 <= 2 && 1 < data1 && -1 < data1 - data2
}
Prover Time taken = 0.002288
Prover Time taken = 0.001437
Prover Time taken = 0.001355
Prover Time taken = 0.001515
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data1 <= 2 && 1 < data1 && -1 < data1 - data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1
}
Prover Time taken = 0.001202
Prover Time taken = 0.001163
Prover Time taken = 0.001092
Prover Time taken = 0.001342
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 <= 1
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 1 < data2 && 2 < data1)
}
Prover Time taken = 0.00308
Added Horn clause: 21 => 78
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0143990
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 0 < data2 && data1 <= 2 && data2 <= 1) || (-1 < data1 - data2 && 0 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1
}
Prover Time taken = 0.002174
Prover Time taken = 0.001196
Prover Time taken = 0.001483
Prover Time taken = 0.001319
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 0 < data2 && data1 <= 2 && data2 <= 1) || (-1 < data1 - data2 && 0 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.001621
Prover Time taken = 0.001541
Prover Time taken = 0.001804
Prover Time taken = 0.002295
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 0 < data2 && data1 <= 2 && data2 <= 1) || (-1 < data1 - data2 && 0 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data1 <= 2 && 1 < data1
}
Prover Time taken = 0.004074
Added Horn clause: 42 && 12 => 62
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0115390
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && data2 <= 2 && data1 - data2 <= 1 && data1 - data2 <= 0 && data1 <= 1) || (-1 < data1 - data2 && data2 <= 2 && data1 - data2 <= 1 && 0 < data1 - data2 && 1 < data2) || (-1 < data1 - data2 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1
}
Prover Time taken = 0.001878
Prover Time taken = 0.001288
Prover Time taken = 0.002416
Prover Time taken = 0.00178
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && data2 <= 2 && data1 - data2 <= 1 && data1 - data2 <= 0 && data1 <= 1) || (-1 < data1 - data2 && data2 <= 2 && data1 - data2 <= 1 && 0 < data1 - data2 && 1 < data2) || (-1 < data1 - data2 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.003859
Added Horn clause: 100 && 101 => 43
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0149610
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && data2 <= 2 && 0 < data2 && data2 <= 1 && data1 - data2 <= 0) || (-1 < data1 - data2 && data2 <= 2 && 0 < data2 && 1 < data2 && 0 < data1 - data2) || (-1 < data1 - data2 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1
}
Prover Time taken = 0.001618
Prover Time taken = 0.001302
Prover Time taken = 0.0013
Prover Time taken = 0.001397
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && data2 <= 2 && 0 < data2 && data2 <= 1 && data1 - data2 <= 0) || (-1 < data1 - data2 && data2 <= 2 && 0 < data2 && 1 < data2 && 0 < data1 - data2) || (-1 < data1 - data2 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.002039
Prover Time taken = 0.005336
Added Horn clause: 78 && 102 => 103
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0139990
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 0 < data2 && data1 <= 2 && data1 <= 1) || (-1 < data1 - data2 && 0 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1
}
Prover Time taken = 0.001425
Prover Time taken = 0.0012
Prover Time taken = 0.001332
Prover Time taken = 0.001124
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 0 < data2 && data1 <= 2 && data1 <= 1) || (-1 < data1 - data2 && 0 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.001761
Prover Time taken = 0.003635
Prover Time taken = 0.001867
Prover Time taken = 0.001648
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 0 < data2 && data1 <= 2 && data1 <= 1) || (-1 < data1 - data2 && 0 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data1 <= 2 && 1 < data1 && -1 < data1 - data2
}
Prover Time taken = 0.001699
Prover Time taken = 0.001698
Prover Time taken = 0.002575
Prover Time taken = 0.00247
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data1 <= 2 && 1 < data1 && -1 < data1 - data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0 && 1 < data1
}
Prover Time taken = 0.001299
Prover Time taken = 0.001402
Prover Time taken = 0.001669
Prover Time taken = 0.001218
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 <= 1
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 0 < data2 && data1 <= 2 && data1 <= 1) || (-1 < data1 - data2 && 0 < data2 && 2 < data1)
}
Prover Time taken = 0.002716
Added Horn clause: 104 => 53
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0157610
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0
}
Prover Time taken = 0.001705
Prover Time taken = 0.001683
Prover Time taken = 0.001451
Prover Time taken = 0.001641
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0
}
Prover Time taken = 0.000976
Prover Time taken = 0.000809
Prover Time taken = 0.001137
Prover Time taken = 0.001123
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 0 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0
}
Prover Time taken = 0.00148
Prover Time taken = 0.002676
Prover Time taken = 0.001417
Prover Time taken = 0.001294
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.001681
Prover Time taken = 0.002071
Prover Time taken = 0.002446
Prover Time taken = 0.001885
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data1 <= 2 && 1 < data1 && -1 < data1 - data2
}
Prover Time taken = 0.001583
Prover Time taken = 0.001367
Prover Time taken = 0.001312
Prover Time taken = 0.00151
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data1 <= 2 && 1 < data1 && -1 < data1 - data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0
}
Prover Time taken = 0.001449
Prover Time taken = 0.001432
Prover Time taken = 0.001414
Prover Time taken = 0.001803
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 0 < data2
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 1 < data2 && 2 < data1)
}
Prover Time taken = 0.001865
Prover Time taken = 0.001758
Prover Time taken = 0.001798
Prover Time taken = 0.001524
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 0 < data2
}
Prover Time taken = 0.002969
Added Horn clause: 105 => 28
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0125640
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && -1 < data1 - data2) || (data1 <= 1 && 0 < data1 && 0 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0
}
Prover Time taken = 0.002745
Added Horn clause: 106 && 74 => 107
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0115590
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -2) || (data1 <= 1 && 0 < data1 && 0 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0
}
Prover Time taken = 0.00147
Prover Time taken = 0.001674
Prover Time taken = 0.001476
Prover Time taken = 0.001587
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -2) || (data1 <= 1 && 0 < data1 && 0 < data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 1 < data2 && 2 < data1)
}
Prover Time taken = 0.003411
Added Horn clause: 28 => 108
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0164880
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && -2 < data1 && 0 < data1 - data2 && data1 - data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && 0 < data2) || (1 < data1 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0
}
Added Horn clause: 109 && 110 => 
Prover Time taken = 0.003538
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0149590
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && -1 < data1 && 0 < data1 - data2 && data1 - data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && 0 < data2) || (1 < data1 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 0
}
Added Horn clause: 108 && 30 => 
Prover Time taken = 0.0033
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0150870
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && -2 < data2 && data2 <= -1) || (data1 <= 1 && 0 < data1) || (1 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && 0 < data2) || (1 < data1 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 - data2 <= 2 && 1 < data1 && data2 <= 0) || 2 < data1 - data2
}
Added Horn clause: 111 && 98 => 
Prover Time taken = 0.004069
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0161940
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && -2 < data2 && data2 <= -1) || (data1 <= 1 && 0 < data1 && -1 < data1 + data2) || (1 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && 0 < data2) || (1 < data1 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 - data2 <= 2 && 1 < data1 && data2 <= 0) || 2 < data1 - data2
}
Prover Time taken = 0.002298
Added Horn clause: 112 && 113 => 
Prover Time taken = 0.004202
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0138530
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && -2 < data2 && data2 <= -1) || (data1 <= 1 && 0 < data1 && -1 < data1 + data2) || (1 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && 0 < data2) || (1 < data1 && 1 < data2 && data2 <= 2 && 0 < data1 - data2 && data1 - data2 <= 1) || (1 < data1 && 1 < data2 && 2 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 - data2 <= 2 && 1 < data1 && data2 <= 0) || 2 < data1 - data2
}
Prover Time taken = 0.002939
Prover Time taken = 0.002084
Added Horn clause: 114 && 115 => 
Prover Time taken = 0.003871
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0176570
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && -2 < data2 && data2 <= -1) || (data1 <= 1 && 0 < data1 && -1 < data1 + data2) || (1 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && 0 < data2) || (1 < data1 && 1 < data2 && data1 - data2 <= 2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 - data2 <= 2 && 1 < data1 && data2 <= 0) || 2 < data1 - data2
}
Prover Time taken = 0.002047
Prover Time taken = 0.00152
Prover Time taken = 0.001606
Prover Time taken = 0.001711
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 - data2 <= 2 && 1 < data1 && data2 <= 0) || 2 < data1 - data2
}
Prover Time taken = 0.00156
Prover Time taken = 0.001336
Prover Time taken = 0.001173
Prover Time taken = 0.001308
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -2) || (data1 <= 1 && 0 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 - data2 <= 2 && 1 < data1 && data2 <= 0) || 2 < data1 - data2
}
Prover Time taken = 0.00336
Added Horn clause: 116 && 98 => 17
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0152920
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && -2 < data2 && data2 <= -1) || (data1 <= 1 && 0 < data1 && -1 < data1 + data2 && 1 < data2) || (1 < data1 && 1 < data2 && data1 - data2 <= 2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 - data2 <= 2 && 1 < data1 && data2 <= 0) || 2 < data1 - data2
}
Prover Time taken = 0.001863
Prover Time taken = 0.002478
Prover Time taken = 0.002253
Prover Time taken = 0.002216
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -2) || (data1 <= 1 && 0 < data1 && data1 - data2 <= -2) || (data1 <= 1 && 0 < data1 && -2 < data1 - data2 && 0 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 - data2 <= 2 && 1 < data1 && data2 <= 0) || 2 < data1 - data2
}
Prover Time taken = 0.002916
Prover Time taken = 0.003811
Added Horn clause: 117 && 118 => 29
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0157900
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && -3 < data2 && data2 <= -2) || (data1 <= 1 && 0 < data1 && data1 - data2 <= -2) || (data1 <= 1 && 0 < data1 && -2 < data1 - data2 && 0 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 - data2 <= 2 && 1 < data1 && data2 <= 0) || 2 < data1 - data2
}
Prover Time taken = 0.001847
Prover Time taken = 0.001959
Prover Time taken = 0.001707
Prover Time taken = 0.003773
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && -2 < data2 && data2 <= -1) || (data1 <= 1 && 0 < data1 && -1 < data1 + data2 && 1 < data2) || (1 < data1 && 1 < data2 && data1 - data2 <= 2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.00381
Added Horn clause: 108 && 119 => 62
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0162480
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && 0 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.001336
Prover Time taken = 0.001304
Prover Time taken = 0.001234
Prover Time taken = 0.000926
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.000977
Prover Time taken = 0.000952
Prover Time taken = 0.001142
Prover Time taken = 0.001353
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -2) || (data1 <= 1 && 0 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.001022
Prover Time taken = 0.001034
Prover Time taken = 0.00142
Prover Time taken = 0.001345
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && 0 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= -2 || (-2 < data1 && data1 <= 0 && -1 < data2)
}
Prover Time taken = 0.001972
Prover Time taken = 0.001574
Prover Time taken = 0.001434
Prover Time taken = 0.001352
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && 0 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.001222
Prover Time taken = 0.00148
Prover Time taken = 0.001201
Prover Time taken = 0.001219
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.000795
Prover Time taken = 0.00076
Prover Time taken = 0.000746
Prover Time taken = 0.000804
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -2) || (data1 <= 1 && 0 < data1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && 0 < data1)
}
Prover Time taken = 0.001086
Prover Time taken = 0.001053
Prover Time taken = 0.001354
Prover Time taken = 0.001539
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -2) || (data1 <= 1 && 0 < data1)
}
Prover Time taken = 0.003393
Added Horn clause: 120 => 49
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0122370
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 <= 1 && -1 < data1 - data2) || 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.001322
Prover Time taken = 0.001112
Prover Time taken = 0.001192
Prover Time taken = 0.001496
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 <= 1 && -1 < data1 - data2) || 1 < data2
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && 0 < data1)
}
Prover Time taken = 0.002872
Added Horn clause: 106 => 121
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0149730
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.001317
Prover Time taken = 0.001093
Prover Time taken = 0.001138
Prover Time taken = 0.001129
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= -2 || (-2 < data1 && data1 <= 0 && -1 < data2)
}
Prover Time taken = 0.004078
Added Horn clause: 121 && 11 => 42
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0135080
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= -2 || (-2 < data1 && data1 <= 0 && -1 < data2 && 1 < data2)
}
Prover Time taken = 0.001697
Prover Time taken = 0.001915
Prover Time taken = 0.002071
Prover Time taken = 0.001871
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.003119
Prover Time taken = 0.001309
Prover Time taken = 0.001504
Prover Time taken = 0.001278
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 <= 1 && -1 < data1 - data2) || 1 < data2
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1)
}
Prover Time taken = 0.001278
Prover Time taken = 0.002646
Added Horn clause: 122 => 33
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0132210
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 3
}
Prover Time taken = 0.001371
Prover Time taken = 0.001653
Prover Time taken = 0.001219
Prover Time taken = 0.00116
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 3
}
Prover Time taken = 0.00099
Prover Time taken = 0.000931
Prover Time taken = 0.00111
Prover Time taken = 0.000843
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 <= 1 && -1 < data1 - data2) || 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 3
}
Prover Time taken = 0.001206
Prover Time taken = 0.002631
Added Horn clause: 123 && 50 => 124
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0175800
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 4
}
Prover Time taken = 0.001583
Added Horn clause: 125 && 126 => 
Prover Time taken = 0.003192
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0142760
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 4 && 1 < data1 - data2
}
Prover Time taken = 0.001642
Prover Time taken = 0.001227
Added Horn clause: 127 && 128 => 
Prover Time taken = 0.003014
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0158760
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 4 && data2 <= 3) || (1 < data1 && data2 <= 4 && 3 < data2 && data1 <= 2)
}
Prover Time taken = 0.001551
Added Horn clause: 129 && 124 => 
Prover Time taken = 0.003592
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0157810
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 4 && data2 <= 0) || (1 < data1 && data2 <= 4 && 0 < data2 && 4 < data1 && data2 <= 3)
}
Prover Time taken = 0.001534
Prover Time taken = 0.001274
Prover Time taken = 0.001346
Prover Time taken = 0.00129
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 4 && data2 <= 0) || (1 < data1 && data2 <= 4 && 0 < data2 && 4 < data1 && data2 <= 3)
}
Prover Time taken = 0.001807
Prover Time taken = 0.001955
Prover Time taken = 0.00201
Prover Time taken = 0.002088
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 <= 1 && -1 < data1 - data2) || 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 4 && data2 <= 0) || (1 < data1 && data2 <= 4 && 0 < data2 && 4 < data1 && data2 <= 3)
}
Prover Time taken = 0.001536
Prover Time taken = 0.003094
Added Horn clause: 130 && 19 => 131
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0153940
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 4 && 0 < data1 - data2 && data2 <= 3) || (1 < data1 && data2 <= 4 && 0 < data1 - data2 && 3 < data2 && data1 - data2 <= 1)
}
Prover Time taken = 0.00355
Added Horn clause: 132 && 131 => 
Prover Time taken = 0.003219
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0153440
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data2 && 4 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 4
}
Prover Time taken = 0.001221
Prover Time taken = 0.00103
Prover Time taken = 0.001032
Prover Time taken = 0.001213
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 4
}
Prover Time taken = 0.001597
Prover Time taken = 0.001254
Prover Time taken = 0.001157
Prover Time taken = 0.001061
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 <= 1 && -1 < data1 - data2) || 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 4
}
Prover Time taken = 0.001397
Prover Time taken = 0.003192
Added Horn clause: 122 && 131 => 34
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0178520
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001523
Prover Time taken = 0.00132
Prover Time taken = 0.001134
Prover Time taken = 0.001079
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.000942
Prover Time taken = 0.00092
Prover Time taken = 0.000959
Prover Time taken = 0.000817
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 <= 1 && -1 < data1 - data2) || 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001149
Prover Time taken = 0.001026
Prover Time taken = 0.00095
Prover Time taken = 0.001002
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= -2 || (-2 < data1 && data1 <= 0 && -1 < data2 && 1 < data2)
}
Prover Time taken = 0.002038
Prover Time taken = 0.001807
Prover Time taken = 0.001574
Prover Time taken = 0.001516
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 <= 2
}
Prover Time taken = 0.001817
Prover Time taken = 0.003171
Added Horn clause: 31 && 133 => 51
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0146870
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001438
Prover Time taken = 0.001098
Prover Time taken = 0.001146
Prover Time taken = 0.001313
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= -2 || (-2 < data1 && data1 <= 0 && -1 < data2 && 1 < data2)
}
Prover Time taken = 0.001823
Prover Time taken = 0.001787
Prover Time taken = 0.001739
Prover Time taken = 0.00178
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 <= 2
}
Prover Time taken = 0.001609
Prover Time taken = 0.001511
Prover Time taken = 0.001696
Prover Time taken = 0.001559
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.000981
Prover Time taken = 0.002765
Added Horn clause: 133 => 50
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0181840
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data1 <= 3)
}
Prover Time taken = 0.001781
Prover Time taken = 0.001599
Prover Time taken = 0.001832
Prover Time taken = 0.001123
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data1 <= 3)
}
Prover Time taken = 0.001282
Prover Time taken = 0.002615
Added Horn clause: 134 && 135 => 136
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0141040
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data1 <= 4 && data1 <= 3) || (1 < data1 && 0 < data2 && data1 <= 4 && 3 < data1 && data1 - data2 <= -1)
}
Prover Time taken = 0.001491
Added Horn clause: 137 && 136 => 
Prover Time taken = 0.003413
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0180830
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 1 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data1 <= 4 && data1 <= 3 && data2 <= 4)
}
Prover Time taken = 0.00141
Prover Time taken = 0.001822
Prover Time taken = 0.001585
Prover Time taken = 0.001501
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data1 <= 4 && data1 <= 3 && data2 <= 4)
}
Prover Time taken = 0.00127
Prover Time taken = 0.00328
Added Horn clause: 138 && 139 => 126
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0160980
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 1 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data1 <= 4 && data1 <= 2) || (1 < data1 && 0 < data2 && data1 <= 4 && 2 < data1 && data1 <= 3 && -1 < data1 - data2)
}
Prover Time taken = 0.001908
Prover Time taken = 0.002126
Prover Time taken = 0.001709
Prover Time taken = 0.001863
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data1 <= 4 && data1 <= 2) || (1 < data1 && 0 < data2 && data1 <= 4 && 2 < data1 && data1 <= 3 && -1 < data1 - data2)
}
Prover Time taken = 0.0024
Prover Time taken = 0.004244
Added Horn clause: 140 && 141 => 142
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0205610
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 1 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data1 <= 4 && data1 <= 2) || (1 < data1 && 0 < data2 && data1 <= 4 && 2 < data1 && data1 <= 3 && -1 < data1 - data2 && data1 - data2 <= 0)
}
Prover Time taken = 0.002066
Prover Time taken = 0.001799
Prover Time taken = 0.001725
Prover Time taken = 0.001755
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data1 <= 4 && data1 <= 2) || (1 < data1 && 0 < data2 && data1 <= 4 && 2 < data1 && data1 <= 3 && -1 < data1 - data2 && data1 - data2 <= 0)
}
Prover Time taken = 0.001998
Prover Time taken = 0.004068
Added Horn clause: 143 && 59 => 36
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0156320
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 1 < data2 && 4 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data1 <= 4)
}
Prover Time taken = 0.002056
Prover Time taken = 0.001464
Prover Time taken = 0.001404
Prover Time taken = 0.002785
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data1 <= 4)
}
Prover Time taken = 0.001796
Prover Time taken = 0.003775
Added Horn clause: 144 && 136 => 34
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0152860
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 1 < data2 && 4 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data1 <= 4 && data2 <= 4)
}
Prover Time taken = 0.001734
Prover Time taken = 0.001708
Prover Time taken = 0.001535
Prover Time taken = 0.001501
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data1 <= 4 && data2 <= 4)
}
Prover Time taken = 0.001432
Prover Time taken = 0.003066
Added Horn clause: 145 && 142 => 146
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0173050
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 1 < data2 && 4 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 4 && data1 <= 4) || (1 < data1 && 0 < data2 && data2 <= 4 && 4 < data1 && data2 <= 1)
}
Prover Time taken = 0.001762
Prover Time taken = 0.002034
Prover Time taken = 0.002072
Prover Time taken = 0.001762
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 4 && data1 <= 4) || (1 < data1 && 0 < data2 && data2 <= 4 && 4 < data1 && data2 <= 1)
}
Prover Time taken = 0.002095
Prover Time taken = 0.003217
Added Horn clause: 147 && 126 => 131
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0156640
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 1 < data2 && 4 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data1 <= 2) || (1 < data1 && 0 < data2 && 2 < data1 && data2 <= 3 && data1 - data2 <= 1)
}
Prover Time taken = 0.001488
Prover Time taken = 0.001366
Prover Time taken = 0.001405
Prover Time taken = 0.001337
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data1 <= 2) || (1 < data1 && 0 < data2 && 2 < data1 && data2 <= 3 && data1 - data2 <= 1)
}
Prover Time taken = 0.001302
Prover Time taken = 0.00292
Added Horn clause: 148 && 32 => 135
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0176310
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 1 < data2 && 4 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 3 && data1 - data2 <= 1) || (1 < data1 && 0 < data2 && 3 < data2 && data2 <= 4 && data1 <= 2)
}
Prover Time taken = 0.002247
Prover Time taken = 0.001557
Prover Time taken = 0.001723
Prover Time taken = 0.002096
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 3 && data1 - data2 <= 1) || (1 < data1 && 0 < data2 && 3 < data2 && data2 <= 4 && data1 <= 2)
}
Prover Time taken = 0.001697
Prover Time taken = 0.00294
Added Horn clause: 149 && 124 => 139
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0155480
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 1 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.0015
Prover Time taken = 0.001749
Prover Time taken = 0.001376
Prover Time taken = 0.001307
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001277
Prover Time taken = 0.000916
Prover Time taken = 0.000791
Prover Time taken = 0.000949
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 <= 1 && -1 < data1 - data2) || 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001636
Prover Time taken = 0.001175
Prover Time taken = 0.001271
Prover Time taken = 0.001174
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 1 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= -2 || (-2 < data1 && data1 <= 0 && -1 < data2 && 1 < data2)
}
Prover Time taken = 0.002227
Prover Time taken = 0.002591
Prover Time taken = 0.002321
Prover Time taken = 0.002509
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 1 < data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.002298
Prover Time taken = 0.003214
Added Horn clause: 26 && 150 => 151
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0153060
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && 0 < data1 - data2) || (data1 <= 1 && 0 < data1 && -1 < data1 + data2) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data2 <= 0 && data2 <= -1 && 0 < data1) || (data1 <= 1 && data2 <= 0 && -1 < data2) || (1 < data1 && data2 <= 0)
}
Added Horn clause: 152 && 17 => 
Prover Time taken = 0.003173
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0163240
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && 0 < data1 - data2) || (data1 <= 1 && 0 < data1 && 0 < data1 + data2) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data2 <= 0 && data2 <= -1 && 0 < data1) || (data1 <= 1 && data2 <= 0 && -1 < data2) || (1 < data1 && data2 <= 0)
}
Added Horn clause: 64 && 22 => 
Prover Time taken = 0.003358
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0164820
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001256
Prover Time taken = 0.001468
Prover Time taken = 0.001324
Prover Time taken = 0.001073
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001338
Prover Time taken = 0.00091
Prover Time taken = 0.000935
Prover Time taken = 0.001016
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 <= 1 && -1 < data1 - data2) || 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001074
Prover Time taken = 0.001013
Prover Time taken = 0.001012
Prover Time taken = 0.001062
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= -2 || (-2 < data1 && data1 <= 0 && -1 < data2 && 1 < data2)
}
Prover Time taken = 0.001693
Prover Time taken = 0.001571
Prover Time taken = 0.001894
Prover Time taken = 0.00191
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && 0 < data2 && 1 < data2 && 0 < data1 + data2
}
Prover Time taken = 0.001648
Prover Time taken = 0.003183
Prover Time taken = 0.001436
Prover Time taken = 0.001675
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && 0 < data2 && 1 < data2 && 0 < data1 + data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.002078
Added Horn clause: 63 => 22
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0153310
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.001931
Prover Time taken = 0.00175
Prover Time taken = 0.001799
Prover Time taken = 0.001423
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.00079
Prover Time taken = 0.000803
Prover Time taken = 0.000838
Prover Time taken = 0.000744
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 <= 1 && -1 < data1 - data2) || 1 < data2
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
Prover Time taken = 0.001195
Prover Time taken = 0.002638
Added Horn clause: 153 => 154
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0224030
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data1 + data2 <= 0) || (data1 <= 1 && data1 <= 0 && 0 < data1 + data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001229
Prover Time taken = 0.001347
Prover Time taken = 0.001322
Prover Time taken = 0.0012
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data1 + data2 <= 0) || (data1 <= 1 && data1 <= 0 && 0 < data1 + data2 && data2 <= 1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= -2 || (-2 < data1 && data1 <= 0 && -1 < data2 && 1 < data2)
}
Prover Time taken = 0.003269
Added Horn clause: 0 && 155 => 53
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0167970
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data1 + data2 <= 1 && data1 + data2 <= 0 && 2 < data2) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data1 + data2 <= 1 && 0 < data1 + data2) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001376
Prover Time taken = 0.001432
Prover Time taken = 0.00122
Prover Time taken = 0.001347
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data1 + data2 <= 1 && data1 + data2 <= 0 && 2 < data2) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data1 + data2 <= 1 && 0 < data1 + data2) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= -2 || (-2 < data1 && data1 <= 0 && -1 < data2 && 1 < data2)
}
Prover Time taken = 0.002329
Prover Time taken = 0.0035
Added Horn clause: 156 && 157 => 158
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0193630
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data1 + data2 <= 0 && data1 <= -3) || (data1 <= 1 && data1 <= 0 && data1 + data2 <= 0 && -3 < data1 && -2 < data1) || (data1 <= 1 && data1 <= 0 && 0 < data1 + data2 && data1 + data2 <= 1) || (data1 <= 1 && data1 <= 0 && 0 < data1 + data2 && 1 < data1 + data2 && data1 <= -1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001861
Prover Time taken = 0.002489
Prover Time taken = 0.002039
Prover Time taken = 0.001666
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data1 + data2 <= 0 && data1 <= -3) || (data1 <= 1 && data1 <= 0 && data1 + data2 <= 0 && -3 < data1 && -2 < data1) || (data1 <= 1 && data1 <= 0 && 0 < data1 + data2 && data1 + data2 <= 1) || (data1 <= 1 && data1 <= 0 && 0 < data1 + data2 && 1 < data1 + data2 && data1 <= -1) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= -3 || (-3 < data1 && data1 <= -2) || (-3 < data1 && -2 < data1 && data1 <= 0 && 1 < data2)
}
Prover Time taken = 0.002686
Prover Time taken = 0.005983
Added Horn clause: 159 && 160 => 161
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0171300
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && 1 < data2 && 2 < data2) || (data1 <= 1 && 0 < data1) || (1 < data1 && data1 <= 3 && 2 < data1 && data1 - data2 <= -2) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.002047
Prover Time taken = 0.001678
Prover Time taken = 0.001751
Prover Time taken = 0.002271
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && 1 < data2 && 2 < data2) || (data1 <= 1 && 0 < data1) || (1 < data1 && data1 <= 3 && 2 < data1 && data1 - data2 <= -2) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 - data2 <= -4 || (-4 < data1 - data2 && data1 <= -4) || (-4 < data1 - data2 && -4 < data1 && data1 <= -2) || (-4 < data1 - data2 && -4 < data1 && -2 < data1 && data1 - data2 <= -2 && data1 <= 0)
}
Prover Time taken = 0.002414
Prover Time taken = 0.006122
Added Horn clause: 162 && 163 => 129
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0201720
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data1 - data2 <= -2 && 2 < data2 && data1 + data2 <= 2) || (data1 <= 1 && data1 <= 0 && -2 < data1 - data2) || (data1 <= 1 && 0 < data1) || (1 < data1 && data1 <= 3 && 2 < data1 && data1 - data2 <= -2) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001618
Prover Time taken = 0.001215
Prover Time taken = 0.001355
Prover Time taken = 0.002104
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data1 - data2 <= -2 && 2 < data2 && data1 + data2 <= 2) || (data1 <= 1 && data1 <= 0 && -2 < data1 - data2) || (data1 <= 1 && 0 < data1) || (1 < data1 && data1 <= 3 && 2 < data1 && data1 - data2 <= -2) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 - data2 <= -4 || (-4 < data1 - data2 && data1 <= -4) || (-4 < data1 - data2 && -4 < data1 && data1 <= -2) || (-4 < data1 - data2 && -4 < data1 && -2 < data1 && data1 - data2 <= -2 && data1 <= 0)
}
Prover Time taken = 0.002326
Prover Time taken = 0.005491
Added Horn clause: 164 && 165 => 166
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0197610
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && 1 < data2 && 4 < data2) || (data1 <= 1 && 0 < data1) || (1 < data1 && data1 <= 3 && 2 < data1 && data1 - data2 <= -2) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.00147
Prover Time taken = 0.001567
Prover Time taken = 0.001412
Prover Time taken = 0.002067
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && 1 < data2 && 4 < data2) || (data1 <= 1 && 0 < data1) || (1 < data1 && data1 <= 3 && 2 < data1 && data1 - data2 <= -2) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 - data2 <= -4 || (-4 < data1 - data2 && data1 <= -4) || (-4 < data1 - data2 && -4 < data1 && data1 <= -2) || (-4 < data1 - data2 && -4 < data1 && -2 < data1 && data1 - data2 <= -2 && data1 <= 0)
}
Prover Time taken = 0.003007
Prover Time taken = 0.005008
Added Horn clause: 167 && 168 => 31
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0204730
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && 1 < data2 && data1 <= -3) || (data1 <= 1 && data1 <= 0 && -1 < data2 && 1 < data2 && -3 < data1 && 2 < data2 && data2 <= 3) || (data1 <= 1 && 0 < data1) || (1 < data1 && data1 <= 3 && 2 < data1 && data1 - data2 <= -2) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001863
Prover Time taken = 0.00201
Prover Time taken = 0.00202
Prover Time taken = 0.001979
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && 1 < data2 && data1 <= -3) || (data1 <= 1 && data1 <= 0 && -1 < data2 && 1 < data2 && -3 < data1 && 2 < data2 && data2 <= 3) || (data1 <= 1 && 0 < data1) || (1 < data1 && data1 <= 3 && 2 < data1 && data1 - data2 <= -2) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 - data2 <= -4 || (-4 < data1 - data2 && data1 <= -4) || (-4 < data1 - data2 && -4 < data1 && data1 <= -2) || (-4 < data1 - data2 && -4 < data1 && -2 < data1 && data1 - data2 <= -2 && data1 <= 0)
}
Prover Time taken = 0.003634
Prover Time taken = 0.004458
Added Horn clause: 169 && 170 => 171
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0207900
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && 1 < data2 && 4 < data2 && data1 + data2 <= 0) || (data1 <= 1 && 0 < data1) || (1 < data1 && data1 <= 3 && 2 < data1 && data1 - data2 <= -2) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001414
Prover Time taken = 0.001732
Prover Time taken = 0.00182
Prover Time taken = 0.00198
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= -1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && data2 <= 1) || (data1 <= 1 && data1 <= 0 && -1 < data2 && 1 < data2 && 4 < data2 && data1 + data2 <= 0) || (data1 <= 1 && 0 < data1) || (1 < data1 && data1 <= 3 && 2 < data1 && data1 - data2 <= -2) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 - data2 <= -4 || (-4 < data1 - data2 && data1 <= -4) || (-4 < data1 - data2 && -4 < data1 && data1 <= -2) || (-4 < data1 - data2 && -4 < data1 && -2 < data1 && data1 - data2 <= -2 && data1 <= 0)
}
Prover Time taken = 0.003227
Prover Time taken = 0.004948
Added Horn clause: 154 && 172 => 173
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0192520
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= 2 && data2 <= 1) || (data1 <= 1 && data1 <= 0 && 2 < data2) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001438
Prover Time taken = 0.001215
Prover Time taken = 0.001189
Prover Time taken = 0.001217
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= 2 && data2 <= 1) || (data1 <= 1 && data1 <= 0 && 2 < data2) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= -4 || (-4 < data1 && data1 <= -3) || (-4 < data1 && -3 < data1 && data1 <= 0 && -4 < data1 - data2 && 1 < data2)
}
Prover Time taken = 0.001742
Prover Time taken = 0.003154
Added Horn clause: 166 && 174 => 51
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0196160
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= 2 && data2 <= 1) || (data1 <= 1 && data1 <= 0 && 2 < data2) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= -4 || (-4 < data1 && data1 <= -3) || (-4 < data1 && -3 < data1 && data1 <= 0 && data2 <= 2 && 1 < data2)
}
Prover Time taken = 0.00194
Prover Time taken = 0.002217
Prover Time taken = 0.002672
Prover Time taken = 0.002308
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= 2 && data2 <= 1) || (data1 <= 1 && data1 <= 0 && 2 < data2) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.001732
Prover Time taken = 0.001911
Prover Time taken = 0.001413
Prover Time taken = 0.001333
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 <= 1 && -1 < data1 - data2) || 1 < data2
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data1 <= 1 && data1 <= 0 && data2 <= 2 && data2 <= 1) || (data1 <= 1 && data1 <= 0 && 2 < data2) || (data1 <= 1 && 0 < data1) || (1 < data1 && 3 < data1 && 2 < data2)
}
Prover Time taken = 0.001432
Prover Time taken = 0.003036
Added Horn clause: 49 => 51
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0189100
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && 0 < data2 && data2 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 0 < data1 - data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 2 && 1 < data1 && data2 <= 0 && -1 < data2) || (2 < data1 && data2 <= 0 && 0 < data1 + data2)
}
Prover Time taken = 0.002051
Added Horn clause: 95 && 175 => 
Prover Time taken = 0.003947
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0214400
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && 0 < data2 && data2 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 0 < data1 - data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 2 && 1 < data1 && data2 <= 0 && -1 < data2) || (2 < data1 && data2 <= 0 && -1 < data2)
}
Prover Time taken = 0.001699
Prover Time taken = 0.002121
Prover Time taken = 0.002105
Prover Time taken = 0.001435
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 2 && 1 < data1 && data2 <= 0 && -1 < data2) || (2 < data1 && data2 <= 0 && -1 < data2)
}
Prover Time taken = 0.001222
Prover Time taken = 0.001174
Prover Time taken = 0.001266
Prover Time taken = 0.001227
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 <= 1 && -1 < data1 - data2) || 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 2 && 1 < data1 && data2 <= 0 && -1 < data2) || (2 < data1 && data2 <= 0 && -1 < data2)
}
Prover Time taken = 0.0013
Prover Time taken = 0.001324
Prover Time taken = 0.001252
Prover Time taken = 0.001304
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && 0 < data2 && data2 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 0 < data1 - data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= -4 || (-4 < data1 && data1 <= -3) || (-4 < data1 && -3 < data1 && 1 < data2)
}
Prover Time taken = 0.002042
Prover Time taken = 0.002153
Prover Time taken = 0.002234
Prover Time taken = 0.001906
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && 0 < data2 && data2 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 0 < data1 - data2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data2 <= 2 && 1 < data2 && data1 - data2 <= 0
}
Prover Time taken = 0.001953
Prover Time taken = 0.002906
Prover Time taken = 0.003963
Prover Time taken = 0.002611
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data2 <= 2 && 1 < data2 && data1 - data2 <= 0
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 2 && 1 < data1 && data2 <= 0 && -1 < data2) || (2 < data1 && data2 <= 0 && -1 < data2)
}
Prover Time taken = 0.001236
Prover Time taken = 0.00116
Prover Time taken = 0.001158
Prover Time taken = 0.001354
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 <= 1 && -1 < data1 - data2) || 1 < data2
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && 0 < data2 && data2 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 0 < data1 - data2) || 2 < data2
}
Prover Time taken = 0.003658
Added Horn clause: 20 => 64
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0195230
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && data2 <= 0 && data1 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && data2 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 0 < data1 - data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 2 && 1 < data1 && data2 <= 0 && -1 < data2) || (2 < data1 && data2 <= 0 && -1 < data2)
}
Prover Time taken = 0.001918
Prover Time taken = 0.002064
Prover Time taken = 0.001668
Prover Time taken = 0.001425
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && data2 <= 0 && data1 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && data2 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 0 < data1 - data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  data1 <= -4 || (-4 < data1 && data1 <= -3) || (-4 < data1 && -3 < data1 && 1 < data2)
}
Prover Time taken = 0.004801
Prover Time taken = 0.002133
Prover Time taken = 0.002483
Prover Time taken = 0.003002
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && data2 <= 0 && data1 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && data2 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 0 < data1 - data2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2 && 1 < data2 && data1 - data2 <= 0
}
Prover Time taken = 0.00264
Prover Time taken = 0.003585
Prover Time taken = 0.002588
Prover Time taken = 0.00404
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2 && 1 < data2 && data1 - data2 <= 0
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 <= 2 && 1 < data1 && data2 <= 0 && -1 < data2) || (2 < data1 && data2 <= 0 && -1 < data2)
}
Prover Time taken = 0.001601
Prover Time taken = 0.001419
Prover Time taken = 0.001097
Prover Time taken = 0.001062
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 <= 1 && -1 < data1 - data2) || 1 < data2
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && data2 <= 0 && data1 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && data2 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || (data2 <= 2 && -1 < data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 0 < data1 - data2) || 2 < data2
}
Prover Time taken = 0.001549
Prover Time taken = 0.001457
Prover Time taken = 0.001542
Prover Time taken = 0.001527
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 <= 1 && -1 < data1 - data2) || 1 < data2
}
Prover Time taken = 0.002103
Added Horn clause: 176 => 46
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0145610
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 2 && data2 <= 0
}
Prover Time taken = 0.000719
Prover Time taken = 0.000715
Prover Time taken = 0.00071
Prover Time taken = 0.000694
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 2 && data2 <= 0
}
Prover Time taken = 0.000991
Prover Time taken = 0.000999
Prover Time taken = 0.000854
Prover Time taken = 0.000847
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 2 && data2 <= 0
}
Prover Time taken = 0.000959
Prover Time taken = 0.000895
Prover Time taken = 0.00089
Prover Time taken = 0.001053
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.000621
Prover Time taken = 0.001206
Prover Time taken = 0.000964
Prover Time taken = 0.001087
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2
}
Prover Time taken = 0.000778
Prover Time taken = 0.000816
Prover Time taken = 0.000863
Prover Time taken = 0.001102
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 2 && data2 <= 0
}
Prover Time taken = 0.000901
Prover Time taken = 0.000859
Prover Time taken = 0.000818
Prover Time taken = 0.000803
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  1 < data2
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.000679
Prover Time taken = 0.000651
Prover Time taken = 0.000631
Prover Time taken = 0.00075
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  1 < data2
}
Prover Time taken = 0.000803
Prover Time taken = 0.000727
Prover Time taken = 0.000755
Prover Time taken = 0.000716
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  1 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.000922
Prover Time taken = 0.000698
Prover Time taken = 0.000751
Prover Time taken = 0.000886
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  1 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2
}
Prover Time taken = 0.002435
Added Horn clause: 177 && 65 => 79
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0142600
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 2 && data2 <= 1
}
Prover Time taken = 0.000696
Prover Time taken = 0.000739
Prover Time taken = 0.000685
Prover Time taken = 0.000779
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 2 && data2 <= 1
}
Prover Time taken = 0.000917
Prover Time taken = 0.000846
Prover Time taken = 0.000878
Prover Time taken = 0.000977
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 2 && data2 <= 1
}
Prover Time taken = 0.001105
Prover Time taken = 0.001042
Prover Time taken = 0.00081
Prover Time taken = 0.000909
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && -2 < data1
}
Prover Time taken = 0.000739
Prover Time taken = 0.001643
Prover Time taken = 0.001196
Prover Time taken = 0.001165
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && -2 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 2 && data2 <= 1
}
Prover Time taken = 0.000821
Prover Time taken = 0.000885
Prover Time taken = 0.000866
Prover Time taken = 0.001159
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  1 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && -2 < data1
}
Prover Time taken = 0.002857
Added Horn clause: 49 && 14 => 40
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0153990
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 2
}
Prover Time taken = 0.00072
Prover Time taken = 0.000743
Prover Time taken = 0.000796
Prover Time taken = 0.000829
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 2
}
Prover Time taken = 0.000921
Prover Time taken = 0.000947
Prover Time taken = 0.001001
Prover Time taken = 0.001073
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 2
}
Prover Time taken = 0.000927
Prover Time taken = 0.002678
Added Horn clause: 6 && 24 => 178
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0161940
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data1 + data2 <= 2
}
Prover Time taken = 0.000933
Added Horn clause: 158 && 179 => 
Prover Time taken = 0.002886
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0177730
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data1 + data2 <= 2 && data2 <= 1
}
Prover Time taken = 0.000769
Prover Time taken = 0.000759
Prover Time taken = 0.00114
Prover Time taken = 0.000968
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data1 + data2 <= 2 && data2 <= 1
}
Prover Time taken = 0.001533
Prover Time taken = 0.001401
Prover Time taken = 0.001229
Prover Time taken = 0.001244
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data1 + data2 <= 2 && data2 <= 1
}
Prover Time taken = 0.001236
Prover Time taken = 0.001159
Prover Time taken = 0.001079
Prover Time taken = 0.001183
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2
}
Prover Time taken = 0.000823
Prover Time taken = 0.000876
Prover Time taken = 0.000941
Prover Time taken = 0.000899
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data1 + data2 <= 2 && data2 <= 1
}
Prover Time taken = 0.001016
Prover Time taken = 0.002533
Added Horn clause: 180 => 181
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0214560
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 + data2 <= 2 && data2 <= 1) || (2 < data1 + data2 && data2 <= -2)
}
Prover Time taken = 0.001001
Prover Time taken = 0.001032
Prover Time taken = 0.001033
Prover Time taken = 0.001328
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 + data2 <= 2 && data2 <= 1) || (2 < data1 + data2 && data2 <= -2)
}
Prover Time taken = 0.001551
Prover Time taken = 0.001525
Prover Time taken = 0.001559
Prover Time taken = 0.001172
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 + data2 <= 2 && data2 <= 1) || (2 < data1 + data2 && data2 <= -2)
}
Prover Time taken = 0.001279
Prover Time taken = 0.001262
Prover Time taken = 0.001186
Prover Time taken = 0.001166
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 + data2 <= 2 && data2 <= 1) || (2 < data1 + data2 && data2 <= -2)
}
Prover Time taken = 0.001201
Prover Time taken = 0.002547
Added Horn clause: 182 => 89
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0160540
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 + data2 <= 2 && data2 <= 1) || (2 < data1 + data2 && data2 <= 0)
}
Prover Time taken = 0.000812
Prover Time taken = 0.000829
Prover Time taken = 0.000883
Prover Time taken = 0.000818
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 + data2 <= 2 && data2 <= 1) || (2 < data1 + data2 && data2 <= 0)
}
Prover Time taken = 0.001419
Prover Time taken = 0.001276
Prover Time taken = 0.001183
Prover Time taken = 0.001187
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 + data2 <= 2 && data2 <= 1) || (2 < data1 + data2 && data2 <= 0)
}
Prover Time taken = 0.001142
Prover Time taken = 0.00136
Prover Time taken = 0.001115
Prover Time taken = 0.001101
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 + data2 <= 2 && data2 <= 1) || (2 < data1 + data2 && data2 <= 0)
}
Prover Time taken = 0.000897
Prover Time taken = 0.000816
Prover Time taken = 0.000899
Prover Time taken = 0.000878
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 1 < data2
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.00105
Prover Time taken = 0.000913
Prover Time taken = 0.001469
Prover Time taken = 0.000901
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 1 < data2
}
Prover Time taken = 0.000964
Prover Time taken = 0.001041
Prover Time taken = 0.001036
Prover Time taken = 0.000972
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 1 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.001187
Prover Time taken = 0.003026
Added Horn clause: 183 && 55 => 184
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0221180
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 1 < data2 && data2 <= 3
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 + data2 <= 2 && data2 <= 1) || (2 < data1 + data2 && data2 <= 0)
}
Prover Time taken = 0.001437
Prover Time taken = 0.003461
Prover Time taken = 0.0016
Prover Time taken = 0.001324
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 1 < data2 && data2 <= 3
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.001049
Prover Time taken = 0.001007
Prover Time taken = 0.000983
Prover Time taken = 0.000748
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 1 < data2 && data2 <= 3
}
Prover Time taken = 0.001157
Prover Time taken = 0.002153
Added Horn clause: 185 => 183
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0190860
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2 && data2 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 + data2 <= 2 && data2 <= 1) || (2 < data1 + data2 && data2 <= 0)
}
Prover Time taken = 0.001565
Prover Time taken = 0.001597
Prover Time taken = 0.001216
Prover Time taken = 0.001216
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 1 < data2 && -4 < data1 - data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 + data2 <= 2 && data2 <= 1) || (2 < data1 + data2 && data2 <= 0)
}
Prover Time taken = 0.001705
Prover Time taken = 0.003649
Prover Time taken = 0.001546
Prover Time taken = 0.001359
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 1 < data2 && -4 < data1 - data2
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.000883
Prover Time taken = 0.000895
Prover Time taken = 0.001013
Prover Time taken = 0.00088
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2 && data2 <= 2
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 1 < data2 && -4 < data1 - data2
}
Prover Time taken = 0.001395
Prover Time taken = 0.001196
Prover Time taken = 0.001145
Prover Time taken = 0.001412
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  0 < data1 && data1 <= 1 && 1 < data2 && -4 < data1 - data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.00121
Prover Time taken = 0.002621
Added Horn clause: 6 && 81 => 186
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0162650
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 + data2 <= 2 && data2 <= 1) || (2 < data1 + data2 && data2 <= 0)
}
Prover Time taken = 0.001301
Prover Time taken = 0.001105
Prover Time taken = 0.001114
Prover Time taken = 0.0013
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && 1 < data2 && data1 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data1 + data2 <= 2 && data2 <= 1) || (2 < data1 + data2 && data2 <= 0)
}
Prover Time taken = 0.001567
Prover Time taken = 0.001507
Prover Time taken = 0.001793
Prover Time taken = 0.0019
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && 1 < data2 && data1 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.001404
Prover Time taken = 0.001363
Prover Time taken = 0.001082
Prover Time taken = 0.001091
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && 1 < data2 && data1 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && 2 < data1)
}
Prover Time taken = 0.001002
Prover Time taken = 0.001292
Prover Time taken = 0.001131
Prover Time taken = 0.001357
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && 1 < data2 && data1 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.001145
Prover Time taken = 0.001159
Prover Time taken = 0.001222
Prover Time taken = 0.001699
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && 1 < data2 && data1 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2
}
Prover Time taken = 0.003515
Added Horn clause: 6 && 63 => 21
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0226940
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data1 + data2 <= 2 && -1 < data1
}
Prover Time taken = 0.000743
Prover Time taken = 0.00087
Prover Time taken = 0.001125
Prover Time taken = 0.000909
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data1 + data2 <= 2 && -1 < data1
}
Prover Time taken = 0.003114
Added Horn clause: 2 && 187 => 24
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0187890
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.000713
Prover Time taken = 0.000806
Prover Time taken = 0.000694
Prover Time taken = 0.000616
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001182
Prover Time taken = 0.000985
Prover Time taken = 0.000927
Prover Time taken = 0.00112
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && 1 < data2 && data1 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.00151
Prover Time taken = 0.001198
Prover Time taken = 0.001417
Prover Time taken = 0.000911
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && 1 < data1
}
Prover Time taken = 0.00226
Prover Time taken = 0.000753
Prover Time taken = 0.000831
Prover Time taken = 0.000828
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && 1 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.000786
Prover Time taken = 0.000781
Prover Time taken = 0.000738
Prover Time taken = 0.000781
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && 1 < data2 && data1 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && 1 < data1
}
Prover Time taken = 0.001212
Prover Time taken = 0.0027
Added Horn clause: 186 && 96 => 188
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0209270
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && 1 < data1 && data1 <= 2
}
Prover Time taken = 0.000963
Prover Time taken = 0.000928
Prover Time taken = 0.00093
Prover Time taken = 0.00086
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && 1 < data1 && data1 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001017
Prover Time taken = 0.000914
Prover Time taken = 0.000877
Prover Time taken = 0.000802
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && 1 < data2 && data1 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && 1 < data1 && data1 <= 2
}
Prover Time taken = 0.003185
Prover Time taken = 0.001325
Prover Time taken = 0.001209
Prover Time taken = 0.001139
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && 1 < data2 && data1 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.000914
Prover Time taken = 0.001056
Prover Time taken = 0.001147
Prover Time taken = 0.001145
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && 1 < data1 && data1 <= 2
}
Prover Time taken = 0.002488
Added Horn clause: 101 => 189
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0226530
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && -1 < data1 - data2 && data1 <= 2
}
Prover Time taken = 0.001327
Prover Time taken = 0.001502
Prover Time taken = 0.00103
Prover Time taken = 0.001255
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && -1 < data1 - data2 && data1 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.000968
Prover Time taken = 0.000945
Prover Time taken = 0.000862
Prover Time taken = 0.000923
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && 1 < data2 && data1 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && -1 < data1 - data2 && data1 <= 2
}
Prover Time taken = 0.001448
Prover Time taken = 0.001701
Prover Time taken = 0.002091
Prover Time taken = 0.001775
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  data2 <= 2 && -1 < data1 - data2 && data1 <= 2
}
Prover Time taken = 0.002878
Added Horn clause: 190 => 191
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0185020
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= 1) || (data2 <= 2 && 1 < data2 && 1 < data1 && data1 - data2 <= 0)
}
Prover Time taken = 0.001405
Prover Time taken = 0.001272
Prover Time taken = 0.001332
Prover Time taken = 0.001309
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= 1) || (data2 <= 2 && 1 < data2 && 1 < data1 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001556
Prover Time taken = 0.001278
Prover Time taken = 0.001017
Prover Time taken = 0.001308
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && 1 < data2 && data1 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= 1) || (data2 <= 2 && 1 < data2 && 1 < data1 && data1 - data2 <= 0)
}
Prover Time taken = 0.001422
Prover Time taken = 0.001505
Prover Time taken = 0.001614
Prover Time taken = 0.003415
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  true
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= 1) || (data2 <= 2 && 1 < data2 && 1 < data1 && data1 - data2 <= 0)
}
Prover Time taken = 0.003419
Added Horn clause: 192 => 63
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0269450
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data1 <= 2 && 0 < data2 && data2 <= 1 && 0 < data1 && data1 - data2 <= 0) || (data2 <= 2 && 2 < data1 && data1 <= 3 && 0 < data2 && data2 <= 1) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Added Horn clause: 78 && 23 => 
Prover Time taken = 0.002842
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0182090
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2 && data2 <= 3 && data1 <= 1 && 0 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  true
}
Prover Time taken = 0.000882
Added Horn clause: 7 && 178 => 
Prover Time taken = 0.002787
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0279380
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && data2 <= 1 && data2 <= 0 && data1 <= 1) || (data2 <= 2 && -1 < data2 && data2 <= 1 && 0 < data2) || (data2 <= 2 && -1 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0 && -1 < data2
}
Prover Time taken = 0.001382
Prover Time taken = 0.001247
Prover Time taken = 0.001832
Prover Time taken = 0.00151
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0 && -1 < data2
}
Prover Time taken = 0.001122
Prover Time taken = 0.001054
Prover Time taken = 0.001642
Prover Time taken = 0.001747
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 0 && data2 <= -2) || (0 < data1 && data1 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0 && -1 < data2
}
Prover Time taken = 0.001659
Prover Time taken = 0.001636
Prover Time taken = 0.00234
Prover Time taken = 0.001523
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && data2 <= 1 && data2 <= 0 && data1 <= 1) || (data2 <= 2 && -1 < data2 && data2 <= 1 && 0 < data2) || (data2 <= 2 && -1 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 <= 0 && 1 < data2
}
Prover Time taken = 0.001965
Prover Time taken = 0.0026
Prover Time taken = 0.002339
Prover Time taken = 0.002258
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && data2 <= 1 && data2 <= 0 && data1 <= 1) || (data2 <= 2 && -1 < data2 && data2 <= 1 && 0 < data2) || (data2 <= 2 && -1 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2 && 1 < data2
}
Prover Time taken = 0.00264
Prover Time taken = 0.003437
Prover Time taken = 0.003212
Prover Time taken = 0.002565
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2 && 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0 && -1 < data2
}
Prover Time taken = 0.001599
Prover Time taken = 0.001207
Prover Time taken = 0.001253
Prover Time taken = 0.00113
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 0 && data2 <= -2) || (0 < data1 && data1 <= 1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && data2 <= 1 && data2 <= 0 && data1 <= 1) || (data2 <= 2 && -1 < data2 && data2 <= 1 && 0 < data2) || (data2 <= 2 && -1 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || 2 < data2
}
Prover Time taken = 0.001992
Prover Time taken = 0.001968
Prover Time taken = 0.001906
Prover Time taken = 0.002054
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 0 && data2 <= -2) || (0 < data1 && data1 <= 1)
}
Prover Time taken = 0.002625
Added Horn clause: 193 => 194
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0296690
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 0 && data1 <= -1) || (data1 <= 0 && -1 < data1 && data2 <= -2) || (0 < data1 && data1 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0 && -1 < data2
}
Prover Time taken = 0.004231
Prover Time taken = 0.001626
Prover Time taken = 0.001689
Prover Time taken = 0.001478
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 0 && data1 <= -1) || (data1 <= 0 && -1 < data1 && data2 <= -2) || (0 < data1 && data1 <= 1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && data2 <= 1 && data2 <= 0 && data1 <= 1) || (data2 <= 2 && -1 < data2 && data2 <= 1 && 0 < data2) || (data2 <= 2 && -1 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || 2 < data2
}
Prover Time taken = 0.003136
Added Horn clause: 195 => 171
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0330330
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && data1 <= 1 && data2 <= 1) || (data2 <= 2 && -1 < data2 && data1 <= 1 && 1 < data2 && data1 <= -1) || (data2 <= 2 && -1 < data2 && data1 <= 1 && 1 < data2 && -1 < data1 && 0 < data1) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0 && -1 < data2
}
Prover Time taken = 0.001418
Prover Time taken = 0.0013
Prover Time taken = 0.001334
Prover Time taken = 0.00196
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && data1 <= 1 && data2 <= 1) || (data2 <= 2 && -1 < data2 && data1 <= 1 && 1 < data2 && data1 <= -1) || (data2 <= 2 && -1 < data2 && data1 <= 1 && 1 < data2 && -1 < data1 && 0 < data1) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 <= 0 && 1 < data2
}
Prover Time taken = 0.001904
Prover Time taken = 0.001928
Prover Time taken = 0.002641
Prover Time taken = 0.001933
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && data1 <= 1 && data2 <= 1) || (data2 <= 2 && -1 < data2 && data1 <= 1 && 1 < data2 && data1 <= -1) || (data2 <= 2 && -1 < data2 && data1 <= 1 && 1 < data2 && -1 < data1 && 0 < data1) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2 && 1 < data2
}
Prover Time taken = 0.001988
Prover Time taken = 0.00272
Prover Time taken = 0.001916
Prover Time taken = 0.001993
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 0 && data1 <= -1) || (data1 <= 0 && -1 < data1 && data2 <= -2) || (0 < data1 && data1 <= 1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && data1 <= 1 && data2 <= 1) || (data2 <= 2 && -1 < data2 && data1 <= 1 && 1 < data2 && data1 <= -1) || (data2 <= 2 && -1 < data2 && data1 <= 1 && 1 < data2 && -1 < data1 && 0 < data1) || 2 < data2
}
Prover Time taken = 0.002068
Prover Time taken = 0.001539
Prover Time taken = 0.001535
Prover Time taken = 0.001662
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 0 && data1 <= -1) || (data1 <= 0 && -1 < data1 && data2 <= -2) || (0 < data1 && data1 <= 1)
}
Prover Time taken = 0.003407
Added Horn clause: 196 => 197
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0286200
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 0 && data1 + data2 <= 0) || (data1 <= 0 && 0 < data1 + data2 && data1 <= -1) || (0 < data1 && data1 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0 && -1 < data2
}
Prover Time taken = 0.001666
Prover Time taken = 0.001374
Prover Time taken = 0.001486
Prover Time taken = 0.001405
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 0 && data1 + data2 <= 0) || (data1 <= 0 && 0 < data1 + data2 && data1 <= -1) || (0 < data1 && data1 <= 1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && data2 <= -1) || (data2 <= 2 && -1 < data2 && data1 <= 1 && data2 <= 1) || (data2 <= 2 && -1 < data2 && data1 <= 1 && 1 < data2 && data1 <= -1) || (data2 <= 2 && -1 < data2 && data1 <= 1 && 1 < data2 && -1 < data1 && 0 < data1) || 2 < data2
}
Prover Time taken = 0.001742
Prover Time taken = 0.001978
Prover Time taken = 0.001936
Prover Time taken = 0.001971
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 0 && data1 + data2 <= 0) || (data1 <= 0 && 0 < data1 + data2 && data1 <= -1) || (0 < data1 && data1 <= 1)
}
Prover Time taken = 0.003439
Added Horn clause: 198 => 104
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0314140
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 1
}
Prover Time taken = 0.000793
Prover Time taken = 0.000777
Prover Time taken = 0.001308
Prover Time taken = 0.00123
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 1
}
Prover Time taken = 0.001102
Prover Time taken = 0.001337
Prover Time taken = 0.000905
Prover Time taken = 0.000843
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 0 && data1 <= -1 && 0 < data1 + data2) || (0 < data1 && data1 <= 1 && 1 < data2) || (0 < data1 && 1 < data1 && data1 <= 2 && 0 < data1 + data2 && data2 <= 0) || (0 < data1 && 1 < data1 && data1 <= 2 && 0 < data1 + data2 && 0 < data2 && data1 - data2 <= 0) || (0 < data1 && 1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 1
}
Prover Time taken = 0.002095
Prover Time taken = 0.004241
Added Horn clause: 199 && 141 => 83
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0257620
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 0 && data1 <= -1 && 0 < data1 + data2) || (0 < data1 && data1 <= 1 && 1 < data2) || (0 < data1 && 1 < data1 && data1 <= 2 && 0 < data1 + data2 && data2 <= 0) || (0 < data1 && 1 < data1 && data1 <= 2 && 0 < data1 + data2 && 0 < data2 && data1 - data2 <= 0) || (0 < data1 && 1 < data1 && 2 < data1 && data1 - data2 <= 1) || (0 < data1 && 1 < data1 && 2 < data1 && 1 < data1 - data2 && 2 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 1
}
Prover Time taken = 0.002817
Prover Time taken = 0.004796
Added Horn clause: 200 && 142 => 27
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0319270
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 3) || (1 < data1 && 3 < data1 + data2 && data2 <= 0)
}
Prover Time taken = 0.001107
Prover Time taken = 0.001351
Prover Time taken = 0.001724
Prover Time taken = 0.001113
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 3) || (1 < data1 && 3 < data1 + data2 && data2 <= 0)
}
Prover Time taken = 0.003498
Prover Time taken = 0.001721
Prover Time taken = 0.001894
Prover Time taken = 0.001919
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 0 && data1 <= -1 && 0 < data1 + data2) || (0 < data1 && data1 <= 1 && 1 < data2) || (0 < data1 && 1 < data1 && data2 <= 1 && -2 < data2 && data2 <= 0) || (0 < data1 && 1 < data1 && 1 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 3) || (1 < data1 && 3 < data1 + data2 && data2 <= 0)
}
Prover Time taken = 0.002558
Prover Time taken = 0.004072
Added Horn clause: 188 && 39 => 141
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0250690
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 3) || (1 < data1 && 3 < data1 + data2 && data2 <= 1)
}
Prover Time taken = 0.000972
Prover Time taken = 0.000971
Prover Time taken = 0.00124
Prover Time taken = 0.001676
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 3) || (1 < data1 && 3 < data1 + data2 && data2 <= 1)
}
Prover Time taken = 0.001537
Prover Time taken = 0.001499
Prover Time taken = 0.001968
Prover Time taken = 0.001965
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 0 && data1 <= -1 && 0 < data1 + data2) || (0 < data1 && data1 <= 1 && 1 < data2) || (0 < data1 && 1 < data1 && data2 <= 1 && -2 < data2 && data2 <= 0) || (0 < data1 && 1 < data1 && 1 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 3) || (1 < data1 && 3 < data1 + data2 && data2 <= 1)
}
Prover Time taken = 0.002411
Prover Time taken = 0.001873
Prover Time taken = 0.001826
Prover Time taken = 0.002342
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.000937
Prover Time taken = 0.001309
Prover Time taken = 0.00116
Prover Time taken = 0.001034
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.001146
Prover Time taken = 0.001251
Prover Time taken = 0.000991
Prover Time taken = 0.001147
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 3) || (1 < data1 && 3 < data1 + data2 && data2 <= 1)
}
Prover Time taken = 0.001069
Prover Time taken = 0.001206
Prover Time taken = 0.001408
Prover Time taken = 0.001111
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 0 && data1 <= -1 && 0 < data1 + data2) || (0 < data1 && data1 <= 1 && 1 < data2) || (0 < data1 && 1 < data1 && data2 <= 1 && -2 < data2 && data2 <= 0) || (0 < data1 && 1 < data1 && 1 < data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.00299
Added Horn clause: 201 => 25
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0249970
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 1 < data2) || (-1 < data1 - data2 && data1 - data2 <= 3 && data2 <= 1 && 1 < data1 && data2 <= 0 && -1 < data2) || (-1 < data1 - data2 && data1 - data2 <= 3 && 1 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 3) || (1 < data1 && 3 < data1 + data2 && data2 <= 1)
}
Prover Time taken = 0.002576
Prover Time taken = 0.002356
Prover Time taken = 0.002745
Prover Time taken = 0.002306
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 1 < data2) || (-1 < data1 - data2 && data1 - data2 <= 3 && data2 <= 1 && 1 < data1 && data2 <= 0 && -1 < data2) || (-1 < data1 - data2 && data1 - data2 <= 3 && 1 < data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.003411
Added Horn clause: 40 => 42
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0281710
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.001292
Prover Time taken = 0.001283
Prover Time taken = 0.001166
Prover Time taken = 0.001213
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.001325
Prover Time taken = 0.001928
Prover Time taken = 0.001623
Prover Time taken = 0.001705
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 1 < data1 + data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.001994
Prover Time taken = 0.002167
Prover Time taken = 0.002193
Prover Time taken = 0.002258
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 <= 0
}
Prover Time taken = 0.001463
Prover Time taken = 0.001701
Prover Time taken = 0.002135
Prover Time taken = 0.00171
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.001367
Prover Time taken = 0.001729
Prover Time taken = 0.006287
Prover Time taken = 0.001442
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 1 < data1 + data2
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.001681
Prover Time taken = 0.001332
Prover Time taken = 0.001503
Prover Time taken = 0.001177
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 1 < data1 + data2
}
Prover Time taken = 0.001422
Prover Time taken = 0.00147
Prover Time taken = 0.001718
Prover Time taken = 0.001164
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 1 < data1 + data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 <= 0
}
Prover Time taken = 0.003891
Added Horn clause: 202 && 10 => 49
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0260620
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.001763
Prover Time taken = 0.001512
Prover Time taken = 0.001856
Prover Time taken = 0.001451
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.001045
Prover Time taken = 0.0009
Prover Time taken = 0.000879
Prover Time taken = 0.000987
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1
}
Prover Time taken = 0.001574
Prover Time taken = 0.001488
Prover Time taken = 0.00132
Prover Time taken = 0.001695
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 <= 0
}
Prover Time taken = 0.001744
Prover Time taken = 0.001585
Prover Time taken = 0.001429
Prover Time taken = 0.001645
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.001931
Prover Time taken = 0.001458
Prover Time taken = 0.001976
Prover Time taken = 0.002101
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 <= 0
}
Prover Time taken = 0.001714
Prover Time taken = 0.001571
Prover Time taken = 0.001116
Prover Time taken = 0.001077
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 <= 0
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.001073
Prover Time taken = 0.002859
Added Horn clause: 168 => 133
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0273570
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.001361
Prover Time taken = 0.001448
Prover Time taken = 0.001283
Prover Time taken = 0.001714
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.001376
Prover Time taken = 0.001551
Prover Time taken = 0.001578
Prover Time taken = 0.001683
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.003542
Prover Time taken = 0.001515
Prover Time taken = 0.001605
Prover Time taken = 0.001399
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.001214
Prover Time taken = 0.001046
Prover Time taken = 0.001034
Prover Time taken = 0.001027
Verifying P0_Stable_t2_s2: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.002171
Prover Time taken = 0.002042
Prover Time taken = 0.00139
Prover Time taken = 0.001312
Verifying P0_Stable_t2_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  data1 <= 0 && -1 < data1 && 1 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.003655
Added Horn clause: 2 && 10 => 203
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0225360
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data2 && data1 <= 0) || (1 < data2 && 0 < data1 && 1 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.00139
Prover Time taken = 0.001186
Prover Time taken = 0.001072
Prover Time taken = 0.001099
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && data1 <= 0 && data1 - data2 <= -3) || (data1 - data2 <= -1 && 0 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.001363
Prover Time taken = 0.001228
Prover Time taken = 0.001234
Prover Time taken = 0.001519
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && data1 <= 0 && data1 - data2 <= -3) || (data1 - data2 <= -1 && 0 < data1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.003022
Added Horn clause: 204 => 0
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0224230
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && data1 <= 0 && data1 <= -1 && 0 < data1 + data2) || (data1 - data2 <= -1 && 0 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.001524
Prover Time taken = 0.001503
Prover Time taken = 0.001886
Prover Time taken = 0.001209
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && data1 <= 0 && data1 <= -1 && 0 < data1 + data2) || (data1 - data2 <= -1 && 0 < data1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.001347
Prover Time taken = 0.001475
Prover Time taken = 0.001409
Prover Time taken = 0.001147
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data2 && data1 <= 0) || (1 < data2 && 0 < data1 && 1 < data1)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && data1 <= 0 && data1 <= -1 && 0 < data1 + data2) || (data1 - data2 <= -1 && 0 < data1)
}
Prover Time taken = 0.003349
Added Horn clause: 205 => 202
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0233000
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001236
Prover Time taken = 0.001309
Prover Time taken = 0.00114
Prover Time taken = 0.001134
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || 1 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001717
Prover Time taken = 0.001706
Prover Time taken = 0.001677
Prover Time taken = 0.001689
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001809
Prover Time taken = 0.004188
Prover Time taken = 0.00151
Prover Time taken = 0.001325
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001536
Prover Time taken = 0.002007
Prover Time taken = 0.001762
Prover Time taken = 0.001484
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.001486
Prover Time taken = 0.001219
Prover Time taken = 0.001023
Prover Time taken = 0.00115
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || 1 < data1
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1
}
Prover Time taken = 0.001213
Prover Time taken = 0.002669
Added Horn clause: 60 => 206
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0325860
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2)
}
Prover Time taken = 0.001324
Prover Time taken = 0.00128
Prover Time taken = 0.001659
Prover Time taken = 0.00113
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || 1 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2)
}
Prover Time taken = 0.001644
Prover Time taken = 0.002156
Prover Time taken = 0.002211
Prover Time taken = 0.002596
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2)
}
Prover Time taken = 0.001668
Prover Time taken = 0.003521
Added Horn clause: 207 && 113 => 19
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0260730
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data1 <= 4) || (1 < data1 && 0 < data2 && data2 <= 2 && 4 < data1 && data2 <= 1)
}
Prover Time taken = 0.0013
Prover Time taken = 0.001441
Prover Time taken = 0.001469
Prover Time taken = 0.001512
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || 1 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data1 <= 4) || (1 < data1 && 0 < data2 && data2 <= 2 && 4 < data1 && data2 <= 1)
}
Prover Time taken = 0.002312
Prover Time taken = 0.005015
Added Horn clause: 208 && 27 => 113
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0301520
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2)
}
Prover Time taken = 0.001356
Prover Time taken = 0.001108
Prover Time taken = 0.001386
Prover Time taken = 0.003843
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || 1 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2)
}
Prover Time taken = 0.002099
Prover Time taken = 0.001916
Prover Time taken = 0.001798
Prover Time taken = 0.001842
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2)
}
Prover Time taken = 0.002293
Prover Time taken = 0.003981
Added Horn clause: 186 && 83 => 59
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0365470
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 1)
}
Prover Time taken = 0.001073
Prover Time taken = 0.001203
Prover Time taken = 0.001916
Prover Time taken = 0.001192
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || 1 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 1)
}
Prover Time taken = 0.003163
Prover Time taken = 0.001522
Prover Time taken = 0.002705
Prover Time taken = 0.002524
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 <= 3 && data2 <= 1 && data2 <= 0) || (-1 < data1 - data2 && 2 < data1 && data1 <= 3 && 1 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 1)
}
Prover Time taken = 0.001998
Prover Time taken = 0.001683
Prover Time taken = 0.001888
Prover Time taken = 0.002014
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data2 <= 2
}
Prover Time taken = 0.002741
Prover Time taken = 0.001065
Prover Time taken = 0.00098
Prover Time taken = 0.000955
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 1)
}
Prover Time taken = 0.001424
Prover Time taken = 0.001261
Prover Time taken = 0.00117
Prover Time taken = 0.001286
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 <= 3 && data2 <= 1 && data2 <= 0) || (-1 < data1 - data2 && 2 < data1 && data1 <= 3 && 1 < data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.001637
Prover Time taken = 0.003218
Added Horn clause: 188 => 103
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0238480
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.00085
Prover Time taken = 0.00092
Prover Time taken = 0.000898
Prover Time taken = 0.000872
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || 1 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001207
Prover Time taken = 0.001115
Prover Time taken = 0.001326
Prover Time taken = 0.00139
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 - data2 <= 0) || (-1 < data1 - data2 && 2 < data1 && 0 < data1 - data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001614
Prover Time taken = 0.001804
Prover Time taken = 0.001568
Prover Time taken = 0.001439
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2 && data1 <= 2
}
Prover Time taken = 0.000846
Prover Time taken = 0.000945
Prover Time taken = 0.001008
Prover Time taken = 0.001224
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2 && data1 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.000961
Prover Time taken = 0.001337
Prover Time taken = 0.001043
Prover Time taken = 0.001252
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 - data2 <= 0) || (-1 < data1 - data2 && 2 < data1 && 0 < data1 - data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.001695
Prover Time taken = 0.001272
Prover Time taken = 0.001286
Prover Time taken = 0.001671
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || 1 < data1
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 - data2 <= 0) || (-1 < data1 - data2 && 2 < data1 && 0 < data1 - data2 && data1 - data2 <= 1)
}
Prover Time taken = 0.001522
Prover Time taken = 0.003095
Added Horn clause: 209 => 199
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0247220
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 - data2 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001564
Prover Time taken = 0.00129
Prover Time taken = 0.001307
Prover Time taken = 0.001439
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 - data2 <= 2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.001021
Prover Time taken = 0.002507
Added Horn clause: 199 => 82
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0312990
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 1) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001109
Prover Time taken = 0.001335
Prover Time taken = 0.001178
Prover Time taken = 0.001117
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 <= 0 && 1 < data2) || 1 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001396
Prover Time taken = 0.001464
Prover Time taken = 0.001298
Prover Time taken = 0.001315
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 1) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data2 <= 2
}
Prover Time taken = 0.004588
Prover Time taken = 0.00281
Added Horn clause: 82 && 210 => 112
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0251080
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 1) || (data2 <= 2 && 2 < data1 && 1 < data1 - data2 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001345
Prover Time taken = 0.001493
Prover Time taken = 0.001347
Prover Time taken = 0.001543
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 1) || (data2 <= 2 && 2 < data1 && 1 < data1 - data2 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data2 <= 2
}
Prover Time taken = 0.001735
Prover Time taken = 0.001719
Prover Time taken = 0.001683
Prover Time taken = 0.001706
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 1) || (data2 <= 2 && 2 < data1 && 1 < data1 - data2 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 4
}
Prover Time taken = 0.001268
Prover Time taken = 0.003049
Added Horn clause: 103 && 211 => 212
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0252120
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 1) || (data2 <= 2 && 2 < data1 && 1 < data1 - data2 && 1 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001209
Prover Time taken = 0.001444
Prover Time taken = 0.001113
Prover Time taken = 0.001031
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 1) || (data2 <= 2 && 2 < data1 && 1 < data1 - data2 && 1 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data2 <= 2
}
Prover Time taken = 0.001582
Prover Time taken = 0.001517
Prover Time taken = 0.001869
Prover Time taken = 0.00189
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 1) || (data2 <= 2 && 2 < data1 && 1 < data1 - data2 && 1 < data2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 4
}
Prover Time taken = 0.001624
Prover Time taken = 0.001986
Prover Time taken = 0.001965
Prover Time taken = 0.00146
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 4
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.000867
Prover Time taken = 0.000785
Prover Time taken = 0.000771
Prover Time taken = 0.000959
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 - data2 <= 2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 1) || (data2 <= 2 && 2 < data1 && 1 < data1 - data2 && 1 < data2) || 2 < data2
}
Prover Time taken = 0.001631
Prover Time taken = 0.001606
Prover Time taken = 0.00131
Prover Time taken = 0.00129
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 <= 0 && 1 < data2) || 1 < data1
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && data1 - data2 <= 2)
}
Prover Time taken = 0.001267
Prover Time taken = 0.002813
Added Horn clause: 140 => 200
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0263970
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && 0 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001259
Prover Time taken = 0.001547
Prover Time taken = 0.001237
Prover Time taken = 0.001152
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && 0 < data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 1) || (data2 <= 2 && 2 < data1 && 1 < data1 - data2 && 1 < data2) || 2 < data2
}
Prover Time taken = 0.001664
Prover Time taken = 0.001787
Prover Time taken = 0.002
Prover Time taken = 0.001522
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 <= 0 && 1 < data2) || 1 < data1
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 - data2 <= -1 && 0 < data1) || (-1 < data1 - data2 && 2 < data1 && 0 < data2)
}
Prover Time taken = 0.003094
Prover Time taken = 0.00254
Added Horn clause: 38 => 188
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0271030
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.000783
Prover Time taken = 0.000724
Prover Time taken = 0.000639
Prover Time taken = 0.00064
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || (1 < data1 && data1 <= 2 && data1 - data2 <= 0 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.00133
Prover Time taken = 0.001302
Prover Time taken = 0.001397
Prover Time taken = 0.001378
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.0011
Prover Time taken = 0.001048
Prover Time taken = 0.001033
Prover Time taken = 0.001111
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.001151
Prover Time taken = 0.001344
Prover Time taken = 0.001884
Prover Time taken = 0.001197
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.000827
Prover Time taken = 0.000837
Prover Time taken = 0.000808
Prover Time taken = 0.000804
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 2
}
Prover Time taken = 0.001085
Prover Time taken = 0.001132
Prover Time taken = 0.001076
Prover Time taken = 0.000906
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.000866
Prover Time taken = 0.001158
Prover Time taken = 0.000943
Prover Time taken = 0.000908
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || (1 < data1 && data1 <= 2 && data1 - data2 <= 0 && -1 < data1 - data2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  data1 - data2 <= -1 && 0 < data1
}
Prover Time taken = 0.001843
Prover Time taken = 0.003128
Added Horn clause: 203 => 186
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0242190
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.000976
Prover Time taken = 0.000958
Prover Time taken = 0.000995
Prover Time taken = 0.000928
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || (1 < data1 && data1 <= 2 && data1 - data2 <= 0) || (1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.001608
Prover Time taken = 0.003779
Added Horn clause: 213 && 214 => 215
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0303630
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001198
Prover Time taken = 0.001061
Prover Time taken = 0.000892
Prover Time taken = 0.001076
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || (1 < data1 && data1 <= 2 && data1 - data2 <= 0) || (1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001736
Prover Time taken = 0.001574
Prover Time taken = 0.001453
Prover Time taken = 0.001399
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 1 && 3 < data1) || (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 <= 1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data2 <= 0
}
Prover Time taken = 0.001329
Prover Time taken = 0.002978
Added Horn clause: 216 && 89 => 146
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0306230
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1)
}
Prover Time taken = 0.00081
Prover Time taken = 0.00096
Prover Time taken = 0.000844
Prover Time taken = 0.000841
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || (1 < data1 && data1 <= 2 && data1 - data2 <= 0) || (1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1)
}
Prover Time taken = 0.001971
Prover Time taken = 0.001807
Prover Time taken = 0.001905
Prover Time taken = 0.001783
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 1 && 4 < data1 + data2) || (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 <= 1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1)
}
Prover Time taken = 0.001603
Prover Time taken = 0.001513
Prover Time taken = 0.003932
Added Horn clause: 217 && 218 => 219
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0245280
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && 3 < data1 - data2)
}
Prover Time taken = 0.000921
Prover Time taken = 0.001129
Added Horn clause: 220 && 221 => 
Prover Time taken = 0.002546
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0284980
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1) || (1 < data1 && 2 < data1 + data2 && -1 < data2 && data2 <= 0) || (1 < data1 && 2 < data1 + data2 && -1 < data2 && 0 < data2 && 3 < data1 - data2 && data2 <= 1)
}
Prover Time taken = 0.001337
Prover Time taken = 0.001629
Prover Time taken = 0.001196
Prover Time taken = 0.001222
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || (1 < data1 && data1 <= 2 && data1 - data2 <= 0) || (1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1) || (1 < data1 && 2 < data1 + data2 && -1 < data2 && data2 <= 0) || (1 < data1 && 2 < data1 + data2 && -1 < data2 && 0 < data2 && 3 < data1 - data2 && data2 <= 1)
}
Prover Time taken = 0.002719
Prover Time taken = 0.002652
Prover Time taken = 0.002634
Prover Time taken = 0.002765
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 1 && 4 < data1 + data2) || (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 <= 1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1) || (1 < data1 && 2 < data1 + data2 && -1 < data2 && data2 <= 0) || (1 < data1 && 2 < data1 + data2 && -1 < data2 && 0 < data2 && 3 < data1 - data2 && data2 <= 1)
}
Prover Time taken = 0.002723
Prover Time taken = 0.004266
Added Horn clause: 222 && 146 => 113
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0280680
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1 && data1 + data2 <= 3)
}
Prover Time taken = 0.000881
Prover Time taken = 0.000924
Prover Time taken = 0.000917
Prover Time taken = 0.000984
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || (1 < data1 && data1 <= 2 && data1 - data2 <= 0) || (1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1 && data1 + data2 <= 3)
}
Prover Time taken = 0.001719
Prover Time taken = 0.003508
Added Horn clause: 223 && 215 => 175
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0239590
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1 && data1 + data2 <= 4)
}
Prover Time taken = 0.000899
Prover Time taken = 0.000952
Prover Time taken = 0.000996
Prover Time taken = 0.000905
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || (1 < data1 && data1 <= 2 && data1 - data2 <= 0) || (1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1 && data1 + data2 <= 4)
}
Prover Time taken = 0.001616
Prover Time taken = 0.001945
Prover Time taken = 0.003988
Added Horn clause: 224 && 175 => 218
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0252470
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1) || (1 < data1 && 2 < data1 + data2 && -1 < data2 && data2 <= 2 && 3 < data1)
}
Prover Time taken = 0.000979
Prover Time taken = 0.001049
Prover Time taken = 0.001447
Prover Time taken = 0.001024
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || (1 < data1 && data1 <= 2 && data1 - data2 <= 0) || (1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1) || (1 < data1 && 2 < data1 + data2 && -1 < data2 && data2 <= 2 && 3 < data1)
}
Prover Time taken = 0.001732
Prover Time taken = 0.001722
Prover Time taken = 0.002208
Prover Time taken = 0.001744
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 1 && 4 < data1 + data2) || (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 <= 1) || (2 < data1 + data2 && 1 < data2 && 2 < data1 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1) || (1 < data1 && 2 < data1 + data2 && -1 < data2 && data2 <= 2 && 3 < data1)
}
Prover Time taken = 0.001876
Prover Time taken = 0.002387
Prover Time taken = 0.002543
Prover Time taken = 0.002481
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data2 <= 2
}
Prover Time taken = 0.000845
Prover Time taken = 0.001359
Prover Time taken = 0.00147
Prover Time taken = 0.001307
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 4
}
Prover Time taken = 0.001031
Prover Time taken = 0.001022
Prover Time taken = 0.000847
Prover Time taken = 0.001204
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 4
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1) || (1 < data1 && 2 < data1 + data2 && -1 < data2 && data2 <= 2 && 3 < data1)
}
Prover Time taken = 0.001245
Prover Time taken = 0.001634
Prover Time taken = 0.001467
Prover Time taken = 0.001332
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 1 && 4 < data1 + data2) || (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 <= 1) || (2 < data1 + data2 && 1 < data2 && 2 < data1 && data1 <= 3)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.001422
Prover Time taken = 0.002884
Added Horn clause: 222 => 112
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0284200
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1)
}
Prover Time taken = 0.001267
Prover Time taken = 0.001311
Prover Time taken = 0.001132
Prover Time taken = 0.001118
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || (1 < data1 && data1 <= 2 && data1 - data2 <= 0) || (1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1)
}
Prover Time taken = 0.002044
Prover Time taken = 0.002103
Prover Time taken = 0.00175
Prover Time taken = 0.00181
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 1 && 4 < data1 + data2 && data1 <= 4) || (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 <= 1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1)
}
Prover Time taken = 0.003123
Prover Time taken = 0.001501
Prover Time taken = 0.001459
Prover Time taken = 0.001521
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 4
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 2) || (1 < data1 && 2 < data1 + data2 && data2 <= -1)
}
Prover Time taken = 0.001074
Prover Time taken = 0.000965
Prover Time taken = 0.001758
Prover Time taken = 0.001761
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 1 && 4 < data1 + data2 && data1 <= 4) || (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 <= 1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.001316
Prover Time taken = 0.002251
Added Horn clause: 200 => 26
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0250420
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.000866
Prover Time taken = 0.000894
Prover Time taken = 0.00115
Prover Time taken = 0.000832
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || (1 < data1 && data1 <= 2 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.001414
Prover Time taken = 0.001323
Prover Time taken = 0.001095
Prover Time taken = 0.001241
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 <= 1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.001132
Prover Time taken = 0.001159
Prover Time taken = 0.001238
Prover Time taken = 0.001186
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 4
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.000896
Prover Time taken = 0.000853
Prover Time taken = 0.000863
Prover Time taken = 0.000877
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 <= 1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.000946
Prover Time taken = 0.000991
Prover Time taken = 0.000989
Prover Time taken = 0.000914
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || (1 < data1 && data1 <= 2 && data1 - data2 <= 0)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 <= 1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
Prover Time taken = 0.002035
Prover Time taken = 0.002622
Added Horn clause: 225 => 123
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0333110
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 - data2 <= -1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.001279
Prover Time taken = 0.001115
Prover Time taken = 0.00121
Prover Time taken = 0.001603
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 - data2 <= -1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.000913
Prover Time taken = 0.000869
Prover Time taken = 0.001311
Prover Time taken = 0.001298
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || (1 < data1 && data1 <= 2 && data1 - data2 <= 0)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 - data2 <= -1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
Prover Time taken = 0.001442
Prover Time taken = 0.001322
Prover Time taken = 0.001273
Prover Time taken = 0.001353
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 - data2 <= -1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data2 <= 2
}
Prover Time taken = 0.001676
Prover Time taken = 0.001563
Prover Time taken = 0.001602
Prover Time taken = 0.001345
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 - data2 <= -1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 4
}
Prover Time taken = 0.001496
Prover Time taken = 0.001541
Prover Time taken = 0.004936
Prover Time taken = 0.001805
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 - data2 <= -1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data2 <= 2
}
Prover Time taken = 0.00141
Prover Time taken = 0.003486
Added Horn clause: 6 && 81 => 57
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0292190
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data2 <= 3
}
Prover Time taken = 0.000973
Prover Time taken = 0.001109
Prover Time taken = 0.00105
Prover Time taken = 0.000922
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 - data2 <= -1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data2 <= 3
}
Prover Time taken = 0.001912
Prover Time taken = 0.001871
Prover Time taken = 0.001639
Prover Time taken = 0.001871
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 <= 2 && data1 - data2 <= -1) || (2 < data1 + data2 && 1 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data2 <= 3
}
Prover Time taken = 0.001349
Prover Time taken = 0.003023
Added Horn clause: 226 && 174 => 163
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0250990
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 + data2 <= 3) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && data2 <= 2 && 0 < data1 - data2) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.001755
Prover Time taken = 0.001581
Prover Time taken = 0.001624
Prover Time taken = 0.00147
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data2 <= 4
}
Prover Time taken = 0.000852
Prover Time taken = 0.000958
Prover Time taken = 0.001018
Prover Time taken = 0.001035
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 + data2 <= 3) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && data2 <= 2 && 0 < data1 - data2) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && 2 < data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
Prover Time taken = 0.00133
Prover Time taken = 0.001331
Prover Time taken = 0.001093
Prover Time taken = 0.001084
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || (1 < data1 && data1 <= 2 && data1 - data2 <= 0)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 + data2 <= 3) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && data2 <= 2 && 0 < data1 - data2) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && 2 < data2)
}
Prover Time taken = 0.002102
Prover Time taken = 0.001962
Prover Time taken = 0.001711
Prover Time taken = 0.001725
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 + data2 <= 3) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && data2 <= 2 && 0 < data1 - data2) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data2 <= 4
}
Prover Time taken = 0.002035
Prover Time taken = 0.001606
Prover Time taken = 0.001588
Prover Time taken = 0.002051
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 + data2 <= 3) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && data2 <= 2 && 0 < data1 - data2) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && 2 < data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 4
}
Prover Time taken = 0.002041
Prover Time taken = 0.002061
Prover Time taken = 0.002295
Prover Time taken = 0.00231
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 + data2 <= 3) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && data2 <= 2 && 0 < data1 - data2) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data2 <= 4
}
Prover Time taken = 0.001499
Prover Time taken = 0.003181
Added Horn clause: 122 && 227 => 228
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0277150
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && -3 < data1 - data2
}
Prover Time taken = 0.000859
Prover Time taken = 0.000834
Prover Time taken = 0.000897
Prover Time taken = 0.000894
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 + data2 <= 3) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && data2 <= 2 && 0 < data1 - data2) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && -3 < data1 - data2
}
Prover Time taken = 0.003326
Prover Time taken = 0.002175
Prover Time taken = 0.001849
Prover Time taken = 0.001884
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 + data2 <= 3) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && data2 <= 2 && 0 < data1 - data2) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && -3 < data1 - data2
}
Prover Time taken = 0.001371
Prover Time taken = 0.003099
Added Horn clause: 9 && 57 => 229
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0287260
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.001058
Prover Time taken = 0.001296
Prover Time taken = 0.001262
Prover Time taken = 0.001195
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 + data2 <= 3) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && data2 <= 2 && 0 < data1 - data2) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.00209
Prover Time taken = 0.002329
Prover Time taken = 0.002026
Prover Time taken = 0.00188
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && 1 < data2 && data1 + data2 <= 3) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && data2 <= 2 && 0 < data1 - data2) || (2 < data1 + data2 && 1 < data2 && 3 < data1 + data2 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.001724
Prover Time taken = 0.001619
Prover Time taken = 0.001593
Prover Time taken = 0.001163
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 4
}
Prover Time taken = 0.000928
Prover Time taken = 0.000806
Prover Time taken = 0.000788
Prover Time taken = 0.000774
Verifying P0_Stable_t2_s2: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (data1 <= 1 && -1 < data1 && data1 - data2 <= -2) || (1 < data1 && data1 <= 2 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 + data2 <= 4
}
Prover Time taken = 0.002953
Added Horn clause: 203 && 14 => 38
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0301950
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1 && 0 < data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4) || (1 < data1 && 4 < data1 + data2 && data1 <= 2) || (1 < data1 && 4 < data1 + data2 && 2 < data1 && 3 < data1 - data2 && data2 <= 1)
}
Prover Time taken = 0.001341
Added Horn clause: 93 && 146 => 
Prover Time taken = 0.00346
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0271750
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4) || (1 < data1 && 4 < data1 + data2 && data1 <= 2) || (1 < data1 && 4 < data1 + data2 && 2 < data1 && 3 < data1 - data2 && data2 <= 1)
}
Prover Time taken = 0.004215
Prover Time taken = 0.002022
Prover Time taken = 0.001763
Prover Time taken = 0.001819
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (-1 < data1 && data1 <= 0 && 1 < data2) || (-1 < data1 && 0 < data1 && data2 <= 0) || (-1 < data1 && 0 < data1 && 0 < data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4) || (1 < data1 && 4 < data1 + data2 && data1 <= 2) || (1 < data1 && 4 < data1 + data2 && 2 < data1 && 3 < data1 - data2 && data2 <= 1)
}
Prover Time taken = 0.001756
Prover Time taken = 0.003009
Added Horn clause: 203 && 47 => 83
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0262130
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 1) || (1 < data1 && 1 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001851
Prover Time taken = 0.001621
Prover Time taken = 0.001184
Prover Time taken = 0.001157
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (-1 < data1 && data1 <= 0 && 1 < data2) || (-1 < data1 && 0 < data1 && data2 <= 0) || (-1 < data1 && 0 < data1 && 0 < data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 1) || (1 < data1 && 1 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001959
Prover Time taken = 0.001427
Prover Time taken = 0.001874
Prover Time taken = 0.001991
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 2 < data2 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 1) || (1 < data1 && 1 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001602
Prover Time taken = 0.001512
Prover Time taken = 0.001507
Prover Time taken = 0.001584
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.001528
Prover Time taken = 0.003257
Added Horn clause: 103 && 230 => 93
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0342890
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001517
Prover Time taken = 0.001464
Prover Time taken = 0.001312
Prover Time taken = 0.001291
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (-1 < data1 && data1 <= 0 && 1 < data2) || (-1 < data1 && 0 < data1 && data2 <= 0 && data2 <= -1) || (-1 < data1 && 0 < data1 && data2 <= 0 && -1 < data2 && data1 <= 2) || (-1 < data1 && 0 < data1 && 0 < data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002584
Prover Time taken = 0.004211
Added Horn clause: 231 && 13 => 214
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0367740
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (-1 < data1 && data1 <= 0 && 1 < data2) || (-1 < data1 && 0 < data1 && data2 <= 0 && -1 < data2 && data1 <= 2) || (-1 < data1 && 0 < data1 && 0 < data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.003748
Prover Time taken = 0.001917
Prover Time taken = 0.001628
Prover Time taken = 0.001774
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 2 < data2 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001915
Prover Time taken = 0.003582
Prover Time taken = 0.002096
Prover Time taken = 0.002529
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.001601
Prover Time taken = 0.001678
Prover Time taken = 0.001828
Prover Time taken = 0.00156
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 <= 2
}
Prover Time taken = 0.001528
Prover Time taken = 0.001569
Prover Time taken = 0.001883
Prover Time taken = 0.002049
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002758
Added Horn clause: 232 => 52
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0309430
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 <= 4) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.00154
Added Horn clause: 151 && 91 => 
Prover Time taken = 0.003396
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0302070
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 + data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001564
Prover Time taken = 0.00146
Prover Time taken = 0.001473
Prover Time taken = 0.001687
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (-1 < data1 && data1 <= 0 && 1 < data2) || (-1 < data1 && 0 < data1 && data2 <= 0 && -1 < data2 && data1 <= 2) || (-1 < data1 && 0 < data1 && 0 < data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 + data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001873
Prover Time taken = 0.001938
Prover Time taken = 0.00204
Prover Time taken = 0.002092
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 2 < data2 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 + data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.003519
Prover Time taken = 0.003334
Added Horn clause: 233 && 215 => 91
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0287340
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001444
Prover Time taken = 0.001397
Prover Time taken = 0.001577
Prover Time taken = 0.002344
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (-1 < data1 && data1 <= 0 && 1 < data2) || (-1 < data1 && 0 < data1 && data2 <= 0 && -1 < data2 && data1 <= 2) || (-1 < data1 && 0 < data1 && 0 < data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002315
Prover Time taken = 0.002413
Prover Time taken = 0.002514
Prover Time taken = 0.001796
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 2 < data2 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001924
Prover Time taken = 0.002493
Prover Time taken = 0.002476
Prover Time taken = 0.002799
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001219
Prover Time taken = 0.002271
Added Horn clause: 234 => 47
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0364160
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.00188
Prover Time taken = 0.001675
Prover Time taken = 0.00163
Prover Time taken = 0.001629
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (-1 < data1 && data1 <= 0 && 1 < data2) || (-1 < data1 && 0 < data1 && data2 <= 0 && -1 < data2 && data1 <= 2) || (-1 < data1 && 0 < data1 && 0 < data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002229
Prover Time taken = 0.002191
Prover Time taken = 0.003987
Prover Time taken = 0.002182
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 2 < data2 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002209
Prover Time taken = 0.002146
Prover Time taken = 0.00472
Prover Time taken = 0.002435
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
Prover Time taken = 0.002099
Prover Time taken = 0.002454
Prover Time taken = 0.002093
Prover Time taken = 0.002083
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001922
Prover Time taken = 0.002166
Prover Time taken = 0.00163
Prover Time taken = 0.00141
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 2 < data2 && data1 <= 3)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
Prover Time taken = 0.002053
Prover Time taken = 0.003489
Added Horn clause: 226 => 162
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0333320
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 2 < data2 && data2 <= 4 && data2 <= 3 && 0 < data1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 2 < data2 && 4 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002356
Prover Time taken = 0.003338
Prover Time taken = 0.003072
Prover Time taken = 0.003023
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 2 < data2 && data2 <= 4 && data2 <= 3 && 0 < data1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 2 < data2 && 4 < data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
Prover Time taken = 0.002051
Prover Time taken = 0.003817
Added Horn clause: 9 => 235
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0353920
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2 && -2 < data1 - data2)
}
Prover Time taken = 0.001704
Prover Time taken = 0.001711
Prover Time taken = 0.001976
Prover Time taken = 0.001787
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (-1 < data1 && data1 <= 0 && 1 < data2) || (-1 < data1 && 0 < data1 && data2 <= 0 && -1 < data2 && data1 <= 2) || (-1 < data1 && 0 < data1 && 0 < data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2 && -2 < data1 - data2)
}
Prover Time taken = 0.002712
Prover Time taken = 0.002848
Prover Time taken = 0.003674
Prover Time taken = 0.002138
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 2 < data2 && data2 <= 3 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 2 < data2 && 3 < data2 && data1 - data2 <= -2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2 && -2 < data1 - data2)
}
Prover Time taken = 0.002462
Prover Time taken = 0.002442
Prover Time taken = 0.00231
Prover Time taken = 0.002686
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.001498
Prover Time taken = 0.001769
Prover Time taken = 0.002066
Prover Time taken = 0.001861
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
Prover Time taken = 0.002056
Prover Time taken = 0.001869
Prover Time taken = 0.001977
Prover Time taken = 0.002384
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2 && -2 < data1 - data2)
}
Prover Time taken = 0.001322
Prover Time taken = 0.001339
Prover Time taken = 0.002924
Added Horn clause: 236 => 124
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0326980
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3 && -4 < data1 - data2)
}
Prover Time taken = 0.002385
Prover Time taken = 0.00255
Prover Time taken = 0.002507
Prover Time taken = 0.002439
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3 && -4 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2 && -2 < data1 - data2)
}
Prover Time taken = 0.001792
Prover Time taken = 0.00204
Prover Time taken = 0.001907
Prover Time taken = 0.001902
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 2 < data2 && data2 <= 3 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 2 < data2 && 3 < data2 && data1 - data2 <= -2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4)
}
Prover Time taken = 0.002721
Prover Time taken = 0.004572
Added Horn clause: 237 => 31
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0352940
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 1 < data1 && 2 < data1 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2 && -2 < data1 - data2)
}
Prover Time taken = 0.002081
Prover Time taken = 0.003123
Prover Time taken = 0.001978
Prover Time taken = 0.002541
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 1 < data1 && 2 < data1 && data1 <= 3)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4)
}
Prover Time taken = 0.001481
Prover Time taken = 0.003204
Added Horn clause: 238 => 167
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0314360
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 4 && data2 <= 3 && data2 <= 2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 4 && data2 <= 3 && data2 <= 2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 4 && data2 <= 3 && 2 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 4 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2 && -2 < data1 - data2)
}
Prover Time taken = 0.002416
Prover Time taken = 0.002926
Prover Time taken = 0.002362
Prover Time taken = 0.002705
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 4 && data2 <= 3 && data2 <= 2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 4 && data2 <= 3 && data2 <= 2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 4 && data2 <= 3 && 2 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 4 < data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4)
}
Prover Time taken = 0.002037
Prover Time taken = 0.00197
Prover Time taken = 0.00332
Added Horn clause: 184 => 239
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0342710
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2 && -2 < data1 - data2)
}
Prover Time taken = 0.001739
Prover Time taken = 0.001887
Prover Time taken = 0.001937
Prover Time taken = 0.001682
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.003995
Prover Time taken = 0.002996
Prover Time taken = 0.00272
Prover Time taken = 0.002499
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3 && -4 < data1 - data2)
}
Prover Time taken = 0.003151
Prover Time taken = 0.003348
Prover Time taken = 0.003028
Prover Time taken = 0.002237
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 4 && data2 <= 3 && data2 <= 2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 4 && data2 <= 3 && data2 <= 2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 4 && data2 <= 3 && 2 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 4 < data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 2 < data1)
}
Prover Time taken = 0.002406
Prover Time taken = 0.002529
Prover Time taken = 0.007385
Added Horn clause: 240 => 241
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0413530
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 0 < data1 && data1 <= 2 && data1 - data2 <= -4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 0 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2 && -2 < data1 - data2)
}
Prover Time taken = 0.001953
Prover Time taken = 0.002306
Prover Time taken = 0.002293
Prover Time taken = 0.002013
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 0 < data1 && data1 <= 2 && data1 - data2 <= -4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 0 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.003224
Prover Time taken = 0.003389
Prover Time taken = 0.003266
Prover Time taken = 0.003211
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 0 < data1 && data1 <= 2 && data1 - data2 <= -4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 0 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3 && -4 < data1 - data2)
}
Prover Time taken = 0.002443
Prover Time taken = 0.002611
Prover Time taken = 0.004169
Prover Time taken = 0.005433
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 4 && data2 <= 3 && data2 <= 2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 4 && data2 <= 3 && data2 <= 2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && data2 <= 4 && data2 <= 3 && 2 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 4 < data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 0 < data1 && data1 <= 2 && data1 - data2 <= -4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 0 < data1 && 2 < data1)
}
Prover Time taken = 0.002517
Prover Time taken = 0.002441
Prover Time taken = 0.004493
Added Horn clause: 242 => 243
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0401050
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && data1 <= 2 && 0 < data1 && data1 - data2 <= -4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2 && -2 < data1 - data2)
}
Prover Time taken = 0.002496
Prover Time taken = 0.002758
Prover Time taken = 0.002534
Prover Time taken = 0.002537
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && 0 < data1 && data2 <= 4 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && 0 < data1 && 4 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2 && -2 < data1 - data2)
}
Prover Time taken = 0.002545
Prover Time taken = 0.003014
Prover Time taken = 0.002795
Prover Time taken = 0.003389
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && data1 <= 2 && 0 < data1 && data1 - data2 <= -4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.002334
Prover Time taken = 0.002502
Prover Time taken = 0.002469
Prover Time taken = 0.003338
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && data1 <= 2 && 0 < data1 && data1 - data2 <= -4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3 && -4 < data1 - data2)
}
Prover Time taken = 0.002981
Prover Time taken = 0.002662
Prover Time taken = 0.003276
Prover Time taken = 0.002951
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && 0 < data1 && data2 <= 4 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && 0 < data1 && 4 < data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && data1 <= 2 && 0 < data1 && data1 - data2 <= -4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && 2 < data1)
}
Prover Time taken = 0.007392
Prover Time taken = 0.003801
Prover Time taken = 0.002882
Prover Time taken = 0.002881
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (-1 < data1 && data1 <= 0 && 1 < data2) || (-1 < data1 && 0 < data1 && data2 <= 0 && -1 < data2 && data1 <= 2) || (-1 < data1 && 0 < data1 && 0 < data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && 0 < data1 && data2 <= 4 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && 0 < data1 && 4 < data2)
}
Prover Time taken = 0.003311
Added Horn clause: 244 => 40
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0329710
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 4 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 4 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 4 && 3 < data2) || (3 < data1 + data2 && 2 < data2 && 4 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2 && -2 < data1 - data2)
}
Prover Time taken = 0.002445
Prover Time taken = 0.002087
Prover Time taken = 0.002362
Prover Time taken = 0.001799
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 <= 0) || (1 < data1 + data2 && 0 < data1 && data2 <= 0 && data2 <= -1) || (1 < data1 + data2 && 0 < data1 && data2 <= 0 && -1 < data2 && data1 <= 2) || (1 < data1 + data2 && 0 < data1 && 0 < data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2 && -2 < data1 - data2)
}
Prover Time taken = 0.002514
Prover Time taken = 0.0056
Prover Time taken = 0.0034
Prover Time taken = 0.0032
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2 && -2 < data1 - data2)
}
Prover Time taken = 0.003027
Prover Time taken = 0.002875
Prover Time taken = 0.002845
Prover Time taken = 0.002346
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 4 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 4 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 4 && 3 < data2) || (3 < data1 + data2 && 2 < data2 && 4 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.002563
Prover Time taken = 0.002194
Prover Time taken = 0.002149
Prover Time taken = 0.002173
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 4 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 4 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 4 && 3 < data2) || (3 < data1 + data2 && 2 < data2 && 4 < data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3 && -4 < data1 - data2)
}
Prover Time taken = 0.002221
Prover Time taken = 0.002534
Prover Time taken = 0.002499
Prover Time taken = 0.004044
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 2 < data1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 4 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 4 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 4 && 3 < data2) || (3 < data1 + data2 && 2 < data2 && 4 < data2 && 2 < data1)
}
Prover Time taken = 0.002163
Prover Time taken = 0.00343
Added Horn clause: 245 => 54
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0342930
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1 && data2 <= 3) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1 && 3 < data2 && 4 < data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2 && -2 < data1 - data2)
}
Prover Time taken = 0.002394
Prover Time taken = 0.002691
Prover Time taken = 0.003093
Prover Time taken = 0.002539
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1 && data2 <= 3) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1 && 3 < data2 && 4 < data2) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 2 < data1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 4 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 4 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 4 && 3 < data2) || (3 < data1 + data2 && 2 < data2 && 4 < data2 && 2 < data1)
}
Prover Time taken = 0.00205
Prover Time taken = 0.001901
Prover Time taken = 0.00445
Added Horn clause: 183 => 246
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0349150
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && 0 < data1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && 0 < data1 && 1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001961
Prover Time taken = 0.002018
Prover Time taken = 0.001989
Prover Time taken = 0.001958
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 <= 0) || (1 < data1 + data2 && 0 < data1 && data2 <= 0 && data2 <= -1) || (1 < data1 + data2 && 0 < data1 && data2 <= 0 && -1 < data2 && data1 <= 2) || (1 < data1 + data2 && 0 < data1 && 0 < data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002202
Prover Time taken = 0.002639
Prover Time taken = 0.002411
Prover Time taken = 0.002303
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002588
Prover Time taken = 0.002879
Prover Time taken = 0.002581
Prover Time taken = 0.003052
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && 0 < data1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && 0 < data1 && 1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.001921
Prover Time taken = 0.002079
Prover Time taken = 0.001917
Prover Time taken = 0.001939
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && 0 < data1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && 0 < data1 && 1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
Prover Time taken = 0.00201
Prover Time taken = 0.002037
Prover Time taken = 0.002026
Prover Time taken = 0.001782
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.0018
Prover Time taken = 0.001795
Prover Time taken = 0.001979
Prover Time taken = 0.001404
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 2 < data1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && 0 < data1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && 0 < data1 && 1 < data1 && 2 < data1)
}
Prover Time taken = 0.001641
Prover Time taken = 0.002071
Prover Time taken = 0.002468
Prover Time taken = 0.001781
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 <= 0) || (1 < data1 + data2 && 0 < data1 && data2 <= 0 && data2 <= -1) || (1 < data1 + data2 && 0 < data1 && data2 <= 0 && -1 < data2 && data1 <= 2) || (1 < data1 + data2 && 0 < data1 && 0 < data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && 1 < data2 && 0 < data1 && 1 < data1 && 2 < data1)
}
Prover Time taken = 0.001601
Prover Time taken = 0.002837
Added Horn clause: 247 => 226
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0323890
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1)
}
Prover Time taken = 0.001625
Prover Time taken = 0.001948
Prover Time taken = 0.001682
Prover Time taken = 0.001696
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data1 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1)
}
Prover Time taken = 0.002611
Prover Time taken = 0.0024
Prover Time taken = 0.002113
Prover Time taken = 0.002139
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && data1 + data2 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1)
}
Prover Time taken = 0.002906
Prover Time taken = 0.002914
Prover Time taken = 0.002763
Prover Time taken = 0.004754
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.002136
Prover Time taken = 0.002123
Prover Time taken = 0.002071
Prover Time taken = 0.002331
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && 4 < data2 && -4 < data1 - data2)
}
Prover Time taken = 0.001909
Prover Time taken = 0.002129
Prover Time taken = 0.00234
Prover Time taken = 0.002469
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && 4 < data2 && -4 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1)
}
Prover Time taken = 0.00208
Prover Time taken = 0.00188
Prover Time taken = 0.001627
Prover Time taken = 0.001485
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && data1 + data2 <= 3)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4)
}
Prover Time taken = 0.001606
Prover Time taken = 0.003137
Added Horn clause: 248 => 249
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0396990
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && data1 <= -1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1)
}
Prover Time taken = 0.001862
Prover Time taken = 0.001724
Prover Time taken = 0.001701
Prover Time taken = 0.001742
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && data1 <= -1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.001864
Prover Time taken = 0.001985
Prover Time taken = 0.002175
Prover Time taken = 0.002026
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && data1 <= -1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && 4 < data2 && -4 < data1 - data2)
}
Prover Time taken = 0.002061
Prover Time taken = 0.002149
Prover Time taken = 0.002097
Prover Time taken = 0.00222
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && data1 + data2 <= 3)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && data1 <= -1)
}
Prover Time taken = 0.001715
Prover Time taken = 0.001833
Prover Time taken = 0.002006
Prover Time taken = 0.001797
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data1 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && data1 + data2 <= 3)
}
Prover Time taken = 0.001984
Prover Time taken = 0.003072
Added Horn clause: 143 => 250
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0398180
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && data1 <= -1) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && -1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1)
}
Prover Time taken = 0.002374
Prover Time taken = 0.002536
Prover Time taken = 0.002382
Prover Time taken = 0.00256
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && data1 + data2 <= 3) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && 3 < data1 + data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1)
}
Prover Time taken = 0.004123
Prover Time taken = 0.003869
Prover Time taken = 0.004346
Prover Time taken = 0.003934
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && data1 <= -1) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && -1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.003953
Prover Time taken = 0.0036
Prover Time taken = 0.004566
Prover Time taken = 0.002944
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && data1 <= -1) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && -1 < data1 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && 4 < data2 && -4 < data1 - data2)
}
Prover Time taken = 0.003908
Prover Time taken = 0.004328
Prover Time taken = 0.003567
Prover Time taken = 0.002846
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && data1 + data2 <= 3) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && 3 < data1 + data2 && 2 < data1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && data2 <= 4) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && data1 <= -1) || (3 < data1 + data2 && 2 < data2 && 3 < data2 && 4 < data2 && -1 < data1 && 2 < data1)
}
Prover Time taken = 0.004604
Prover Time taken = 0.003576
Prover Time taken = 0.003597
Prover Time taken = 0.003269
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data1 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && data1 + data2 <= 3) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && 3 < data1 + data2 && 2 < data1)
}
Prover Time taken = 0.002543
Prover Time taken = 0.002622
Prover Time taken = 0.002816
Prover Time taken = 0.002002
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && data1 + data2 <= 3) || (2 < data1 + data2 && 0 < data2 && 2 < data2 && 3 < data1 + data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.002852
Prover Time taken = 0.004992
Added Horn clause: 226 && 174 => 123
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0416150
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002375
Prover Time taken = 0.002557
Prover Time taken = 0.002811
Prover Time taken = 0.002834
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.003858
Prover Time taken = 0.004224
Prover Time taken = 0.003716
Prover Time taken = 0.003409
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.003488
Prover Time taken = 0.00305
Prover Time taken = 0.003068
Prover Time taken = 0.003208
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.002278
Prover Time taken = 0.002365
Prover Time taken = 0.002461
Prover Time taken = 0.002282
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
Prover Time taken = 0.001997
Prover Time taken = 0.006386
Prover Time taken = 0.00208
Prover Time taken = 0.002833
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && data2 <= 0 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.00189
Prover Time taken = 0.001632
Prover Time taken = 0.001618
Prover Time taken = 0.001661
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
Prover Time taken = 0.00153
Prover Time taken = 0.001753
Prover Time taken = 0.001769
Prover Time taken = 0.001987
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
Prover Time taken = 0.001915
Prover Time taken = 0.002019
Prover Time taken = 0.002069
Prover Time taken = 0.00242
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.00227
Prover Time taken = 0.002418
Prover Time taken = 0.002524
Prover Time taken = 0.00237
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
Prover Time taken = 0.002547
Prover Time taken = 0.002573
Prover Time taken = 0.002511
Prover Time taken = 0.002243
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.002184
Prover Time taken = 0.001504
Prover Time taken = 0.001583
Prover Time taken = 0.001502
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
Prover Time taken = 0.001455
Prover Time taken = 0.00325
Added Horn clause: 251 => 252
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0436150
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002097
Prover Time taken = 0.002233
Prover Time taken = 0.002173
Prover Time taken = 0.002269
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002658
Prover Time taken = 0.003565
Prover Time taken = 0.003328
Prover Time taken = 0.005513
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002486
Prover Time taken = 0.003384
Prover Time taken = 0.003703
Prover Time taken = 0.003057
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= -4) || (1 < data1 && -4 < data2 && data1 <= 2 && data2 <= 2 && 0 < data2) || (1 < data1 && -4 < data2 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
Prover Time taken = 0.003792
Prover Time taken = 0.003484
Prover Time taken = 0.005679
Added Horn clause: 253 && 254 => 255
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0606300
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 <= 2) || (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && 2 < data1 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001905
Prover Time taken = 0.002735
Prover Time taken = 0.002919
Prover Time taken = 0.002547
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 <= 2) || (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && 2 < data1 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.003788
Prover Time taken = 0.00435
Prover Time taken = 0.003605
Prover Time taken = 0.004294
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 <= 2) || (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && 2 < data1 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.003162
Prover Time taken = 0.002665
Prover Time taken = 0.00251
Prover Time taken = 0.002918
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 3) || (1 < data1 && 3 < data1 + data2 && data1 <= 2 && data2 <= 2) || (1 < data1 && 3 < data1 + data2 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
Prover Time taken = 0.00323
Prover Time taken = 0.004249
Prover Time taken = 0.003457
Prover Time taken = 0.003065
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 3) || (1 < data1 && 3 < data1 + data2 && data1 <= 2 && data2 <= 2) || (1 < data1 && 3 < data1 + data2 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 <= 2) || (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && 2 < data1 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002175
Prover Time taken = 0.004126
Added Horn clause: 256 => 257
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0534720
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 <= 2) || (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && 2 < data1 && data2 <= -4) || (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && 2 < data1 && -4 < data2 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.003073
Prover Time taken = 0.003305
Added Horn clause: 258 && 259 => 
Prover Time taken = 0.006297
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0630000
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 + data2 <= 1) || (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && 1 < data1 + data2 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.003165
Prover Time taken = 0.003303
Prover Time taken = 0.003261
Prover Time taken = 0.003441
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 + data2 <= 1) || (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && 1 < data1 + data2 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002982
Prover Time taken = 0.004147
Prover Time taken = 0.004269
Prover Time taken = 0.004711
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 + data2 <= 1) || (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && 1 < data1 + data2 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002954
Prover Time taken = 0.002918
Prover Time taken = 0.002797
Prover Time taken = 0.003826
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 3) || (1 < data1 && 3 < data1 + data2 && data1 <= 2 && data2 <= 2) || (1 < data1 && 3 < data1 + data2 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && data1 + data2 <= 1) || (1 < data1 && data2 <= 0 && data1 + data2 <= 4 && 1 < data1 + data2 && data1 - data2 <= 3) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002203
Prover Time taken = 0.00217
Prover Time taken = 0.002234
Prover Time taken = 0.002723
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 0) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && 0 < data2 && data2 <= 2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 3) || (1 < data1 && 3 < data1 + data2 && data1 <= 2 && data2 <= 2) || (1 < data1 && 3 < data1 + data2 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
Prover Time taken = 0.002562
Prover Time taken = 0.004156
Added Horn clause: 260 && 256 => 261
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0435560
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1 && 0 < data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002176
Prover Time taken = 0.001714
Prover Time taken = 0.001832
Prover Time taken = 0.001831
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.003145
Prover Time taken = 0.002207
Prover Time taken = 0.002736
Prover Time taken = 0.002232
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 2 && data1 - data2 <= -1 && 0 < data1 && data1 <= 1 && data2 <= 2) || (2 < data1 && data1 + data2 <= 3) || (2 < data1 && 3 < data1 + data2 && 4 < data1 + data2 && data1 <= 3 && -2 < data1 - data2) || (2 < data1 && 3 < data1 + data2 && 4 < data1 + data2 && 3 < data1 && data1 <= 4 && 1 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002093
Prover Time taken = 0.00232
Prover Time taken = 0.002272
Prover Time taken = 0.002457
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1 && 0 < data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.001772
Prover Time taken = 0.002449
Prover Time taken = 0.001963
Prover Time taken = 0.0021
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1 && 0 < data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 3) || (1 < data1 && 3 < data1 + data2 && data1 <= 2 && data2 <= 2) || (1 < data1 && 3 < data1 + data2 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
Prover Time taken = 0.00267
Prover Time taken = 0.002281
Prover Time taken = 0.002168
Prover Time taken = 0.002017
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 3) || (1 < data1 && 3 < data1 + data2 && data1 <= 2 && data2 <= 2) || (1 < data1 && 3 < data1 + data2 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001402
Prover Time taken = 0.001484
Prover Time taken = 0.002137
Prover Time taken = 0.002172
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (data1 <= 2 && data1 - data2 <= -1 && 0 < data1 && data1 <= 1 && data2 <= 2) || (2 < data1 && data1 + data2 <= 3) || (2 < data1 && 3 < data1 + data2 && 4 < data1 + data2 && data1 <= 3 && -2 < data1 - data2) || (2 < data1 && 3 < data1 + data2 && 4 < data1 + data2 && 3 < data1 && data1 <= 4 && 1 < data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1 && 0 < data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
Prover Time taken = 0.00181
Prover Time taken = 0.004057
Added Horn clause: 262 => 87
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0414480
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002641
Prover Time taken = 0.001906
Prover Time taken = 0.00204
Prover Time taken = 0.001987
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 + data2 <= 3 && -1 < data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001856
Prover Time taken = 0.002639
Prover Time taken = 0.002636
Prover Time taken = 0.002823
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 + data2 <= 3 && -1 < data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1 && 0 < data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
Prover Time taken = 0.002271
Prover Time taken = 0.001929
Prover Time taken = 0.001718
Prover Time taken = 0.002021
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 + data2 <= 3 && -1 < data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
Prover Time taken = 0.0018
Prover Time taken = 0.003733
Added Horn clause: 213 => 233
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0409040
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 + data2 <= 3 && 2 < data1 + data2 && -2 < data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002015
Prover Time taken = 0.002211
Prover Time taken = 0.001913
Prover Time taken = 0.002076
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 + data2 <= 3 && 2 < data1 + data2 && -2 < data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1 && 0 < data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
Prover Time taken = 0.001603
Prover Time taken = 0.003478
Added Horn clause: 233 => 151
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0399320
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0 && -1 < data2) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001969
Prover Time taken = 0.002619
Prover Time taken = 0.002073
Prover Time taken = 0.002581
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 - data2 <= 3 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data2 <= 0) || (1 < data1 && 0 < data2 && data2 <= 2 && data2 <= 1 && data1 - data2 <= 2) || (1 < data1 && 0 < data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001878
Prover Time taken = 0.00184
Prover Time taken = 0.001675
Prover Time taken = 0.00182
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 - data2 <= 3 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1 && 0 < data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
Prover Time taken = 0.001653
Prover Time taken = 0.00176
Prover Time taken = 0.003538
Prover Time taken = 0.001676
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0 && -1 < data2) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 - data2 <= 3 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
Prover Time taken = 0.002329
Prover Time taken = 0.002559
Prover Time taken = 0.001739
Prover Time taken = 0.002366
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 - data2 <= 3 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.002087
Prover Time taken = 0.003601
Added Horn clause: 188 && 263 => 216
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0390800
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 <= 3 && data1 <= 2) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 <= 3 && 2 < data1 && -1 < data2) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001492
Prover Time taken = 0.001773
Prover Time taken = 0.001907
Prover Time taken = 0.001512
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 <= 3 && data1 <= 2) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 <= 3 && 2 < data1 && -1 < data2) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001927
Prover Time taken = 0.002143
Prover Time taken = 0.002284
Prover Time taken = 0.002921
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 <= 3 && data1 <= 2) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 <= 3 && 2 < data1 && -1 < data2) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002357
Prover Time taken = 0.004123
Prover Time taken = 0.003276
Prover Time taken = 0.003289
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.001507
Prover Time taken = 0.001596
Prover Time taken = 0.001762
Prover Time taken = 0.001648
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3) || (1 < data1 && 2 < data1 && data1 + data2 <= 1)
}
Prover Time taken = 0.001728
Prover Time taken = 0.001892
Prover Time taken = 0.002277
Prover Time taken = 0.002692
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3) || (1 < data1 && 2 < data1 && data1 + data2 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 <= 3 && data1 <= 2) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 <= 3 && 2 < data1 && -1 < data2) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001542
Prover Time taken = 0.003436
Added Horn clause: 264 => 265
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0395460
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001579
Prover Time taken = 0.001557
Prover Time taken = 0.001802
Prover Time taken = 0.001558
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002618
Prover Time taken = 0.003304
Prover Time taken = 0.002881
Prover Time taken = 0.002993
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002666
Prover Time taken = 0.004573
Added Horn clause: 266 && 267 => 268
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0416330
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001914
Prover Time taken = 0.001929
Prover Time taken = 0.001904
Prover Time taken = 0.002019
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002699
Prover Time taken = 0.002841
Prover Time taken = 0.002381
Prover Time taken = 0.002302
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002187
Prover Time taken = 0.004011
Added Horn clause: 269 && 268 => 270
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0491250
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && 0 < data1 + data2 && data1 + data2 <= 2 && 3 < data1) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001732
Prover Time taken = 0.001789
Prover Time taken = 0.001786
Prover Time taken = 0.001655
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && 0 < data1 + data2 && data1 + data2 <= 2 && 3 < data1) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.003448
Prover Time taken = 0.004427
Added Horn clause: 271 && 270 => 181
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0400000
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && 0 < data1 + data2 && data2 <= -2 && -4 < data2) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002108
Prover Time taken = 0.002207
Added Horn clause: 272 && 273 => 
Prover Time taken = 0.003694
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0408730
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && 0 < data1 + data2 && data1 + data2 <= 3 && data2 <= -2) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002036
Prover Time taken = 0.002124
Prover Time taken = 0.002485
Prover Time taken = 0.002022
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && 0 < data1 + data2 && data1 + data2 <= 3 && data2 <= -2) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002236
Prover Time taken = 0.002493
Prover Time taken = 0.002943
Prover Time taken = 0.003614
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && 0 < data1 + data2 && data1 + data2 <= 3 && data2 <= -2) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.00241
Prover Time taken = 0.005374
Added Horn clause: 260 && 181 => 175
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0432880
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0 && data1 + data2 <= -1) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0 && -1 < data1 + data2 && data1 <= 2) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001656
Prover Time taken = 0.001619
Prover Time taken = 0.001798
Prover Time taken = 0.001775
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0 && data1 + data2 <= -1) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0 && -1 < data1 + data2 && data1 <= 2) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002749
Prover Time taken = 0.002758
Prover Time taken = 0.002354
Prover Time taken = 0.002777
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0 && data1 + data2 <= -1) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0 && -1 < data1 + data2 && data1 <= 2) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.003132
Prover Time taken = 0.004847
Added Horn clause: 274 && 265 => 267
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0408250
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002085
Prover Time taken = 0.001456
Prover Time taken = 0.001383
Prover Time taken = 0.001494
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001968
Prover Time taken = 0.002087
Prover Time taken = 0.002034
Prover Time taken = 0.002088
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && 4 < data1 - data2 && data1 <= 4 && 0 < data1 + data2) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && 4 < data1 - data2 && 4 < data1) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002431
Prover Time taken = 0.004411
Added Horn clause: 275 && 86 => 257
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0382870
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001537
Prover Time taken = 0.001833
Prover Time taken = 0.001311
Prover Time taken = 0.001393
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002663
Prover Time taken = 0.002008
Prover Time taken = 0.002227
Prover Time taken = 0.002398
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data2 <= 0 && data1 <= 4 && 1 < data1 + data2) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data2 <= 0 && 4 < data1) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002086
Prover Time taken = 0.004485
Added Horn clause: 261 && 257 => 276
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0396900
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.00143
Prover Time taken = 0.001387
Prover Time taken = 0.001611
Prover Time taken = 0.001872
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001812
Prover Time taken = 0.003251
Prover Time taken = 0.002896
Prover Time taken = 0.003842
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data2 <= 0 && data1 <= 4 && 0 < data1 + data2) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data2 <= 0 && 4 < data1 && 0 < data1 + data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002345
Prover Time taken = 0.002261
Prover Time taken = 0.002232
Prover Time taken = 0.002505
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3) || (1 < data1 && 2 < data1 && data1 + data2 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001253
Prover Time taken = 0.001418
Prover Time taken = 0.003973
Prover Time taken = 0.002032
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data2 <= 0 && data1 <= 4 && 0 < data1 + data2) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data2 <= 0 && 4 < data1 && 0 < data1 + data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
Prover Time taken = 0.001672
Prover Time taken = 0.00415
Added Horn clause: 277 => 278
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0424360
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && data2 <= 2 && 1 < data2 && 0 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && 1 < data1 + data2 && data1 + data2 <= 2 && data2 <= -3) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001986
Prover Time taken = 0.002367
Prover Time taken = 0.002341
Prover Time taken = 0.002319
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && 1 < data1 + data2 && data1 + data2 <= 2 && data2 <= -3) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.003358
Prover Time taken = 0.003937
Prover Time taken = 0.005303
Added Horn clause: 279 && 276 => 280
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0449890
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && data2 <= 2 && 1 < data2 && 0 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && 1 < data1 + data2 && data2 <= -3 && data1 + data2 <= 3) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002421
Prover Time taken = 0.002539
Prover Time taken = 0.002317
Prover Time taken = 0.002369
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && 1 < data1 + data2 && data2 <= -3 && data1 + data2 <= 3) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.00383
Prover Time taken = 0.002663
Prover Time taken = 0.003419
Prover Time taken = 0.003466
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && data1 <= 4 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && data1 <= 4 && 2 < data1 && 3 < data1 && -2 < data2) || (0 < data1 && data2 <= 1 && 4 < data1) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && 1 < data1 + data2 && data2 <= -3 && data1 + data2 <= 3) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.00596
Prover Time taken = 0.004343
Added Horn clause: 281 && 276 => 181
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0449460
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && data2 <= 2 && 1 < data2 && 0 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1 && data1 <= 4) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001806
Prover Time taken = 0.00166
Prover Time taken = 0.001474
Prover Time taken = 0.001547
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1 && data1 <= 4) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.00192
Prover Time taken = 0.002675
Prover Time taken = 0.002691
Prover Time taken = 0.003206
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && data1 <= 4 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && data1 <= 4 && 2 < data1 && 3 < data1 && -2 < data2) || (0 < data1 && data2 <= 1 && 4 < data1) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1 && data1 <= 4) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002672
Prover Time taken = 0.002962
Prover Time taken = 0.002937
Prover Time taken = 0.002953
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && data2 <= 2 && 1 < data2 && 0 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.00162
Prover Time taken = 0.002423
Prover Time taken = 0.002108
Prover Time taken = 0.002541
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && data2 <= 2 && 1 < data2 && 0 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3) || (1 < data1 && 2 < data1 && data1 + data2 <= 1)
}
Prover Time taken = 0.002732
Prover Time taken = 0.00257
Prover Time taken = 0.002543
Prover Time taken = 0.002518
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3) || (1 < data1 && 2 < data1 && data1 + data2 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1 && data1 <= 4) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001458
Prover Time taken = 0.001518
Prover Time taken = 0.002997
Added Horn clause: 252 => 282
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0438730
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && data2 <= 2 && 1 < data2 && 0 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1 && data1 + data2 <= -1) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1 && -1 < data1 + data2 && data1 <= 2) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001841
Prover Time taken = 0.002535
Prover Time taken = 0.001672
Prover Time taken = 0.00181
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1 && data1 + data2 <= -1) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1 && -1 < data1 + data2 && data1 <= 2) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002964
Prover Time taken = 0.002837
Prover Time taken = 0.003093
Prover Time taken = 0.002957
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && data1 <= 4 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && data1 <= 4 && 2 < data1 && 3 < data1 && -2 < data2) || (0 < data1 && data2 <= 1 && 4 < data1) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1 && data1 + data2 <= -1) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1 && -1 < data1 + data2 && data1 <= 2) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002442
Prover Time taken = 0.003205
Prover Time taken = 0.005228
Added Horn clause: 283 && 282 => 86
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0454690
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1 && -1 < data2) || (3 < data1 + data2 && data2 <= 2 && 1 < data2 && 0 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data2 <= -2) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && -2 < data2 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && -2 < data2 && 3 < data1 - data2 && 4 < data1) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.00214
Prover Time taken = 0.00289
Prover Time taken = 0.001946
Prover Time taken = 0.002652
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data2 <= -2) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && -2 < data2 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && -2 < data2 && 3 < data1 - data2 && 4 < data1) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.004099
Prover Time taken = 0.00361
Prover Time taken = 0.003867
Prover Time taken = 0.003969
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && data1 <= 4 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && data1 <= 4 && 2 < data1 && 3 < data1 && -2 < data2) || (0 < data1 && data2 <= 1 && 4 < data1) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data2 <= -2) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && -2 < data2 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && -2 < data2 && 3 < data1 - data2 && 4 < data1) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.007415
Prover Time taken = 0.0058
Added Horn clause: 284 && 175 => 89
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0556890
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002776
Prover Time taken = 0.001622
Prover Time taken = 0.002017
Prover Time taken = 0.002282
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.003429
Prover Time taken = 0.004272
Prover Time taken = 0.004682
Prover Time taken = 0.003946
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && data1 <= 4 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && data1 <= 4 && 2 < data1 && 3 < data1 && 3 < data1 - data2 && -2 < data2) || (0 < data1 && data2 <= 1 && 4 < data1 && data1 + data2 <= -1) || (0 < data1 && data2 <= 1 && 4 < data1 && -1 < data1 + data2 && data2 <= 0 && 0 < data1 + data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002864
Prover Time taken = 0.003302
Prover Time taken = 0.003006
Prover Time taken = 0.004686
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.001726
Prover Time taken = 0.002323
Prover Time taken = 0.001964
Prover Time taken = 0.001759
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3) || (1 < data1 && 2 < data1 && data1 + data2 <= 1)
}
Prover Time taken = 0.002538
Prover Time taken = 0.002789
Prover Time taken = 0.002215
Prover Time taken = 0.001954
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3) || (1 < data1 && 2 < data1 && data1 + data2 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001616
Prover Time taken = 0.001763
Prover Time taken = 0.001851
Prover Time taken = 0.00211
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && data1 <= 4 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && data1 <= 4 && 2 < data1 && 3 < data1 && 3 < data1 - data2 && -2 < data2) || (0 < data1 && data2 <= 1 && 4 < data1 && data1 + data2 <= -1) || (0 < data1 && data2 <= 1 && 4 < data1 && -1 < data1 + data2 && data2 <= 0 && 0 < data1 + data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
Prover Time taken = 0.002277
Prover Time taken = 0.006034
Added Horn clause: 281 => 285
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0524900
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && data2 <= 2 && 1 < data2 && 0 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001863
Prover Time taken = 0.00262
Prover Time taken = 0.001771
Prover Time taken = 0.001745
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && 3 < data1 && -2 < data2) || (0 < data1 && data2 <= 1 && 4 < data1 + data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 0) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002673
Prover Time taken = 0.003281
Prover Time taken = 0.002741
Prover Time taken = 0.002842
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && data2 <= 2 && 1 < data2 && 0 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.001941
Prover Time taken = 0.002695
Prover Time taken = 0.00208
Prover Time taken = 0.0025
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && data2 <= 2 && 1 < data2 && 0 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3) || (1 < data1 && 2 < data1 && data1 + data2 <= 1)
}
Prover Time taken = 0.002186
Prover Time taken = 0.002294
Prover Time taken = 0.002424
Prover Time taken = 0.002202
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && 3 < data1 && -2 < data2) || (0 < data1 && data2 <= 1 && 4 < data1 + data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && data2 <= 2 && 1 < data2 && 0 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
Prover Time taken = 0.002616
Prover Time taken = 0.002928
Prover Time taken = 0.002818
Prover Time taken = 0.002886
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && 3 < data1 && -2 < data2) || (0 < data1 && data2 <= 1 && 4 < data1 + data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
Prover Time taken = 0.002406
Prover Time taken = 0.003658
Added Horn clause: 271 => 260
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0478200
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && data2 <= 2 && 1 < data2 && 0 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001931
Prover Time taken = 0.001797
Prover Time taken = 0.001868
Prover Time taken = 0.001742
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.003171
Prover Time taken = 0.00336
Prover Time taken = 0.003033
Prover Time taken = 0.003186
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && data1 + data2 <= 4 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 4 < data1 + data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.002464
Prover Time taken = 0.002311
Prover Time taken = 0.002235
Prover Time taken = 0.002436
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3) || (1 < data1 && 2 < data1 && data1 + data2 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && data1 - data2 <= 3) || (1 < data1 && data1 + data2 <= 4 && data2 <= 1 && 3 < data1 - data2 && data1 + data2 <= 1) || (1 < data1 && 4 < data1 + data2 && 2 < data2 && data1 <= 2)
}
Prover Time taken = 0.001521
Prover Time taken = 0.00188
Prover Time taken = 0.002199
Prover Time taken = 0.001618
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && data1 + data2 <= 4 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 4 < data1 + data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data2 <= 1) || (3 < data1 + data2 && data2 <= 2 && 1 < data2 && 0 < data1 - data2) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && data1 - data2 <= -1 && data1 <= 1) || (3 < data1 + data2 && 2 < data2 && data2 <= 3 && -1 < data1 - data2)
}
Prover Time taken = 0.001765
Prover Time taken = 0.001944
Prover Time taken = 0.001858
Prover Time taken = 0.001829
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && -1 < data1 - data2 && data1 <= 2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && data1 + data2 <= 4 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 4 < data1 + data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
Prover Time taken = 0.00186
Prover Time taken = 0.001986
Prover Time taken = 0.002054
Prover Time taken = 0.002693
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && data1 + data2 <= 4 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 4 < data1 + data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.001999
Prover Time taken = 0.001973
Prover Time taken = 0.001782
Prover Time taken = 0.001863
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && data1 + data2 <= 4 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 4 < data1 + data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3) || (1 < data1 && 2 < data1 && data1 + data2 <= 1)
}
Prover Time taken = 0.002657
Prover Time taken = 0.00292
Prover Time taken = 0.003115
Prover Time taken = 0.002882
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && data1 + data2 <= 4 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 4 < data1 + data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
Prover Time taken = 0.003156
Prover Time taken = 0.001923
Prover Time taken = 0.001587
Prover Time taken = 0.001595
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (1 < data1 && data1 <= 2 && data2 <= 2) || (1 < data1 && data1 <= 2 && 2 < data2 && data1 - data2 <= -3) || (1 < data1 && 2 < data1 && data1 + data2 <= 1)
}
Prover Time taken = 0.001299
Prover Time taken = 0.002945
Added Horn clause: 163 => 234
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0393930
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data1 <= 3 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data1 + data2 <= 4 && 0 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.001131
Prover Time taken = 0.00098
Prover Time taken = 0.001024
Prover Time taken = 0.001387
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && 1 < data1 && data2 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.001324
Prover Time taken = 0.001395
Prover Time taken = 0.001336
Prover Time taken = 0.001545
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.001774
Prover Time taken = 0.001873
Prover Time taken = 0.001499
Prover Time taken = 0.001294
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data1 <= 3 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data1 + data2 <= 4 && 0 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 <= 0
}
Prover Time taken = 0.001452
Prover Time taken = 0.001602
Prover Time taken = 0.002303
Prover Time taken = 0.001913
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data1 <= 3 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data1 + data2 <= 4 && 0 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 <= 2
}
Prover Time taken = 0.001377
Prover Time taken = 0.001758
Prover Time taken = 0.001868
Prover Time taken = 0.00142
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  1 < data1 && data1 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  1 < data1
}
Prover Time taken = 0.000675
Prover Time taken = 0.00074
Prover Time taken = 0.000713
Prover Time taken = 0.000652
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= 2 && data1 <= 3 && data2 <= 1) || (3 < data1 + data2 && 2 < data2 && data1 + data2 <= 4 && 0 < data1)
}
Prover Time taken = 0.001413
Prover Time taken = 0.002816
Added Horn clause: 186 => 58
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0463710
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 + data2 <= 3 && 0 < data1 + data2 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && 3 < data1 + data2 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1 && data1 + data2 <= 4
}
Prover Time taken = 0.001105
Added Horn clause: 286 && 257 => 
Prover Time taken = 0.003006
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0434640
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 + data2 <= 3 && 1 < data1 + data2 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && 3 < data1 + data2 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1 && data1 + data2 <= 4
}
Prover Time taken = 0.000995
Added Horn clause: 287 && 276 => 
Prover Time taken = 0.004699
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0446220
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 + data2 <= 3 && data1 <= 3 && data2 <= -1) || (data2 <= 2 && 2 < data1 && 3 < data1 + data2 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1 && data1 + data2 <= 4
}
Prover Time taken = 0.000961
Added Horn clause: 288 && 289 => 
Prover Time taken = 0.002894
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0423950
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 + data2 <= 3 && data1 <= 3 && -2 < data1 + data2 && data2 <= -1) || (data2 <= 2 && 2 < data1 && 3 < data1 + data2 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1 && data1 + data2 <= 4
}
Prover Time taken = 0.001126
Added Horn clause: 290 && 291 => 
Prover Time taken = 0.003006
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0503790
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 3 && -1 < data1 + data2 && data2 <= -1) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1 && data1 + data2 <= 4
}
Prover Time taken = 0.001384
Added Horn clause: 212 && 214 => 
Prover Time taken = 0.00397
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0668630
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && data1 <= 3 && data2 <= -1) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && 3 < data1) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && data1 <= 3 && -1 < data2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && 3 < data1 && data2 <= -2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && 4 < data1)
}
Prover Time taken = 0.001749
Added Horn clause: 292 && 270 => 
Prover Time taken = 0.00794
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0551090
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && data1 <= 3 && data2 <= -1) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && 3 < data1 && -2 < data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && data1 <= 3 && -1 < data2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && 3 < data1 && data2 <= -2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && 4 < data1)
}
Prover Time taken = 0.001881
Prover Time taken = 0.002559
Prover Time taken = 0.002096
Prover Time taken = 0.00207
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data1 - data2 <= 0 && data2 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && data1 <= 3 && -1 < data2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && 3 < data1 && data2 <= -2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && 4 < data1)
}
Prover Time taken = 0.003892
Prover Time taken = 0.003134
Prover Time taken = 0.004223
Prover Time taken = 0.007157
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data1 <= 4) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && 4 < data1 && data1 + data2 <= 1) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && 4 < data1 && 1 < data1 + data2 && 2 < data1 + data2 && data2 <= -2) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && 4 < data1 && 1 < data1 + data2 && 2 < data1 + data2 && -2 < data2 && -1 < data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && data1 <= 3 && -1 < data2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && 3 < data1 && data2 <= -2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && 4 < data1)
}
Prover Time taken = 0.002989
Prover Time taken = 0.005736
Added Horn clause: 277 && 270 => 215
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0646930
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && data1 <= 3 && data2 <= -1) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && 3 < data1) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && data1 <= 3 && -1 < data2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && 3 < data1 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && 4 < data1)
}
Prover Time taken = 0.001519
Added Horn clause: 293 && 265 => 
Prover Time taken = 0.00409
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0557390
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -3 < data2 && 3 < data1 - data2 && data1 <= 4) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -3 < data2 && 3 < data1 - data2 && 4 < data1 && data2 <= -2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && data1 <= 3 && -1 < data2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && 3 < data1 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && 4 < data1)
}
Prover Time taken = 0.001511
Added Horn clause: 285 && 181 => 
Prover Time taken = 0.004058
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0537680
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -3 < data2 && 3 < data1 - data2 && data1 <= 4) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && data1 <= 3 && -1 < data2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && 3 < data1 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && 4 < data1)
}
Prover Time taken = 0.001429
Prover Time taken = 0.001677
Prover Time taken = 0.001821
Prover Time taken = 0.002203
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data1 - data2 <= 0 && data2 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && data1 <= 3 && -1 < data2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && 3 < data1 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && 4 < data1)
}
Prover Time taken = 0.003255
Prover Time taken = 0.003423
Prover Time taken = 0.002985
Prover Time taken = 0.002522
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data1 <= 4 && data1 - data2 <= 3) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data1 <= 4 && 3 < data1 - data2 && -1 < data1 + data2) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && 4 < data1 && data1 + data2 <= 1) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && 4 < data1 && 1 < data1 + data2 && 2 < data1 + data2 && data2 <= -2) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && 4 < data1 && 1 < data1 + data2 && 2 < data1 + data2 && -2 < data2 && -1 < data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && data1 <= 3 && -1 < data2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data1 <= 4 && 3 < data1 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && 4 < data1)
}
Prover Time taken = 0.004081
Prover Time taken = 0.004916
Prover Time taken = 0.005129
Added Horn clause: 294 && 295 => 296
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0521880
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -3 < data2 && 3 < data1 - data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data2 <= -3) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && -3 < data2 && data1 - data2 <= 3)
}
Prover Time taken = 0.001527
Prover Time taken = 0.001341
Prover Time taken = 0.001232
Prover Time taken = 0.001287
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data1 - data2 <= 0 && data2 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data2 <= -3) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && -3 < data2 && data1 - data2 <= 3)
}
Prover Time taken = 0.002111
Prover Time taken = 0.002157
Prover Time taken = 0.0031
Prover Time taken = 0.002847
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data1 + data2 <= 2 && data1 + data2 <= 1 && 4 < data1) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && 2 < data1 + data2 && data1 + data2 <= 3) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && 2 < data1 + data2 && 3 < data1 + data2 && 4 < data1 + data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data2 <= -3) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && -3 < data2 && data1 - data2 <= 3)
}
Prover Time taken = 0.002276
Prover Time taken = 0.003236
Prover Time taken = 0.004651
Added Horn clause: 297 && 280 => 298
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0488760
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && data1 + data2 <= 2 && data1 + data2 <= 1 && 4 < data1) || (0 < data1 && data2 <= 1 && 2 < data1 && 3 < data1 && 2 < data1 + data2 && -3 < data2) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data2 <= -3) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && -3 < data2 && data1 - data2 <= 3)
}
Prover Time taken = 0.003056
Prover Time taken = 0.002544
Prover Time taken = 0.003212
Prover Time taken = 0.003114
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -3 < data2 && 3 < data1 - data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2
}
Prover Time taken = 0.001175
Prover Time taken = 0.001363
Prover Time taken = 0.001513
Prover Time taken = 0.001699
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -3 < data2 && 3 < data1 - data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 + data2 <= 4
}
Prover Time taken = 0.002789
Prover Time taken = 0.003011
Added Horn clause: 299 && 300 => 290
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0526330
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -2 < data2 && 3 < data1 - data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data2 <= -3) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && -3 < data2 && data1 - data2 <= 3)
}
Prover Time taken = 0.001452
Prover Time taken = 0.001602
Prover Time taken = 0.00169
Prover Time taken = 0.001745
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -2 < data2 && 3 < data1 - data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2
}
Prover Time taken = 0.001107
Prover Time taken = 0.001314
Prover Time taken = 0.001797
Prover Time taken = 0.00126
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -2 < data2 && 3 < data1 - data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 + data2 <= 4
}
Prover Time taken = 0.001048
Prover Time taken = 0.00294
Added Horn clause: 95 && 301 => 287
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0490850
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 - data2 <= 4 && 3 < data1 - data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && data2 <= -3) || (data2 <= 1 && data1 + data2 <= 4 && 2 < data1 && -3 < data2 && data1 - data2 <= 3)
}
Prover Time taken = 0.001145
Prover Time taken = 0.001372
Prover Time taken = 0.001361
Prover Time taken = 0.001663
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 - data2 <= 4 && 3 < data1 - data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2
}
Prover Time taken = 0.001429
Prover Time taken = 0.003258
Added Horn clause: 212 && 302 => 95
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0463500
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && 1 < data1 + data2 && data2 <= -1) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1)
}
Prover Time taken = 0.001467
Prover Time taken = 0.001562
Prover Time taken = 0.00147
Prover Time taken = 0.001331
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0 && data1 <= 2) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data1 - data2 <= 0 && data2 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1)
}
Prover Time taken = 0.00249
Prover Time taken = 0.003841
Prover Time taken = 0.002467
Prover Time taken = 0.00174
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1)
}
Prover Time taken = 0.001631
Prover Time taken = 0.00377
Prover Time taken = 0.001647
Prover Time taken = 0.001653
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && 1 < data1 + data2 && data2 <= -1) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2
}
Prover Time taken = 0.001028
Prover Time taken = 0.001425
Prover Time taken = 0.001933
Prover Time taken = 0.001611
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && 1 < data1 + data2 && data2 <= -1) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 + data2 <= 4
}
Prover Time taken = 0.001159
Prover Time taken = 0.003127
Added Horn clause: 278 && 303 => 304
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0475370
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && 1 < data1 + data2 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1)
}
Prover Time taken = 0.001125
Prover Time taken = 0.00147
Prover Time taken = 0.001392
Prover Time taken = 0.001314
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && 1 < data1 + data2 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2
}
Prover Time taken = 0.001442
Prover Time taken = 0.002314
Prover Time taken = 0.001551
Prover Time taken = 0.001555
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && 1 < data1 + data2 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 + data2 <= 4
}
Prover Time taken = 0.001646
Prover Time taken = 0.003253
Added Horn clause: 212 && 305 => 306
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0477370
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && data1 <= 3 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && data1 <= 3 && 0 < data1 + data2 && 1 < data1 + data2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && 3 < data1) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1)
}
Prover Time taken = 0.00163
Added Horn clause: 306 && 307 => 
Prover Time taken = 0.002918
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0512850
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && data1 <= 3 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && data1 <= 3 && 0 < data1 + data2 && 1 < data1 + data2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && 3 < data1) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && data1 <= 3 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && 3 < data1)
}
Prover Time taken = 0.001474
Added Horn clause: 304 && 268 => 
Prover Time taken = 0.003313
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0490090
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && data1 <= 3 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && data1 <= 3 && 0 < data1 + data2 && 1 < data1 + data2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && 3 < data1 && 4 < data1) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && data1 <= 3 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && 3 < data1)
}
Prover Time taken = 0.002048
Prover Time taken = 0.002293
Prover Time taken = 0.001878
Prover Time taken = 0.001678
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0 && data1 <= 2) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data1 - data2 <= 0 && data2 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && data1 <= 3 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && 3 < data1)
}
Prover Time taken = 0.002679
Prover Time taken = 0.002647
Prover Time taken = 0.002531
Prover Time taken = 0.002186
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && data1 <= 3 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && 3 < data1)
}
Prover Time taken = 0.002037
Prover Time taken = 0.001987
Prover Time taken = 0.00194
Prover Time taken = 0.001942
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && data1 <= 3 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && data1 <= 3 && 0 < data1 + data2 && 1 < data1 + data2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && 3 < data1 && 4 < data1) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2
}
Prover Time taken = 0.001654
Prover Time taken = 0.002084
Prover Time taken = 0.002036
Prover Time taken = 0.002005
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && data1 <= 3 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && data1 <= 3 && 0 < data1 + data2 && 1 < data1 + data2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && 3 < data1 && 4 < data1) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 + data2 <= 4
}
Prover Time taken = 0.002455
Prover Time taken = 0.004045
Added Horn clause: 306 && 308 => 288
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0485580
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 3 && data2 <= -1) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 3 < data1 && -4 < data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && data1 <= 3 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && 3 < data1 && data2 <= -4)
}
Prover Time taken = 0.001248
Prover Time taken = 0.001494
Prover Time taken = 0.001448
Prover Time taken = 0.001456
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0 && data1 <= 2) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data1 - data2 <= 0 && data2 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && data1 <= 3 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && 3 < data1 && data2 <= -4)
}
Prover Time taken = 0.002383
Prover Time taken = 0.002247
Prover Time taken = 0.002767
Prover Time taken = 0.004677
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && data1 <= 3 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && 3 < data1 && data2 <= -4)
}
Prover Time taken = 0.002587
Prover Time taken = 0.002641
Prover Time taken = 0.002038
Prover Time taken = 0.001975
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 3 && data2 <= -1) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 3 < data1 && -4 < data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2
}
Prover Time taken = 0.001241
Prover Time taken = 0.003206
Added Horn clause: 290 && 251 => 286
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0521980
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data2 <= -4 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && data1 <= 3 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && data1 <= 3 && 0 < data1 + data2 && 1 < data1 + data2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -4 < data2 && data2 <= -1 && 3 < data1 && 4 < data1) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && data1 <= 3 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && 3 < data1)
}
Prover Time taken = 0.001921
Prover Time taken = 0.002654
Added Horn clause: 309 && 310 => 
Prover Time taken = 0.004184
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.1035190
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 - data2 <= 8 && data1 <= 3 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 - data2 <= 8 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 - data2 <= 8 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data2 <= -1) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 - data2 <= 8 && 3 < data1) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 - data2 <= 8 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && 8 < data1 - data2)
}
Prover Time taken = 0.001822
Prover Time taken = 0.002035
Prover Time taken = 0.002677
Prover Time taken = 0.002303
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0 && data1 <= 2) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data1 - data2 <= 0 && data2 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 - data2 <= 8 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && 8 < data1 - data2)
}
Prover Time taken = 0.001933
Prover Time taken = 0.002001
Prover Time taken = 0.002318
Prover Time taken = 0.005079
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 - data2 <= 8 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && 8 < data1 - data2)
}
Prover Time taken = 0.00233
Prover Time taken = 0.002489
Prover Time taken = 0.001917
Prover Time taken = 0.00195
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 - data2 <= 8 && data1 <= 3 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 - data2 <= 8 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 - data2 <= 8 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data2 <= -1) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 - data2 <= 8 && 3 < data1) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2
}
Prover Time taken = 0.00215
Prover Time taken = 0.004795
Added Horn clause: 288 && 311 => 85
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0637770
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && data1 <= 3 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data2 <= -1) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 4 < data1 && data1 + data2 <= 1 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 4 < data1 && 1 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2)
}
Prover Time taken = 0.002589
Prover Time taken = 0.003719
Added Horn clause: 312 && 282 => 
Prover Time taken = 0.003866
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0612610
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 + data2 <= -1 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2)
}
Prover Time taken = 0.002486
Prover Time taken = 0.002967
Prover Time taken = 0.002324
Prover Time taken = 0.002162
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0 && data1 <= 2) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data1 - data2 <= 0 && data2 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2)
}
Prover Time taken = 0.003412
Prover Time taken = 0.003267
Prover Time taken = 0.00543
Prover Time taken = 0.003953
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 1 < data2 && data2 <= 2 && data1 <= 1) || (0 < data1 && 1 < data2 && data2 <= 2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2)
}
Prover Time taken = 0.003237
Prover Time taken = 0.003261
Prover Time taken = 0.003182
Prover Time taken = 0.003067
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 + data2 <= -1 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2
}
Prover Time taken = 0.00214
Prover Time taken = 0.002852
Prover Time taken = 0.004498
Added Horn clause: 313 && 314 => 312
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0569580
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && 0 < data2 && data1 - data2 <= 3) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.000887
Added Horn clause: 315 && 142 => 
Prover Time taken = 0.002706
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0571790
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.000892
Prover Time taken = 0.000895
Prover Time taken = 0.000686
Prover Time taken = 0.000694
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && 1 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.0012
Prover Time taken = 0.001482
Prover Time taken = 0.001051
Prover Time taken = 0.001008
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && 1 < data2 && data1 + data2 <= 3) || (0 < data1 && 1 < data2 && 3 < data1 + data2 && 2 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001041
Prover Time taken = 0.001378
Prover Time taken = 0.001036
Prover Time taken = 0.001046
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.000811
Prover Time taken = 0.000987
Prover Time taken = 0.001126
Prover Time taken = 0.001246
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data2 <= 2 && data1 <= 2) || (-1 < data1 - data2 && data2 <= 2 && 2 < data1 && 4 < data1)
}
Prover Time taken = 0.001149
Prover Time taken = 0.001736
Prover Time taken = 0.003198
Prover Time taken = 0.001218
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data2 <= 2 && data1 <= 2) || (-1 < data1 - data2 && data2 <= 2 && 2 < data1 && 4 < data1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.000825
Prover Time taken = 0.000833
Prover Time taken = 0.000786
Prover Time taken = 0.000843
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && 1 < data2 && data1 + data2 <= 3) || (0 < data1 && 1 < data2 && 3 < data1 + data2 && 2 < data1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
Prover Time taken = 0.000986
Prover Time taken = 0.001032
Prover Time taken = 0.001036
Prover Time taken = 0.001156
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && 1 < data1)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && 1 < data2 && data1 + data2 <= 3) || (0 < data1 && 1 < data2 && 3 < data1 + data2 && 2 < data1)
}
Prover Time taken = 0.00145
Prover Time taken = 0.001797
Prover Time taken = 0.001538
Prover Time taken = 0.002163
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && 1 < data2 && data1 + data2 <= 3) || (0 < data1 && 1 < data2 && 3 < data1 + data2 && 2 < data1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.001462
Prover Time taken = 0.001512
Prover Time taken = 0.001421
Prover Time taken = 0.001378
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data2 <= 1 && 2 < data1 && data1 <= 3 && -1 < data2 && data2 <= 0) || (0 < data1 && 1 < data2 && data1 + data2 <= 3) || (0 < data1 && 1 < data2 && 3 < data1 + data2 && 2 < data1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data2 <= 2 && data1 <= 2) || (-1 < data1 - data2 && data2 <= 2 && 2 < data1 && 4 < data1)
}
Prover Time taken = 0.001424
Prover Time taken = 0.002926
Added Horn clause: 207 && 182 => 216
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0536000
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && 1 < data1 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001231
Prover Time taken = 0.00113
Prover Time taken = 0.00115
Prover Time taken = 0.001079
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001161
Prover Time taken = 0.001174
Prover Time taken = 0.001275
Prover Time taken = 0.001259
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
Prover Time taken = 0.00118
Prover Time taken = 0.00128
Prover Time taken = 0.001204
Prover Time taken = 0.001589
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && 1 < data1 && data1 <= 2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
Prover Time taken = 0.001861
Prover Time taken = 0.001729
Prover Time taken = 0.001817
Prover Time taken = 0.001717
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.001706
Prover Time taken = 0.003315
Prover Time taken = 0.001553
Prover Time taken = 0.00161
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data2 <= 2 && data1 <= 2) || (-1 < data1 - data2 && data2 <= 2 && 2 < data1 && 4 < data1)
}
Prover Time taken = 0.002407
Prover Time taken = 0.003014
Prover Time taken = 0.002516
Prover Time taken = 0.002811
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.00168
Prover Time taken = 0.001649
Prover Time taken = 0.001279
Prover Time taken = 0.00129
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data2 <= 2 && data1 <= 2) || (-1 < data1 - data2 && data2 <= 2 && 2 < data1 && 4 < data1)
}
Prover Time taken = 0.000974
Prover Time taken = 0.002741
Added Horn clause: 316 => 317
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0660070
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 + data2 <= -1 && data1 + data2 <= -2 && -3 < data1 + data2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2)
}
Prover Time taken = 0.00262
Prover Time taken = 0.002916
Prover Time taken = 0.002759
Prover Time taken = 0.003213
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data2 <= 0 && data1 <= 2) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2)
}
Prover Time taken = 0.002894
Prover Time taken = 0.002582
Prover Time taken = 0.002726
Prover Time taken = 0.002626
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && data1 + data2 <= 3 && 2 < data1 + data2 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && data1 + data2 <= 3 && 2 < data1 + data2 && 1 < data1 && 1 < data1 - data2 && -2 < data2) || (0 < data1 && 4 < data1 + data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2)
}
Prover Time taken = 0.003031
Prover Time taken = 0.002658
Prover Time taken = 0.004802
Prover Time taken = 0.003169
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 + data2 <= -1 && data1 + data2 <= -2 && -3 < data1 + data2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2
}
Prover Time taken = 0.0026
Prover Time taken = 0.002414
Prover Time taken = 0.003249
Prover Time taken = 0.003268
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 + data2 <= -1 && data1 + data2 <= -2 && -3 < data1 + data2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 + data2 <= 4
}
Prover Time taken = 0.002024
Prover Time taken = 0.002954
Prover Time taken = 0.004063
Added Horn clause: 318 && 319 => 320
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0669980
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data2 <= -1) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && 4 < data1 && data1 + data2 <= 1 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && 4 < data1 && 1 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2)
}
Prover Time taken = 0.002845
Prover Time taken = 0.00328
Prover Time taken = 0.002571
Prover Time taken = 0.00254
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && data1 + data2 <= 3 && 2 < data1 + data2 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && data1 + data2 <= 3 && 2 < data1 + data2 && 1 < data1 && 1 < data1 - data2 && -2 < data2 && -1 < data2) || (0 < data1 && 4 < data1 + data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2)
}
Prover Time taken = 0.003611
Prover Time taken = 0.003001
Prover Time taken = 0.002821
Prover Time taken = 0.002966
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data2 <= -1) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && 4 < data1 && data1 + data2 <= 1 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && 4 < data1 && 1 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2
}
Prover Time taken = 0.005146
Prover Time taken = 0.003839
Prover Time taken = 0.003384
Prover Time taken = 0.00283
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data2 <= -1) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && 4 < data1 && data1 + data2 <= 1 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && 4 < data1 && 1 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 + data2 <= 4
}
Prover Time taken = 0.002558
Prover Time taken = 0.00515
Added Horn clause: 285 && 256 => 286
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0692920
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data2 <= -1) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && 4 < data1 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && 4 < data1 && 0 < data1 + data2 && 1 < data1 + data2 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && 4 < data1 && 0 < data1 + data2 && 1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2)
}
Prover Time taken = 0.002266
Prover Time taken = 0.00345
Prover Time taken = 0.002816
Prover Time taken = 0.003892
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data2 <= -1) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && 4 < data1 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && 4 < data1 && 0 < data1 + data2 && 1 < data1 + data2 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && 4 < data1 && 0 < data1 + data2 && 1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2
}
Prover Time taken = 0.003658
Prover Time taken = 0.004485
Prover Time taken = 0.004503
Prover Time taken = 0.004761
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && data1 <= 4 && data1 <= 3 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data2 <= -1) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && 4 < data1 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && 4 < data1 && 0 < data1 + data2 && 1 < data1 + data2 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && -6 < data2 && 4 < data1 && 0 < data1 + data2 && 1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 + data2 <= 4
}
Prover Time taken = 0.006358
Prover Time taken = 0.003964
Prover Time taken = 0.00554
Added Horn clause: 288 && 321 => 322
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0772580
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 3 && 3 < data1 - data2 && data1 + data2 <= -4) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 3 && 3 < data1 - data2 && -4 < data1 + data2 && -3 < data1 + data2 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 3 && 3 < data1 - data2 && -4 < data1 + data2 && -3 < data1 + data2 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 3 && 3 < data1 - data2 && -4 < data1 + data2 && -3 < data1 + data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 3 < data1 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 3 < data1 && -1 < data1 + data2 && 0 < data1 + data2 && -4 < data2 && data1 <= 4 && -1 < data2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 3 < data1 && -1 < data1 + data2 && 0 < data1 + data2 && -4 < data2 && 4 < data1 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 3 < data1 && -1 < data1 + data2 && 0 < data1 + data2 && -4 < data2 && 4 < data1 && 2 < data1 + data2 && 3 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2)
}
Prover Time taken = 0.002587
Prover Time taken = 0.003633
Prover Time taken = 0.003451
Prover Time taken = 0.003261
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && data1 + data2 <= 3 && 2 < data1 + data2 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && data1 + data2 <= 3 && 2 < data1 + data2 && 1 < data1 && 1 < data1 - data2 && -2 < data2) || (0 < data1 && 4 < data1 + data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2)
}
Prover Time taken = 0.002695
Prover Time taken = 0.002503
Prover Time taken = 0.002484
Prover Time taken = 0.002506
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 3 && 3 < data1 - data2 && data1 + data2 <= -4) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 3 && 3 < data1 - data2 && -4 < data1 + data2 && -3 < data1 + data2 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 3 && 3 < data1 - data2 && -4 < data1 + data2 && -3 < data1 + data2 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 3 && 3 < data1 - data2 && -4 < data1 + data2 && -3 < data1 + data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 3 < data1 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 3 < data1 && -1 < data1 + data2 && 0 < data1 + data2 && -4 < data2 && data1 <= 4 && -1 < data2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 3 < data1 && -1 < data1 + data2 && 0 < data1 + data2 && -4 < data2 && 4 < data1 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 3 < data1 && -1 < data1 + data2 && 0 < data1 + data2 && -4 < data2 && 4 < data1 && 2 < data1 + data2 && 3 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2
}
Prover Time taken = 0.004437
Prover Time taken = 0.005933
Prover Time taken = 0.008182
Added Horn clause: 322 && 323 => 324
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0717990
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && data1 <= 3 && 3 < data1 - data2 && data1 + data2 <= -4) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && data1 <= 3 && 3 < data1 - data2 && -4 < data1 + data2 && -3 < data1 + data2 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && data1 <= 3 && 3 < data1 - data2 && -4 < data1 + data2 && -3 < data1 + data2 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && data1 <= 3 && 3 < data1 - data2 && -4 < data1 + data2 && -3 < data1 + data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 4 < data1 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 4 < data1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 4 < data1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 4 < data1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2)
}
Prover Time taken = 0.003304
Prover Time taken = 0.004487
Prover Time taken = 0.004676
Prover Time taken = 0.004348
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && data1 + data2 <= 3 && 2 < data1 + data2 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && data1 + data2 <= 3 && 2 < data1 + data2 && 1 < data1 && 1 < data1 - data2 && -1 < data2) || (0 < data1 && 4 < data1 + data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  (data2 <= 1 && data1 + data2 <= 4 && data1 - data2 <= 3) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && data1 + data2 <= -1) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0 && data1 <= 2) || (data2 <= 1 && data1 + data2 <= 4 && 3 < data1 - data2 && data1 + data2 <= 1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2)
}
Prover Time taken = 0.002964
Prover Time taken = 0.00435
Prover Time taken = 0.00401
Prover Time taken = 0.00326
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && data1 <= 3 && 3 < data1 - data2 && data1 + data2 <= -4) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && data1 <= 3 && 3 < data1 - data2 && -4 < data1 + data2 && -3 < data1 + data2 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && data1 <= 3 && 3 < data1 - data2 && -4 < data1 + data2 && -3 < data1 + data2 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && data1 <= 4 && data1 <= 3 && 3 < data1 - data2 && -4 < data1 + data2 && -3 < data1 + data2 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 4 < data1 && data1 + data2 <= -2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 4 < data1 && -2 < data1 + data2 && -1 < data1 + data2 && data1 + data2 <= 0) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 4 < data1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && data1 + data2 <= 2) || (data2 <= 2 && 2 < data1 && data2 <= 0 && 4 < data1 && -2 < data1 + data2 && -1 < data1 + data2 && 0 < data1 + data2 && 1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2) || (data2 <= 2 && 2 < data1 && 0 < data2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2
}
Prover Time taken = 0.004934
Prover Time taken = 0.005628
Prover Time taken = 0.008142
Added Horn clause: 325 && 326 => 327
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0676960
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001221
Prover Time taken = 0.001183
Prover Time taken = 0.000975
Prover Time taken = 0.000825
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && 1 < data1 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001649
Prover Time taken = 0.001827
Prover Time taken = 0.001273
Prover Time taken = 0.001485
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.002323
Prover Time taken = 0.002163
Prover Time taken = 0.001963
Prover Time taken = 0.002033
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.001109
Prover Time taken = 0.001272
Prover Time taken = 0.001372
Prover Time taken = 0.001794
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data2 <= 2 && data1 <= 2) || (-1 < data1 - data2 && data2 <= 2 && 2 < data1 && data2 <= 0)
}
Prover Time taken = 0.001418
Prover Time taken = 0.001801
Prover Time taken = 0.001292
Prover Time taken = 0.001382
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data2 <= 2 && data1 <= 2) || (-1 < data1 - data2 && data2 <= 2 && 2 < data1 && data2 <= 0)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001276
Prover Time taken = 0.001152
Prover Time taken = 0.001022
Prover Time taken = 0.001425
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
Prover Time taken = 0.00146
Prover Time taken = 0.002101
Prover Time taken = 0.001448
Prover Time taken = 0.001474
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && 1 < data1 && data1 <= 2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
Prover Time taken = 0.002099
Prover Time taken = 0.002904
Prover Time taken = 0.002674
Prover Time taken = 0.003034
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.001889
Prover Time taken = 0.001898
Prover Time taken = 0.002416
Prover Time taken = 0.001756
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data2 <= 2 && data1 <= 2) || (-1 < data1 - data2 && data2 <= 2 && 2 < data1 && data2 <= 0)
}
Prover Time taken = 0.002131
Prover Time taken = 0.003878
Added Horn clause: 188 && 328 => 329
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0731410
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data2 <= 2 && data1 <= 2) || (-1 < data1 - data2 && data2 <= 2 && 2 < data1 && 3 < data1 - data2)
}
Prover Time taken = 0.001192
Prover Time taken = 0.003334
Prover Time taken = 0.001323
Prover Time taken = 0.001208
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data2 <= 2 && data1 <= 2) || (-1 < data1 - data2 && data2 <= 2 && 2 < data1 && 3 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001325
Prover Time taken = 0.00133
Prover Time taken = 0.001425
Prover Time taken = 0.001209
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data2 <= 2 && data1 <= 2) || (-1 < data1 - data2 && data2 <= 2 && 2 < data1 && 3 < data1 - data2)
}
Prover Time taken = 0.002155
Prover Time taken = 0.001952
Prover Time taken = 0.001956
Prover Time taken = 0.002187
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
Prover Time taken = 0.001437
Prover Time taken = 0.001604
Prover Time taken = 0.001685
Prover Time taken = 0.001459
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data2 <= 2 && data1 <= 2) || (-1 < data1 - data2 && data2 <= 2 && 2 < data1 && 3 < data1 - data2)
}
Prover Time taken = 0.00108
Prover Time taken = 0.002459
Added Horn clause: 330 => 328
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0773930
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && data1 + data2 <= 2 && 2 < data1 && data1 + data2 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.002073
Prover Time taken = 0.001912
Prover Time taken = 0.001704
Prover Time taken = 0.002306
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data2 <= 2 && data1 + data2 <= 3) || (-1 < data1 - data2 && data2 <= 2 && 3 < data1 + data2 && data1 + data2 <= 4 && data2 <= 0) || (-1 < data1 - data2 && data2 <= 2 && 3 < data1 + data2 && data1 + data2 <= 4 && 0 < data2 && data1 - data2 <= 0)
}
Prover Time taken = 0.001506
Prover Time taken = 0.001558
Prover Time taken = 0.001509
Prover Time taken = 0.001539
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data2 <= 2 && data1 + data2 <= 3) || (-1 < data1 - data2 && data2 <= 2 && 3 < data1 + data2 && data1 + data2 <= 4 && data2 <= 0) || (-1 < data1 - data2 && data2 <= 2 && 3 < data1 + data2 && data1 + data2 <= 4 && 0 < data2 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001828
Prover Time taken = 0.001111
Prover Time taken = 0.001095
Prover Time taken = 0.001141
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && data1 + data2 <= 2 && 2 < data1 && data1 + data2 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && data1 <= 1) || (0 < data1 && data1 + data2 <= 4 && 2 < data1 + data2 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
Prover Time taken = 0.001541
Prover Time taken = 0.002978
Added Horn clause: 331 => 290
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0710980
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && data2 <= -1 && data2 <= -2 && data1 - data2 <= 5 && 0 < data1 + data2) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.002171
Prover Time taken = 0.003466
Prover Time taken = 0.001687
Prover Time taken = 0.001705
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && data2 <= -1 && data2 <= -2 && data1 - data2 <= 5 && 0 < data1 + data2) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
Prover Time taken = 0.002458
Prover Time taken = 0.003531
Added Horn clause: 329 => 212
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0653470
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && 1 < data1 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001429
Prover Time taken = 0.001376
Prover Time taken = 0.001267
Prover Time taken = 0.001146
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001339
Prover Time taken = 0.001245
Prover Time taken = 0.001474
Prover Time taken = 0.001615
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2 && data1 <= 0
}
Prover Time taken = 0.001687
Prover Time taken = 0.001247
Prover Time taken = 0.001248
Prover Time taken = 0.001347
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data2 <= 2 && data1 <= 2
}
Prover Time taken = 0.001087
Prover Time taken = 0.001247
Prover Time taken = 0.001296
Prover Time taken = 0.001197
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data2 <= 2 && data1 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.000825
Prover Time taken = 0.000967
Prover Time taken = 0.000937
Prover Time taken = 0.000882
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
Prover Time taken = 0.001426
Prover Time taken = 0.001547
Prover Time taken = 0.001394
Prover Time taken = 0.001291
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && 1 < data1 && data1 <= 2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
Prover Time taken = 0.001681
Prover Time taken = 0.002775
Prover Time taken = 0.002235
Prover Time taken = 0.001749
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2 && data1 <= 0
}
Prover Time taken = 0.001832
Prover Time taken = 0.001612
Prover Time taken = 0.002002
Prover Time taken = 0.001714
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data2 <= 2 && data1 <= 2
}
Prover Time taken = 0.002155
Prover Time taken = 0.003697
Prover Time taken = 0.0019
Prover Time taken = 0.001792
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2 && data1 <= 0
}
Prover Time taken = 0.001375
Prover Time taken = 0.001349
Prover Time taken = 0.001412
Prover Time taken = 0.001237
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2 && data1 <= 0
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data2 <= 2 && data1 <= 2
}
Prover Time taken = 0.000946
Prover Time taken = 0.001073
Prover Time taken = 0.000889
Prover Time taken = 0.000853
Verifying P0_Stable_t2_s2: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && 1 < data1 && data1 <= 2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data2 <= 2 && data1 <= 2
}
Prover Time taken = 0.003231
Added Horn clause: 38 && 232 => 332
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0642020
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data1 <= 2 && data1 - data2 <= 0) || (-1 < data1 - data2 && data1 <= 2 && 0 < data1 - data2 && data1 - data2 <= 1)
}
Prover Time taken = 0.001111
Prover Time taken = 0.001283
Prover Time taken = 0.001365
Prover Time taken = 0.001327
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data1 <= 2 && data1 - data2 <= 0) || (-1 < data1 - data2 && data1 <= 2 && 0 < data1 - data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.000945
Prover Time taken = 0.001263
Prover Time taken = 0.001131
Prover Time taken = 0.001329
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data1 <= 2 && data1 - data2 <= 0) || (-1 < data1 - data2 && data1 <= 2 && 0 < data1 - data2 && data1 - data2 <= 1)
}
Prover Time taken = 0.002757
Prover Time taken = 0.00262
Prover Time taken = 0.002552
Prover Time taken = 0.002736
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2 && data1 <= 0
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data1 <= 2 && data1 - data2 <= 0) || (-1 < data1 - data2 && data1 <= 2 && 0 < data1 - data2 && data1 - data2 <= 1)
}
Prover Time taken = 0.00244
Added Horn clause: 333 => 232
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0643090
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2 && 1 < data1 + data2 && data1 <= 0
}
Prover Time taken = 0.001126
Prover Time taken = 0.001262
Prover Time taken = 0.001478
Prover Time taken = 0.001092
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 <= 2 && data1 - data2 <= 0
}
Prover Time taken = 0.000881
Prover Time taken = 0.00119
Prover Time taken = 0.001048
Prover Time taken = 0.001414
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 <= 2 && data1 - data2 <= 0
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.000895
Prover Time taken = 0.000776
Prover Time taken = 0.00071
Prover Time taken = 0.000857
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2 && 1 < data1 + data2 && data1 <= 0
}
Prover Time taken = 0.001829
Prover Time taken = 0.001943
Prover Time taken = 0.001861
Prover Time taken = 0.001716
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 <= 2 && data1 - data2 <= 0
}
Prover Time taken = 0.001942
Prover Time taken = 0.001978
Prover Time taken = 0.001808
Prover Time taken = 0.001864
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 + data2 && data1 + data2 <= 3 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2 && 1 < data1 + data2 && data1 <= 0
}
Prover Time taken = 0.001466
Prover Time taken = 0.001422
Prover Time taken = 0.001444
Prover Time taken = 0.001457
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2 && 1 < data1 + data2 && data1 <= 0
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 <= 2 && data1 - data2 <= 0
}
Prover Time taken = 0.002171
Prover Time taken = 0.001392
Prover Time taken = 0.001211
Prover Time taken = 0.001117
Verifying P0_Stable_t2_s2: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && 1 < data1 && data1 <= 2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 <= 2 && data1 - data2 <= 0
}
Prover Time taken = 0.00193
Prover Time taken = 0.002001
Prover Time taken = 0.001836
Prover Time taken = 0.001758
Verifying P0_Stable_t2_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && 1 < data1 && data1 <= 2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2 && 1 < data1 + data2 && data1 <= 0
}
Prover Time taken = 0.001868
Prover Time taken = 0.002228
Prover Time taken = 0.001696
Prover Time taken = 0.00169
Verifying Q0_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data2 && 1 < data1 && data1 <= 2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -1 < data1 && data1 + data2 <= 2 && 1 < data1 + data2 && data1 <= 0
}
Prover Time taken = 0.003564
Added Horn clause: 2 && 10 => 81
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0629070
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data1 - data2 <= 0 && data2 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001524
Prover Time taken = 0.001487
Prover Time taken = 0.001165
Prover Time taken = 0.001169
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 - data2 <= 2 && data1 - data2 <= -1 && data2 <= 2) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 - data2) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001299
Prover Time taken = 0.00132
Prover Time taken = 0.00361
Prover Time taken = 0.002138
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1
}
Prover Time taken = 0.001411
Prover Time taken = 0.001117
Prover Time taken = 0.001079
Prover Time taken = 0.001083
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 <= 2 && data1 - data2 <= 1
}
Prover Time taken = 0.000902
Prover Time taken = 0.001038
Prover Time taken = 0.001036
Prover Time taken = 0.001201
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 <= 2 && data1 - data2 <= 1
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.00079
Prover Time taken = 0.000852
Prover Time taken = 0.001046
Prover Time taken = 0.001049
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 - data2 <= 2 && data1 - data2 <= -1 && data2 <= 2) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && 2 < data1 - data2) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
Prover Time taken = 0.00126
Prover Time taken = 0.002928
Added Horn clause: 334 => 315
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0644000
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001414
Prover Time taken = 0.001221
Prover Time taken = 0.001208
Prover Time taken = 0.001319
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
Prover Time taken = 0.001208
Prover Time taken = 0.001392
Prover Time taken = 0.001664
Prover Time taken = 0.001897
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data1 - data2 <= 0 && data2 <= 2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
Prover Time taken = 0.002279
Prover Time taken = 0.002438
Prover Time taken = 0.002247
Prover Time taken = 0.002063
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 <= 3)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1
}
Prover Time taken = 0.001907
Prover Time taken = 0.003952
Added Horn clause: 123 && 335 => 250
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0650830
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data1 - data2 <= 0)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001594
Prover Time taken = 0.001942
Prover Time taken = 0.001399
Prover Time taken = 0.001366
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001718
Prover Time taken = 0.001534
Prover Time taken = 0.001527
Prover Time taken = 0.00409
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
Prover Time taken = 0.001526
Prover Time taken = 0.001484
Prover Time taken = 0.001322
Prover Time taken = 0.001772
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data1 - data2 <= 0)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1)
}
Prover Time taken = 0.0018
Prover Time taken = 0.002994
Added Horn clause: 336 => 242
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0661790
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data1 && 1 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001526
Prover Time taken = 0.001291
Prover Time taken = 0.001423
Prover Time taken = 0.001398
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data1 && 1 < data2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1)
}
Prover Time taken = 0.002874
Prover Time taken = 0.003728
Added Horn clause: 337 => 338
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0663870
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data1 && 1 < data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001259
Prover Time taken = 0.001257
Prover Time taken = 0.001206
Prover Time taken = 0.00108
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data1 && 1 < data2 && data1 <= 2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1)
}
Prover Time taken = 0.001782
Prover Time taken = 0.001617
Prover Time taken = 0.001955
Prover Time taken = 0.00195
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1
}
Prover Time taken = 0.002183
Prover Time taken = 0.002191
Prover Time taken = 0.002022
Prover Time taken = 0.002106
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 <= 2 && data1 - data2 <= 1
}
Prover Time taken = 0.002278
Prover Time taken = 0.00225
Prover Time taken = 0.002191
Prover Time taken = 0.004864
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1
}
Prover Time taken = 0.001698
Prover Time taken = 0.002991
Added Horn clause: 237 && 339 => 340
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0695680
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data1 && 1 < data2 && data1 <= 2 && -1 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001774
Prover Time taken = 0.001043
Prover Time taken = 0.001098
Prover Time taken = 0.001053
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1 && data2 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001591
Prover Time taken = 0.001428
Prover Time taken = 0.001429
Prover Time taken = 0.001304
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1 && data2 <= 2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
Prover Time taken = 0.001744
Prover Time taken = 0.001782
Prover Time taken = 0.001784
Prover Time taken = 0.001715
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data1 && 1 < data2 && data1 <= 2 && -1 < data1 - data2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1 && data2 <= 2)
}
Prover Time taken = 0.001915
Prover Time taken = 0.002388
Prover Time taken = 0.002261
Prover Time taken = 0.002634
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1 && data2 <= 2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1
}
Prover Time taken = 0.002854
Prover Time taken = 0.002376
Prover Time taken = 0.002354
Prover Time taken = 0.00263
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1 && data2 <= 2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 <= 2 && data1 - data2 <= 1
}
Prover Time taken = 0.002491
Prover Time taken = 0.00264
Prover Time taken = 0.002313
Prover Time taken = 0.002337
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1 && data2 <= 2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1
}
Prover Time taken = 0.001881
Prover Time taken = 0.001777
Prover Time taken = 0.001862
Prover Time taken = 0.001985
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 <= 2 && data1 - data2 <= 1
}
Prover Time taken = 0.001092
Prover Time taken = 0.002346
Added Horn clause: 341 => 342
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0670890
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (data2 <= 2 && 2 < data1 && data1 - data2 <= 2) || 2 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data1 <= 2 && data1 - data2 <= 1) || (-1 < data1 - data2 && 2 < data1 && 3 < data1 && 4 < data1 && 0 < data1 - data2)
}
Prover Time taken = 0.001099
Prover Time taken = 0.002759
Added Horn clause: 132 && 342 => 112
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0639050
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data1 <= 2 && 2 < data2) || (3 < data1 + data2 && 2 < data1 && data1 <= 3)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.000824
Prover Time taken = 0.001108
Prover Time taken = 0.000969
Prover Time taken = 0.000909
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data1 <= 2 && 2 < data2) || (3 < data1 + data2 && 2 < data1 && data1 <= 3)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1
}
Prover Time taken = 0.000877
Prover Time taken = 0.002929
Added Horn clause: 51 && 335 => 35
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0618860
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data1 <= 2 && 2 < data2) || (3 < data1 + data2 && 2 < data1 && data1 <= 3) || (3 < data1 + data2 && 2 < data1 && 3 < data1 && 6 < data1 + data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.00083
Prover Time taken = 0.000942
Added Horn clause: 343 && 344 => 
Prover Time taken = 0.002801
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0638720
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data1 <= 2 && 2 < data2) || (3 < data1 + data2 && 2 < data1 && data1 <= 3) || (3 < data1 + data2 && 2 < data1 && 3 < data1 && 1 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001134
Prover Time taken = 0.001197
Prover Time taken = 0.000914
Prover Time taken = 0.001124
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data1 <= 2 && 2 < data2) || (3 < data1 + data2 && 2 < data1 && data1 <= 3) || (3 < data1 + data2 && 2 < data1 && 3 < data1 && 1 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1
}
Prover Time taken = 0.00108
Prover Time taken = 0.001815
Prover Time taken = 0.001392
Prover Time taken = 0.001526
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data1 <= 2 && 2 < data2) || (3 < data1 + data2 && 2 < data1 && data1 <= 3) || (3 < data1 + data2 && 2 < data1 && 3 < data1 && 1 < data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data1 - data2 <= 0 && data1 <= 2) || (-1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data2 <= 1) || (-1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && 1 < data2 && 2 < data2)
}
Prover Time taken = 0.001314
Prover Time taken = 0.002899
Added Horn clause: 35 && 345 => 315
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0652020
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data1 <= 2 && 2 < data2) || (3 < data1 + data2 && 2 < data1 && data1 <= 3) || (3 < data1 + data2 && 2 < data1 && 3 < data1 && 1 < data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data1 - data2 <= 0 && data1 <= 2) || (-1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data2 <= 1) || (-1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && 1 < data2 && 3 < data2)
}
Prover Time taken = 0.00155
Prover Time taken = 0.002132
Prover Time taken = 0.001718
Prover Time taken = 0.001897
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  (-1 < data1 - data2 && data1 - data2 <= 0 && data1 <= 2) || (-1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && data2 <= 1) || (-1 < data1 - data2 && 0 < data1 - data2 && data1 - data2 <= 1 && 1 < data2 && 3 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001404
Prover Time taken = 0.002682
Added Horn clause: 342 => 113
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0652190
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data1 && 1 < data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001271
Prover Time taken = 0.000977
Prover Time taken = 0.001093
Prover Time taken = 0.00115
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.00178
Prover Time taken = 0.001463
Prover Time taken = 0.001677
Prover Time taken = 0.00158
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data1 <= 2 && 2 < data2) || (3 < data1 + data2 && 2 < data1 && data1 <= 3) || (3 < data1 + data2 && 2 < data1 && 3 < data1 && 1 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1 && data1 <= 1 && 1 < data2
}
Prover Time taken = 0.0011
Prover Time taken = 0.00126
Prover Time taken = 0.001454
Prover Time taken = 0.001751
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data1 <= 2 && 2 < data2) || (3 < data1 + data2 && 2 < data1 && data1 <= 3) || (3 < data1 + data2 && 2 < data1 && 3 < data1 && 1 < data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 0 && data1 <= 2
}
Prover Time taken = 0.001181
Prover Time taken = 0.001392
Prover Time taken = 0.001385
Prover Time taken = 0.001291
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 0 && data1 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001057
Prover Time taken = 0.000988
Prover Time taken = 0.000892
Prover Time taken = 0.000954
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data1 <= 2 && 2 < data2) || (3 < data1 + data2 && 2 < data1 && data1 <= 3) || (3 < data1 + data2 && 2 < data1 && 3 < data1 && 1 < data2)
}
Prover Time taken = 0.001918
Prover Time taken = 0.001543
Prover Time taken = 0.001465
Prover Time taken = 0.001842
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && -1 < data1 && 0 < data1 && -1 < data2 && data2 <= 0) || (1 < data1 + data2 && 2 < data1 + data2 && 1 < data1 && 1 < data2 && data1 <= 2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1)
}
Prover Time taken = 0.00174
Prover Time taken = 0.002265
Prover Time taken = 0.002115
Prover Time taken = 0.002204
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1 && data1 <= 1 && 1 < data2
}
Prover Time taken = 0.003721
Prover Time taken = 0.002408
Prover Time taken = 0.001895
Prover Time taken = 0.001833
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 0 && data1 <= 2
}
Prover Time taken = 0.001774
Prover Time taken = 0.001933
Prover Time taken = 0.001625
Prover Time taken = 0.001765
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && data2 <= 0) || (0 < data1 && data1 + data2 <= 4 && -1 < data2 && data1 + data2 <= 3 && 2 < data1 + data2 && 0 < data2 && data1 <= 1) || (0 < data1 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1 && data1 <= 1 && 1 < data2
}
Prover Time taken = 0.001585
Prover Time taken = 0.001359
Prover Time taken = 0.001405
Prover Time taken = 0.001527
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1 && data1 <= 1 && 1 < data2
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 0 && data1 <= 2
}
Prover Time taken = 0.000959
Prover Time taken = 0.002024
Added Horn clause: 81 => 96
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0601370
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && data2 <= -6) || (3 < data1 + data2 && -6 < data2 && data2 <= 2 && data1 <= 3 && data2 <= 1) || (3 < data1 + data2 && -6 < data2 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001368
Prover Time taken = 0.001353
Added Horn clause: 253 && 295 => 
Prover Time taken = 0.002626
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0598390
Verifying post_condition: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && -6 < data2 && data2 <= 2 && data1 <= 3 && data2 <= 1) || (3 < data1 + data2 && -6 < data2 && 2 < data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001009
Prover Time taken = 0.000861
Prover Time taken = 0.000833
Prover Time taken = 0.000864
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && 1 < data2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001229
Prover Time taken = 0.001092
Prover Time taken = 0.00106
Prover Time taken = 0.00114
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data1 + data2 <= 4 && data1 + data2 <= 3 && data1 <= 1) || (2 < data1 + data2 && data1 + data2 <= 4 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (2 < data1 + data2 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001254
Prover Time taken = 0.001244
Prover Time taken = 0.001189
Prover Time taken = 0.001212
Verifying P2_Stable_t2_s1: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && -6 < data2 && data2 <= 2 && data1 <= 3 && data2 <= 1) || (3 < data1 + data2 && -6 < data2 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1 && data1 <= 1
}
Prover Time taken = 0.001408
Prover Time taken = 0.002789
Prover Time taken = 0.002248
Prover Time taken = 0.001446
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && -6 < data2 && data2 <= 2 && data1 <= 3 && data2 <= 1) || (3 < data1 + data2 && -6 < data2 && 2 < data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 1 && data1 <= 3
}
Prover Time taken = 0.001385
Prover Time taken = 0.002884
Prover Time taken = 0.001307
Prover Time taken = 0.001304
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 1 && data1 <= 3
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.000819
Prover Time taken = 0.000751
Prover Time taken = 0.000719
Prover Time taken = 0.000751
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data1 + data2 <= 4 && data1 + data2 <= 3 && data1 <= 1) || (2 < data1 + data2 && data1 + data2 <= 4 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (2 < data1 + data2 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && -6 < data2 && data2 <= 2 && data1 <= 3 && data2 <= 1) || (3 < data1 + data2 && -6 < data2 && 2 < data2)
}
Prover Time taken = 0.00133
Prover Time taken = 0.001397
Prover Time taken = 0.001874
Prover Time taken = 0.001477
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data1 <= 0) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && 1 < data2 && data1 <= 2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data1 + data2 <= 4 && data1 + data2 <= 3 && data1 <= 1) || (2 < data1 + data2 && data1 + data2 <= 4 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (2 < data1 + data2 && 4 < data1 + data2 && data1 - data2 <= 1)
}
Prover Time taken = 0.001939
Prover Time taken = 0.001662
Prover Time taken = 0.001693
Prover Time taken = 0.001688
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data1 + data2 <= 4 && data1 + data2 <= 3 && data1 <= 1) || (2 < data1 + data2 && data1 + data2 <= 4 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (2 < data1 + data2 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1 && data1 <= 1
}
Prover Time taken = 0.00178
Prover Time taken = 0.001722
Prover Time taken = 0.002113
Prover Time taken = 0.001736
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data1 + data2 <= 4 && data1 + data2 <= 3 && data1 <= 1) || (2 < data1 + data2 && data1 + data2 <= 4 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (2 < data1 + data2 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 1 && data1 <= 3
}
Prover Time taken = 0.001951
Prover Time taken = 0.003133
Added Horn clause: 206 && 346 => 199
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0625750
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && -6 < data2 && data2 <= 2 && data1 <= 3 && data2 <= 1) || (3 < data1 + data2 && -6 < data2 && 2 < data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 1 && data1 <= 3 && data2 <= 2
}
Prover Time taken = 0.001647
Prover Time taken = 0.00206
Prover Time taken = 0.001346
Prover Time taken = 0.001378
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 1 && data1 <= 3 && data2 <= 2
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.000872
Prover Time taken = 0.000864
Prover Time taken = 0.000942
Prover Time taken = 0.001031
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data1 + data2 <= 4 && data1 + data2 <= 3 && data1 <= 1) || (2 < data1 + data2 && data1 + data2 <= 4 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (2 < data1 + data2 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 1 && data1 <= 3 && data2 <= 2
}
Prover Time taken = 0.002685
Prover Time taken = 0.00256
Prover Time taken = 0.002313
Prover Time taken = 0.002254
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data1 + data2 <= 4 && data1 + data2 <= 3 && data1 <= 1) || (2 < data1 + data2 && data1 + data2 <= 4 && data1 + data2 <= 3 && 1 < data1 && -1 < data2 && data2 <= 0) || (2 < data1 + data2 && 4 < data1 + data2 && data1 - data2 <= 1)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1 && data1 <= 1
}
Prover Time taken = 0.001851
Prover Time taken = 0.00184
Prover Time taken = 0.001893
Prover Time taken = 0.001726
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1 && data1 <= 1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 1 && data1 <= 3 && data2 <= 2
}
Prover Time taken = 0.001266
Prover Time taken = 0.00398
Added Horn clause: 57 => 346
Calling ../Boogie/Binaries/hice-dt -b -h /home/alexander/sharedData/uni/hice-dt/benchmarks/concurrentPrograms/stateful01_true-unreach-call-OG.bpl
Total learner time was 00:00:00.0626740
Verifying Q2_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data1 <= 0 && -1 < data1) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data2 <= 2 && data1 <= 2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.00128
Prover Time taken = 0.001097
Prover Time taken = 0.001217
Prover Time taken = 0.001138
Verifying Q2_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && data2 <= 0) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.001156
Prover Time taken = 0.001096
Prover Time taken = 0.001121
Prover Time taken = 0.001294
Verifying P2_Stable_t2_s2: 
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && -6 < data2 && data2 <= 2 && data1 <= 3 && data2 <= 1) || (3 < data1 + data2 && -6 < data2 && 2 < data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 1 && data1 <= 3
}
Prover Time taken = 0.001529
Prover Time taken = 0.001397
Prover Time taken = 0.001339
Prover Time taken = 0.001315
Verifying t2_transition_s2: 
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 1 && data1 <= 3
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
Prover Time taken = 0.000754
Prover Time taken = 0.000738
Prover Time taken = 0.000777
Prover Time taken = 0.001162
Verifying t1_transition_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && data2 <= 0) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && -6 < data2 && data2 <= 2 && data1 <= 3 && data2 <= 1) || (3 < data1 + data2 && -6 < data2 && 2 < data2)
}
Prover Time taken = 0.001353
Prover Time taken = 0.00142
Prover Time taken = 0.001265
Prover Time taken = 0.001257
Verifying t1_transition_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data1 <= 0 && -1 < data1) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data2 <= 2 && data1 <= 2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && data2 <= 0) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
Prover Time taken = 0.001729
Prover Time taken = 0.002267
Prover Time taken = 0.001668
Prover Time taken = 0.001651
Verifying P1_Stable_t2_s1: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && data2 <= 0) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1 && data1 <= 1
}
Prover Time taken = 0.001875
Prover Time taken = 0.002299
Prover Time taken = 0.001684
Prover Time taken = 0.001935
Verifying P1_Stable_t2_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && data2 <= 0) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 1 && data1 <= 3
}
Prover Time taken = 0.001866
Prover Time taken = 0.001885
Prover Time taken = 0.002821
Prover Time taken = 0.001966
Verifying Q0_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && data2 <= 0) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1 && data1 <= 1
}
Prover Time taken = 0.001463
Prover Time taken = 0.00155
Prover Time taken = 0.001411
Prover Time taken = 0.001433
Verifying t2_transition_s1: 
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1 && data1 <= 1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 1 && data1 <= 3
}
Prover Time taken = 0.00287
Prover Time taken = 0.001152
Prover Time taken = 0.000965
Prover Time taken = 0.000816
Verifying P0_Stable_t2_s2: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data1 <= 0 && -1 < data1) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data2 <= 2 && data1 <= 2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 1 && data1 <= 3
}
Prover Time taken = 0.001925
Prover Time taken = 0.002095
Prover Time taken = 0.002201
Prover Time taken = 0.001836
Verifying P0_Stable_t2_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data1 <= 0 && -1 < data1) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data2 <= 2 && data1 <= 2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1 && data1 <= 1
}
Prover Time taken = 0.001802
Prover Time taken = 0.002604
Prover Time taken = 0.002406
Prover Time taken = 0.002472
Verifying Q0_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data1 <= 0 && -1 < data1) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data2 <= 2 && data1 <= 2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1 && data1 <= 1
}
Prover Time taken = 0.001958
Prover Time taken = 0.001972
Prover Time taken = 0.001866
Prover Time taken = 0.001884
Verifying Q1_Stable_t1_s1: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data1 <= 0 && -1 < data1) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data2 <= 2 && data1 <= 2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 1 && data1 <= 3
}
Prover Time taken = 0.002015
Prover Time taken = 0.002275
Prover Time taken = 0.00201
Prover Time taken = 0.00204
Verifying Q1_Stable_t1_s2: 
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && data2 <= 0) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 1 && data1 <= 3
}
Prover Time taken = 0.001957
Prover Time taken = 0.001805
Prover Time taken = 0.001464
Prover Time taken = 0.001385
Verifying pre_condition: 
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data1 <= 0 && -1 < data1) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data2 <= 2 && data1 <= 2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1 && data1 <= 1
}
Prover Time taken = 0.001203
Prover Time taken = 0.001437
Prover Time taken = 0.001436
Prover Time taken = 0.001331
Prover time = 7.14
Number of prover queries = 3458
Learner time = 8.37
Number of learner queries = 287
Total time: 33.30
Number of positive examples:2
Number of negative examples:0
Number of Horn clauses:285
function {:existential true} {:inline} P0(data1: int, data2: int) : bool
{
  (1 < data1 + data2 && data1 + data2 <= 2 && data1 <= 0 && -1 < data1) || (1 < data1 + data2 && data1 + data2 <= 2 && 0 < data1 && 0 < data1 - data2 && -1 < data2) || (1 < data1 + data2 && 2 < data1 + data2 && 3 < data1 + data2 && data2 <= 2 && data1 <= 2)
}
function {:existential true} {:inline} P1(data1: int, data2: int) : bool
{
  (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && data2 <= 0) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && data1 <= 1) || (2 < data1 + data2 && data2 <= 2 && data1 <= 3 && 0 < data2 && 1 < data2 && 1 < data1 && 0 < data1 - data2)
}
function {:existential true} {:inline} P2(data1: int, data2: int) : bool
{
  (3 < data1 + data2 && -6 < data2 && data2 <= 2 && data1 <= 3 && data2 <= 1) || (3 < data1 + data2 && -6 < data2 && 2 < data2)
}
function {:existential true} {:inline} Q0(data1: int, data2: int) : bool
{
  -3 < data1 - data2 && data1 - data2 <= -1 && data1 <= 1
}
function {:existential true} {:inline} Q1(data1: int, data2: int) : bool
{
  -1 < data1 - data2 && data1 - data2 <= 1 && data1 <= 3
}
function {:existential true} {:inline} Q2(data1: int, data2: int) : bool
{
  data2 <= 1
}
verified

Boogie program verifier finished with 1 verified, 0 errors
